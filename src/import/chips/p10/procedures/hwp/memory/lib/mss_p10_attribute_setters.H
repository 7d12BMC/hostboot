/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/procedures/hwp/memory/lib/mss_p10_attribute_setters.H $ */
/*                                                                        */
/* OpenPOWER HostBoot Project                                             */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2018,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
// mss_p10_attribute_setters.H
#ifndef MSS_P10_ATTR_SETTERS_H_
#define MSS_P10_ATTR_SETTERS_H_

#include <fapi2.H>
#include <generic/memory/lib/utils/index.H>
#include <generic/memory/lib/utils/c_str.H>



namespace mss
{
namespace attr
{
///
/// @brief ATTR_PROC_OMI_OC_MAJOR_VER setter
/// @param[in] const ref to the TARGET_TYPE_PROC_CHIP
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_other_attr_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  The OMI OpenCAPI major version supported by this processor
///
inline fapi2::ReturnCode set_omi_oc_major_ver(const fapi2::Target<fapi2::TARGET_TYPE_PROC_CHIP>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_PROC_OMI_OC_MAJOR_VER, i_target, i_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed setting ATTR_PROC_OMI_OC_MAJOR_VER: 0x%lx",
             uint64_t(fapi2::current_err));
    return fapi2::current_err;
}

///
/// @brief ATTR_PROC_OMI_OC_MINOR_VER setter
/// @param[in] const ref to the TARGET_TYPE_PROC_CHIP
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_other_attr_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  The OMI OpenCAPI minor version supported by this processor
///
inline fapi2::ReturnCode set_omi_oc_minor_ver(const fapi2::Target<fapi2::TARGET_TYPE_PROC_CHIP>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_PROC_OMI_OC_MINOR_VER, i_target, i_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed setting ATTR_PROC_OMI_OC_MINOR_VER: 0x%lx",
             uint64_t(fapi2::current_err));
    return fapi2::current_err;
}


///
/// @brief ATTR_OMI_CHANNEL_FAIL_ACTION setter
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_other_attr_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Selects the settings for DSTLFIR and USTLFIR channel fail FIRs Default: XSTOP (channel
/// based FIRs will cause checkstop) Note that this will get overridden by ATTR_CHIP_EC_FEATURE_OMI_CHANNEL_FIRS
/// on DD1 unless set as CONST. Affects the following FIRs: DSTLFIR_SUBCHANNEL_A/B_COUNTER_ERROR
/// DSTLFIR_SUBCHANNEL_A/B_BUFFER_OVERUSE_ERROR DSTLFIR_SUBCHANNEL_A/B_CHANNEL_TIMEOUT
/// DSTLFIR_SUBCHANNEL_A/B_PARITY_ERROR DSTLFIR_SUBCHANNEL_A/B_TLX_CHECKSTOP USTLFIR_CHANA/B_UNEXP_DATA_ERR
/// USTLFIR_CHANA/B_INVALID_TEMPLATE_ERROR USTLFIR_CHANA/B_FAIL_RESP_CHECKSTOP USTLFIR_CHANA/B_FLIT_PARITY_ERROR
/// USTLFIR_CHANA/B_FATAL_PARITY_ERROR USTLFIR_CHANA/B_BAD_RESP_LOG_VAL USTLFIR_CHANA/B_EXCESS_BAD_DATA_BITS
/// USTLFIR_CHANA/B_COMP_TMPL0_DATA_NOT_MMIO USTLFIR_CHANA/B_EXCESS_DATA_ERROR USTLFIR_CHANA/B_BADCRC_DATA_NOT_VALID_ERROR
/// USTLFIR_CHANA/B_FIFO_OVERFLOW_ERROR USTLFIR_CHANA/B_INVALID_CMD_ERROR USTLFIR_CHANA/B_INVALID_DL_DP_COMBO
///
inline fapi2::ReturnCode set_omi_channel_fail_action(uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_OMI_CHANNEL_FAIL_ACTION, fapi2::Target<fapi2::TARGET_TYPE_SYSTEM>(), i_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed setting ATTR_OMI_CHANNEL_FAIL_ACTION: 0x%lx",
             uint64_t(fapi2::current_err));
    return fapi2::current_err;
}


} // attr
} // mss

#endif
