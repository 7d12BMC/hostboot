/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/ocmb/explorer/procedures/hwp/memory/lib/mss_explorer_attribute_getters.H $ */
/*                                                                        */
/* OpenPOWER HostBoot Project                                             */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019                             */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
// mss_explorer_attribute_getters.H
#ifndef MSS_EXPLORER_ATTR_GETTERS_H_
#define MSS_EXPLORER_ATTR_GETTERS_H_

#include <fapi2.H>
#include <generic/memory/lib/utils/index.H>
#include <generic/memory/lib/utils/c_str.H>



namespace mss
{
namespace attr
{
///
/// @brief ATTR_MEM_EXP_INIT_VREF_DQ getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Initial VrefDQ setting before training
///
inline fapi2::ReturnCode get_exp_init_vref_dq(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_INIT_VREF_DQ, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EXP_INIT_VREF_DQ: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_INIT_VREF_DQ getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Initial VrefDQ setting before training
///
inline fapi2::ReturnCode get_exp_init_vref_dq(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_INIT_VREF_DQ, i_target, l_value) );
    memcpy(o_array, &l_value, 8);
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EXP_INIT_VREF_DQ: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_INIT_PHY_VREF getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Initial DQ Vref setting of PHY before training
///
inline fapi2::ReturnCode get_exp_init_phy_vref(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_INIT_PHY_VREF, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EXP_INIT_PHY_VREF: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_INIT_PHY_VREF getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Initial DQ Vref setting of PHY before training
///
inline fapi2::ReturnCode get_exp_init_phy_vref(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_INIT_PHY_VREF, i_target, l_value) );
    memcpy(o_array, &l_value, 8);
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EXP_INIT_PHY_VREF: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_RCD_DIC getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  CA and CS signal Driver Characteristics from F0RC03, F0RC04, F0RC05
///
inline fapi2::ReturnCode get_exp_rcd_dic(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target, uint16_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_RCD_DIC, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EXP_RCD_DIC: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_RCD_VOLTAGE_CTRL getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  RCD operating voltage VDD and VrefCA control from F0RC0B and F0RC1x
///
inline fapi2::ReturnCode get_exp_rcd_voltage_ctrl(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_RCD_VOLTAGE_CTRL, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EXP_RCD_VOLTAGE_CTRL: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_DRAM_ADDRESS_MIRRORING getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Ranks that have address mirroring. This data is derived from SPD or VPD. Note: This
/// is a bit-wise map and muliple ranks can be mirrored.
///
inline fapi2::ReturnCode get_exp_dram_address_mirroring(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_DRAM_ADDRESS_MIRRORING, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EXP_DRAM_ADDRESS_MIRRORING: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_DRAM_ADDRESS_MIRRORING getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Ranks that have address mirroring. This data is derived from SPD or VPD. Note: This
/// is a bit-wise map and muliple ranks can be mirrored.
///
inline fapi2::ReturnCode get_exp_dram_address_mirroring(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_DRAM_ADDRESS_MIRRORING, i_target, l_value) );
    memcpy(o_array, &l_value, 2);
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EXP_DRAM_ADDRESS_MIRRORING: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_RCD_SLEW_RATE getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  RCD slew rate control from F1RC02,F1RC03,F1RC04,F1RC05
///
inline fapi2::ReturnCode get_exp_rcd_slew_rate(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_RCD_SLEW_RATE, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EXP_RCD_SLEW_RATE: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_SPD_CL_SUPPORTED getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint32_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Cas Latency Supported by DRAM
///
inline fapi2::ReturnCode get_exp_spd_cl_supported(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint32_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_SPD_CL_SUPPORTED, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EXP_SPD_CL_SUPPORTED: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_SPD_TAA_MIN getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Minimum Cas Latency Time (tAAmin) in Picosecond (Byte 24)
///
inline fapi2::ReturnCode get_exp_spd_taa_min(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_SPD_TAA_MIN, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EXP_SPD_TAA_MIN: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_FIRMWARE_EMULATION_MODE getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Enable Special mode for Emulation Support
///
inline fapi2::ReturnCode get_exp_firmware_emulation_mode(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_FIRMWARE_EMULATION_MODE, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EXP_FIRMWARE_EMULATION_MODE: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_DFIMRL_CLK getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  timing parameter for the DFIMRL clock
///
inline fapi2::ReturnCode get_exp_dfimrl_clk(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_DFIMRL_CLK, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EXP_DFIMRL_CLK: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_ATXDLY_A getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[ADDRESS INDEX] ATxDly_A/B[0]: ODT[1],ODT[0],CS_N[0],CS_N[1] ATxDly_A/B[1]:
/// ADDR[13],ADDR[5],BG[0],CKE[1] ATxDly_A/B[2]: ADDR[17],ADDR[7],BA[0],ADDR[16] ATxDly_A/B[3]:
/// ADDR[8],BG[1],CID[1],CID[0] ATxDly_A/B[4]: ADDR[1],ADDR[9],ADDR[2],CAPARITY ATxDly_A/B[5]:
/// ADDR[12],ADDR[3],ADDR[4],ADDR[0] ATxDly_A/B[6]: CKE[0],ADDR[15],ACT_N,ADDR[10] ATxDly_A/B[7]:
/// ADDR[11],ADDR[6],BA[1],ADDR[14]
///
inline fapi2::ReturnCode get_exp_atxdly_a(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[8] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_ATXDLY_A, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EFF_ATXDLY_A: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_ATXDLY_A getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[ADDRESS INDEX] ATxDly_A/B[0]: ODT[1],ODT[0],CS_N[0],CS_N[1] ATxDly_A/B[1]:
/// ADDR[13],ADDR[5],BG[0],CKE[1] ATxDly_A/B[2]: ADDR[17],ADDR[7],BA[0],ADDR[16] ATxDly_A/B[3]:
/// ADDR[8],BG[1],CID[1],CID[0] ATxDly_A/B[4]: ADDR[1],ADDR[9],ADDR[2],CAPARITY ATxDly_A/B[5]:
/// ADDR[12],ADDR[3],ADDR[4],ADDR[0] ATxDly_A/B[6]: CKE[0],ADDR[15],ACT_N,ADDR[10] ATxDly_A/B[7]:
/// ADDR[11],ADDR[6],BA[1],ADDR[14]
///
inline fapi2::ReturnCode get_exp_atxdly_a(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[8])
{
    uint8_t l_value[8] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_ATXDLY_A, i_target, l_value) );
    memcpy(o_array, &l_value, 8);
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EFF_ATXDLY_A: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_ATXDLY_B getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[ADDRESS INDEX] ATxDly_A/B[0]: ODT[1],ODT[0],CS_N[0],CS_N[1] ATxDly_A/B[1]:
/// ADDR[13],ADDR[5],BG[0],CKE[1] ATxDly_A/B[2]: ADDR[17],ADDR[7],BA[0],ADDR[16] ATxDly_A/B[3]:
/// ADDR[8],BG[1],CID[1],CID[0] ATxDly_A/B[4]: ADDR[1],ADDR[9],ADDR[2],CAPARITY ATxDly_A/B[5]:
/// ADDR[12],ADDR[3],ADDR[4],ADDR[0] ATxDly_A/B[6]: CKE[0],ADDR[15],ACT_N,ADDR[10] ATxDly_A/B[7]:
/// ADDR[11],ADDR[6],BA[1],ADDR[14]
///
inline fapi2::ReturnCode get_exp_atxdly_b(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[8] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_ATXDLY_B, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EFF_ATXDLY_B: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_ATXDLY_B getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[ADDRESS INDEX] ATxDly_A/B[0]: ODT[1],ODT[0],CS_N[0],CS_N[1] ATxDly_A/B[1]:
/// ADDR[13],ADDR[5],BG[0],CKE[1] ATxDly_A/B[2]: ADDR[17],ADDR[7],BA[0],ADDR[16] ATxDly_A/B[3]:
/// ADDR[8],BG[1],CID[1],CID[0] ATxDly_A/B[4]: ADDR[1],ADDR[9],ADDR[2],CAPARITY ATxDly_A/B[5]:
/// ADDR[12],ADDR[3],ADDR[4],ADDR[0] ATxDly_A/B[6]: CKE[0],ADDR[15],ACT_N,ADDR[10] ATxDly_A/B[7]:
/// ADDR[11],ADDR[6],BA[1],ADDR[14]
///
inline fapi2::ReturnCode get_exp_atxdly_b(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[8])
{
    uint8_t l_value[8] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_ATXDLY_B, i_target, l_value) );
    memcpy(o_array, &l_value, 8);
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EFF_ATXDLY_B: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}


///
/// @brief ATTR_MSS_OCMB_ENTERPRISE_MODE getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Indicates whether the OCMB can support enterprise mode or if it has been fused to
/// only support non-enterprise mode. Note: needs to be setup by the get ECID functionality
///
inline fapi2::ReturnCode get_ocmb_enterprise_mode(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_OCMB_ENTERPRISE_MODE, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MSS_OCMB_ENTERPRISE_MODE: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_OCMB_NONENTERPRISE_MODE_OVERRIDE getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  An override to allow an enterprise capable DIMM to be run in non-enterprise mode.
/// Defaults to NO_OVERRIDE
///
inline fapi2::ReturnCode get_ocmb_nonenterprise_mode_override(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>&
        i_target, uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_OCMB_NONENTERPRISE_MODE_OVERRIDE, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MSS_OCMB_NONENTERPRISE_MODE_OVERRIDE: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_OCMB_HALF_DIMM_MODE getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Indicates whether the OCMB should be run in half DIMM mode or not Note: needs to
/// be setup by the get ECID functionality
///
inline fapi2::ReturnCode get_ocmb_half_dimm_mode(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_OCMB_HALF_DIMM_MODE, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MSS_OCMB_HALF_DIMM_MODE: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_OCMB_HALF_DIMM_MODE_OVERRIDE getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  An override that allows the user to control full or half DIMM mode
///
inline fapi2::ReturnCode get_ocmb_half_dimm_mode_override(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_OCMB_HALF_DIMM_MODE_OVERRIDE, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MSS_OCMB_HALF_DIMM_MODE_OVERRIDE: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_MEM_MVPD_FWMS getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint32_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Mark store records from OCMB VPD. The array dimension is [port][mark]. Explorer
/// only has one port so only [0][mark] is used in explorer.
///
inline fapi2::ReturnCode get_mvpd_fwms(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
                                       uint32_t (&o_array)[8])
{
    uint32_t l_value[8] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_MEM_MVPD_FWMS, i_target, l_value) );
    memcpy(o_array, &l_value, 32);
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MSS_MEM_MVPD_FWMS: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_REORDER_QUEUE_SETTING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Contains the settings for write/read reorder queue
///
inline fapi2::ReturnCode get_exp_reorder_queue_setting(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_REORDER_QUEUE_SETTING, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MSS_EXP_REORDER_QUEUE_SETTING: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_OCMB_ECID getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ECID of the chip as determined by the IPL getecid procedure.
///
inline fapi2::ReturnCode get_ocmb_ecid(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target, uint16_t& o_value)
{
    uint16_t l_value[14] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_OCMB_ECID, i_target.getParent<fapi2::TARGET_TYPE_OCMB_CHIP>(), l_value) );
    o_value = l_value[mss::index(i_target)];
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MSS_OCMB_ECID: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_OCMB_ECID getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ECID of the chip as determined by the IPL getecid procedure.
///
inline fapi2::ReturnCode get_ocmb_ecid(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint16_t& o_value)
{
    uint16_t l_value[14] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_OCMB_ECID, l_port.getParent<fapi2::TARGET_TYPE_OCMB_CHIP>(), l_value) );
    o_value = l_value[mss::index(l_port)];
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MSS_OCMB_ECID: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_OCMB_ECID getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ECID of the chip as determined by the IPL getecid procedure.
///
inline fapi2::ReturnCode get_ocmb_ecid(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
                                       uint16_t (&o_array)[14])
{
    uint16_t l_value[14] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_OCMB_ECID, i_target, l_value) );
    memcpy(o_array, &l_value, 28);
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MSS_OCMB_ECID: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}


///
/// @brief ATTR_MSS_OCMB_ENTERPRISE_POLICY getter
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_other_attr_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Indicates whether the OCMB is allowed to run in enterprise mode, commodity mode,
/// or either. ALLOW_ENTERPRISE = Most permissive, uses whatever is installed in the
/// way it is intended to be used. REQUIRE_ENTERPRISE = Throws an error for any commodity
/// dimms that are installed. FORCE_NONENTERPRISE = Throws an error for any enterprise
/// dimms that are installed.
///
inline fapi2::ReturnCode get_ocmb_enterprise_policy(uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_OCMB_ENTERPRISE_POLICY, fapi2::Target<fapi2::TARGET_TYPE_SYSTEM>(), o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MSS_OCMB_ENTERPRISE_POLICY: 0x%lx",
             uint64_t(fapi2::current_err));
    return fapi2::current_err;
}


///
/// @brief ATTR_MEM_EFF_PSTATES getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] This byte defines the allowed number of P-States for the DDR4 Differential
/// Memory Buffer. P-States can be thought of as an available performance profile.
///
inline fapi2::ReturnCode get_pstates(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PSTATES, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EFF_PSTATES: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PSTATES getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] This byte defines the allowed number of P-States for the DDR4 Differential
/// Memory Buffer. P-States can be thought of as an available performance profile.
///
inline fapi2::ReturnCode get_pstates(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target, uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PSTATES, i_target, l_value) );
    memcpy(o_array, &l_value, 2);
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EFF_PSTATES: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_BYTE_ENABLES getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] These bits are used to activate or deactivate bytes in the DDR interface
/// of the differential memory buffer chip. Right aligned data.
///
inline fapi2::ReturnCode get_byte_enables(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint16_t& o_value)
{
    uint16_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_BYTE_ENABLES, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EFF_BYTE_ENABLES: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_BYTE_ENABLES getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] These bits are used to activate or deactivate bytes in the DDR interface
/// of the differential memory buffer chip. Right aligned data.
///
inline fapi2::ReturnCode get_byte_enables(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&o_array)[2])
{
    uint16_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_BYTE_ENABLES, i_target, l_value) );
    memcpy(o_array, &l_value, 4);
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EFF_BYTE_ENABLES: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_NIBBLE_ENABLES getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint32_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] These bits are used to select the active nibbles or DQS on the DDR interface.
/// Right aligned data.
///
inline fapi2::ReturnCode get_nibble_enables(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint32_t& o_value)
{
    uint32_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_NIBBLE_ENABLES, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EFF_NIBBLE_ENABLES: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_NIBBLE_ENABLES getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint32_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] These bits are used to select the active nibbles or DQS on the DDR interface.
/// Right aligned data.
///
inline fapi2::ReturnCode get_nibble_enables(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint32_t (&o_array)[2])
{
    uint32_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_NIBBLE_ENABLES, i_target, l_value) );
    memcpy(o_array, &l_value, 8);
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EFF_NIBBLE_ENABLES: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_FOUR_RANK_MODE getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] A-Side CA bus drives rank 0/1 and B-Side CA bus drives rank 2/3, DQ/DQS
/// are shared across the ranks
///
inline fapi2::ReturnCode get_four_rank_mode(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_FOUR_RANK_MODE, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EFF_FOUR_RANK_MODE: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_FOUR_RANK_MODE getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] A-Side CA bus drives rank 0/1 and B-Side CA bus drives rank 2/3, DQ/DQS
/// are shared across the ranks
///
inline fapi2::ReturnCode get_four_rank_mode(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_FOUR_RANK_MODE, i_target, l_value) );
    memcpy(o_array, &l_value, 2);
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EFF_FOUR_RANK_MODE: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_MRAM_SUPPORT getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] MRAM Support Support timing parameters of Everspin DDR4 MRAM
///
inline fapi2::ReturnCode get_mram_support(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_MRAM_SUPPORT, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EFF_MRAM_SUPPORT: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_MRAM_SUPPORT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] MRAM Support Support timing parameters of Everspin DDR4 MRAM
///
inline fapi2::ReturnCode get_mram_support(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_MRAM_SUPPORT, i_target, l_value) );
    memcpy(o_array, &l_value, 2);
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EFF_MRAM_SUPPORT: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_DDP_COMPATIBILITY getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] DDP Compatibility Support 1 rank 3DS Device in DDP board routing. CKE[1],
/// CSN[1], ODT[1] of PHY are connected to C[0], C[1], C[2] of DRAM
///
inline fapi2::ReturnCode get_ddp_compatibility(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DDP_COMPATIBILITY, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EFF_DDP_COMPATIBILITY: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_DDP_COMPATIBILITY getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] DDP Compatibility Support 1 rank 3DS Device in DDP board routing. CKE[1],
/// CSN[1], ODT[1] of PHY are connected to C[0], C[1], C[2] of DRAM
///
inline fapi2::ReturnCode get_ddp_compatibility(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DDP_COMPATIBILITY, i_target, l_value) );
    memcpy(o_array, &l_value, 2);
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EFF_DDP_COMPATIBILITY: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_TSV_8H_SUPPORT getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] TSV 8H Support Support 8H 3DS routing in board routing when parity check
/// is disabled
///
inline fapi2::ReturnCode get_tsv_8h_support(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_TSV_8H_SUPPORT, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EFF_TSV_8H_SUPPORT: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_TSV_8H_SUPPORT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] TSV 8H Support Support 8H 3DS routing in board routing when parity check
/// is disabled
///
inline fapi2::ReturnCode get_tsv_8h_support(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_TSV_8H_SUPPORT, i_target, l_value) );
    memcpy(o_array, &l_value, 2);
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MEM_EFF_TSV_8H_SUPPORT: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}


///
/// @brief ATTR_EXPLR_ENABLE_US_TMPL_1 getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Enable Explorer upstream transmit template 1. Should be disabled by default.
///
inline fapi2::ReturnCode get_explr_enable_us_tmpl_1(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXPLR_ENABLE_US_TMPL_1, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXPLR_ENABLE_US_TMPL_1: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXPLR_ENABLE_US_TMPL_5 getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Enable Explorer upstream transmit template 5. Should be enabled by default.
///
inline fapi2::ReturnCode get_explr_enable_us_tmpl_5(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXPLR_ENABLE_US_TMPL_5, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXPLR_ENABLE_US_TMPL_5: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXPLR_ENABLE_US_TMPL_9 getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Enable Explorer upstream transmit template 9. Should be enabled by default.
///
inline fapi2::ReturnCode get_explr_enable_us_tmpl_9(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXPLR_ENABLE_US_TMPL_9, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXPLR_ENABLE_US_TMPL_9: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXPLR_ENABLE_US_TMPL_A getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Enable Explorer upstream transmit template A. Not supported by Axone
///
inline fapi2::ReturnCode get_explr_enable_us_tmpl_a(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXPLR_ENABLE_US_TMPL_A, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXPLR_ENABLE_US_TMPL_A: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXPLR_ENABLE_US_TMPL_B getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Enable Explorer upstream transmit template B. Not supported by Axone
///
inline fapi2::ReturnCode get_explr_enable_us_tmpl_b(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXPLR_ENABLE_US_TMPL_B, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXPLR_ENABLE_US_TMPL_B: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXPLR_TMPL_0_PACING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Template 0 pacing
///
inline fapi2::ReturnCode get_explr_tmpl_0_pacing(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXPLR_TMPL_0_PACING, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXPLR_TMPL_0_PACING: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXPLR_TMPL_1_PACING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Template 1 pacing
///
inline fapi2::ReturnCode get_explr_tmpl_1_pacing(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXPLR_TMPL_1_PACING, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXPLR_TMPL_1_PACING: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXPLR_TMPL_5_PACING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Template 5 pacing
///
inline fapi2::ReturnCode get_explr_tmpl_5_pacing(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXPLR_TMPL_5_PACING, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXPLR_TMPL_5_PACING: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXPLR_TMPL_9_PACING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Template 9 pacing
///
inline fapi2::ReturnCode get_explr_tmpl_9_pacing(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXPLR_TMPL_9_PACING, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXPLR_TMPL_9_PACING: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXPLR_TMPL_B_PACING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Template B pacing
///
inline fapi2::ReturnCode get_explr_tmpl_b_pacing(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXPLR_TMPL_B_PACING, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXPLR_TMPL_B_PACING: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXPLR_SHRT_BACKOFF_TIMER getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Short back-off timer value.
///
inline fapi2::ReturnCode get_explr_shrt_backoff_timer(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXPLR_SHRT_BACKOFF_TIMER, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXPLR_SHRT_BACKOFF_TIMER: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXPLR_METADATA_ENABLE getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Enable OpenCAPI metadata
///
inline fapi2::ReturnCode get_explr_metadata_enable(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXPLR_METADATA_ENABLE, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXPLR_METADATA_ENABLE: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXPLR_PASID_BASE getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint32_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The PASID base
///
inline fapi2::ReturnCode get_explr_pasid_base(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint32_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXPLR_PASID_BASE, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXPLR_PASID_BASE: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXPLR_ACTAG_BASE getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint32_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The desired actag base
///
inline fapi2::ReturnCode get_explr_actag_base(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint32_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXPLR_ACTAG_BASE, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXPLR_ACTAG_BASE: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXPLR_AFU_ACTAG_LEN getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint32_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The expected number of actags to be supported by the ocmb. Must be 1 for Explorer
/// Validate via OCTRLTAG 10518 OCTRLTAG_AFU_ACTAG_LENGTH_SUPPORTED
///
inline fapi2::ReturnCode get_explr_afu_actag_len(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint32_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXPLR_AFU_ACTAG_LEN, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXPLR_AFU_ACTAG_LEN: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXPLR_PASID_LEN getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The expected number of PASIDs to be supported by the ocmb. Number of consecutive
/// PASIDs this AFU supports is 2^pasid_length_supported Validate via OPASID 10100 OPASID_MAX_PASID_WIDTH
///
inline fapi2::ReturnCode get_explr_pasid_len(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXPLR_PASID_LEN, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXPLR_PASID_LEN: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}


///
/// @brief ATTR_MSS_OCMB_EXP_BOOT_CONFIG_FW_MODE getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Indicates the FW MODE of the OCMB
///
inline fapi2::ReturnCode get_ocmb_exp_boot_config_fw_mode(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_OCMB_EXP_BOOT_CONFIG_FW_MODE, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MSS_OCMB_EXP_BOOT_CONFIG_FW_MODE: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_OCMB_EXP_BOOT_CONFIG_OPENCAPI_LOOPBACK_TEST getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Indicates wheather to enable the loopback test
///
inline fapi2::ReturnCode get_ocmb_exp_boot_config_opencapi_loopback_test(const
        fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target, uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_OCMB_EXP_BOOT_CONFIG_OPENCAPI_LOOPBACK_TEST, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MSS_OCMB_EXP_BOOT_CONFIG_OPENCAPI_LOOPBACK_TEST: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_OCMB_EXP_BOOT_CONFIG_TRANSPORT_LAYER getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The transport layer of OCMB
///
inline fapi2::ReturnCode get_ocmb_exp_boot_config_transport_layer(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>&
        i_target, uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_OCMB_EXP_BOOT_CONFIG_TRANSPORT_LAYER, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MSS_OCMB_EXP_BOOT_CONFIG_TRANSPORT_LAYER: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_OCMB_EXP_BOOT_CONFIG_DL_LAYER_BOOT_MODE getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Indicates whether the OpenCAPI DL boots immediately or waits for host command.
///
inline fapi2::ReturnCode get_ocmb_exp_boot_config_dl_layer_boot_mode(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>&
        i_target, uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_OCMB_EXP_BOOT_CONFIG_DL_LAYER_BOOT_MODE, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MSS_OCMB_EXP_BOOT_CONFIG_DL_LAYER_BOOT_MODE: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_OCMB_EXP_BOOT_CONFIG_DFE_DISABLE getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Set to disable DFE
///
inline fapi2::ReturnCode get_ocmb_exp_boot_config_dfe_disable(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>&
        i_target, uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_OCMB_EXP_BOOT_CONFIG_DFE_DISABLE, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MSS_OCMB_EXP_BOOT_CONFIG_DFE_DISABLE: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_OCMB_EXP_BOOT_CONFIG_LANE_MODE getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The lane width of the OpenCapi channel
///
inline fapi2::ReturnCode get_ocmb_exp_boot_config_lane_mode(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_OCMB_EXP_BOOT_CONFIG_LANE_MODE, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MSS_OCMB_EXP_BOOT_CONFIG_LANE_MODE: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_OCMB_EXP_BOOT_CONFIG_SERDES_FREQUENCY getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The frequency of the OpenCAPI
///
inline fapi2::ReturnCode get_ocmb_exp_boot_config_serdes_frequency(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>&
        i_target, uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_OCMB_EXP_BOOT_CONFIG_SERDES_FREQUENCY, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_MSS_OCMB_EXP_BOOT_CONFIG_SERDES_FREQUENCY: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}


///
/// @brief ATTR_EXP_MEM_THROTTLED_N_COMMANDS_PER_PORT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  This is the throttled N commands per window of M DRAM clocks setting for cfg_nm_n_per_port.
///
inline fapi2::ReturnCode get_mem_throttled_n_commands_per_port(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>&
        i_target, uint16_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_MEM_THROTTLED_N_COMMANDS_PER_PORT, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXP_MEM_THROTTLED_N_COMMANDS_PER_PORT: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXP_MEM_THROTTLED_N_COMMANDS_PER_SLOT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  This is the throttle numerator setting for cfg_nm_n_per_slot
///
inline fapi2::ReturnCode get_mem_throttled_n_commands_per_slot(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>&
        i_target, uint16_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_MEM_THROTTLED_N_COMMANDS_PER_SLOT, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXP_MEM_THROTTLED_N_COMMANDS_PER_SLOT: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXP_RUNTIME_MEM_THROTTLED_N_COMMANDS_PER_PORT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Runtime throttled N commands per M DRAM clocks setting for cfg_nm_n_per_port.
///
inline fapi2::ReturnCode get_runtime_mem_throttled_n_commands_per_port(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>&
        i_target, uint16_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_RUNTIME_MEM_THROTTLED_N_COMMANDS_PER_PORT, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXP_RUNTIME_MEM_THROTTLED_N_COMMANDS_PER_PORT: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXP_RUNTIME_MEM_THROTTLED_N_COMMANDS_PER_SLOT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Runtime throttle numerator setting for cfg_nm_n_per_slot
///
inline fapi2::ReturnCode get_runtime_mem_throttled_n_commands_per_slot(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>&
        i_target, uint16_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_RUNTIME_MEM_THROTTLED_N_COMMANDS_PER_SLOT, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXP_RUNTIME_MEM_THROTTLED_N_COMMANDS_PER_SLOT: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXP_SAFEMODE_MEM_THROTTLED_N_COMMANDS_PER_PORT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Safe mode throttle value for numerator cfg_nm_n_per_port Set to below optimum value/
/// rate. On a per port basis Also used for emergency mode throttle MBA_FARB4Q_EMERGENCY_N
/// Used to thermally protect the system in all supported environmental conditions when
/// OCC is not functional
///
inline fapi2::ReturnCode get_safemode_mem_throttled_n_commands_per_port(const
        fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target, uint16_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_SAFEMODE_MEM_THROTTLED_N_COMMANDS_PER_PORT, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXP_SAFEMODE_MEM_THROTTLED_N_COMMANDS_PER_PORT: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXP_MEM_WATT_TARGET getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint32_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Total memory power used to throttle for each dimm Used to compute the throttles
/// on the channel and/or dimms for OCC OCC sets after IPL
///
inline fapi2::ReturnCode get_mem_watt_target(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint32_t& o_value)
{
    uint32_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_MEM_WATT_TARGET, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXP_MEM_WATT_TARGET: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXP_MEM_WATT_TARGET getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint32_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Total memory power used to throttle for each dimm Used to compute the throttles
/// on the channel and/or dimms for OCC OCC sets after IPL
///
inline fapi2::ReturnCode get_mem_watt_target(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint32_t (&o_array)[2])
{
    uint32_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_MEM_WATT_TARGET, i_target, l_value) );
    memcpy(o_array, &l_value, 8);
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXP_MEM_WATT_TARGET: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXP_TOTAL_PWR_SLOPE getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  VDDR+VPP Power slope value for dimm creator: mss_eff_config consumer: mss_bulk_pwr_throttles
///
inline fapi2::ReturnCode get_total_pwr_slope(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint16_t& o_value)
{
    uint16_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_TOTAL_PWR_SLOPE, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXP_TOTAL_PWR_SLOPE: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXP_TOTAL_PWR_SLOPE getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  VDDR+VPP Power slope value for dimm creator: mss_eff_config consumer: mss_bulk_pwr_throttles
///
inline fapi2::ReturnCode get_total_pwr_slope(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&o_array)[2])
{
    uint16_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_TOTAL_PWR_SLOPE, i_target, l_value) );
    memcpy(o_array, &l_value, 4);
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXP_TOTAL_PWR_SLOPE: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXP_TOTAL_PWR_INTERCEPT getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  VDDR+VPP Power intercept value for dimm
///
inline fapi2::ReturnCode get_total_pwr_intercept(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint16_t& o_value)
{
    uint16_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_TOTAL_PWR_INTERCEPT, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXP_TOTAL_PWR_INTERCEPT: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXP_TOTAL_PWR_INTERCEPT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  VDDR+VPP Power intercept value for dimm
///
inline fapi2::ReturnCode get_total_pwr_intercept(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&o_array)[2])
{
    uint16_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_TOTAL_PWR_INTERCEPT, i_target, l_value) );
    memcpy(o_array, &l_value, 4);
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXP_TOTAL_PWR_INTERCEPT: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXP_DATABUS_UTIL getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint32_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Databus utilization per port limit used to calculate memory throttles and power
/// limit
///
inline fapi2::ReturnCode get_databus_util(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target, uint32_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_DATABUS_UTIL, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXP_DATABUS_UTIL: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXP_PORT_MAXPOWER getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint32_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Channel Pair Max Power output from thermal procedures
///
inline fapi2::ReturnCode get_port_maxpower(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint32_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_PORT_MAXPOWER, i_target, o_value) );
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXP_PORT_MAXPOWER: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXP_DIMM_THERMAL_LIMIT getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint32_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DIMM Max Power based on a thermal limit Decoded from ATTR_MSS_MRW_THERMAL_POWER_LIMIT
///
inline fapi2::ReturnCode get_dimm_thermal_limit(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint32_t& o_value)
{
    uint32_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_DIMM_THERMAL_LIMIT, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXP_DIMM_THERMAL_LIMIT: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}

///
/// @brief ATTR_EXP_DIMM_THERMAL_LIMIT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint32_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DIMM Max Power based on a thermal limit Decoded from ATTR_MSS_MRW_THERMAL_POWER_LIMIT
///
inline fapi2::ReturnCode get_dimm_thermal_limit(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint32_t (&o_array)[2])
{
    uint32_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_DIMM_THERMAL_LIMIT, i_target, l_value) );
    memcpy(o_array, &l_value, 8);
    return fapi2::current_err;

fapi_try_exit:
    FAPI_ERR("failed getting ATTR_EXP_DIMM_THERMAL_LIMIT: 0x%lx (target: %s)",
             uint64_t(fapi2::current_err), mss::c_str(i_target));
    return fapi2::current_err;
}


} // attr
} // mss

#endif
