# We need to add the script directory in the P10 standalone model
if defined hb_script_to_run {
    $hb_script_location = (python "''.join(map('/'.__add__,\""+$hb_script_to_run+"\"[1:].split('/')[0:-1]))")
    $script_dir = (python "''.join(map('/'.__add__,\""+$hb_script_location+"\"[1:].split('/')[0:-1]))")
    add-directory $script_dir
}

$hb_startup_path = (lookup-file hbfw/startup.simics)

python "os.environ['HB_TOOLPATH'] = \""+$hb_script_location+"\""

$hb_machine = "P10"
# Simics relies on hb_mode; hb_mode is 0 for Axone and beyond
$hb_mode = 0

python "os.environ['HB_MACHINE'] = \""+$hb_machine+"\""
echo "HB_MACHINE is: "+$hb_machine

$hb_pnor = ""

$hb_masterproc = (get-master-procs)[0]
$hb_masterproc_cecchip = (get-master-cec-chips)[0]
$hb_pnor = (get-master-pnors)[0]

echo "Master Proc is: "+$hb_masterproc
echo "Master Proc Cec-Chip is: "+$hb_masterproc_cecchip

#New Simics flow can simply get the string from get-master-pnor command

if ($hb_pnor == NIL) {
    try {
        @simenv.hb_pnor = quiet_run_command("get-master-pnor")[0]
        @SIM_get_object(simenv.hb_pnor[0])
    } except {
        # Default to Nimbus name
        foreach $pnor in (get-object-list -all BmcCmp) {
            $hb_pnor = ($pnor)
        }
        $hb_pnor = $hb_pnor+".sfc_master_mem"
    }
}
echo "Master PNOR is: "+$hb_pnor

# Choose a default core to start with
$hb_cpu = "system_cmp0.cpu0_0_00_0"
echo "Defaulting to CPU "+$hb_cpu+" for Hostboot tools"

# Prevent SBE Updates from happening on an IPL
echo "Altering SBE SEEPROM Versions to disable Update in IPL"
foreach $cc in (get-all-procs) {
# These commands cause P10 simics to fail because the seeprom*_image component
# is not yet implemented in P10 simics. The lines need to be uncommented when
# the SBE is implemented in the P10 model.
        #($cc).seeprom1_image.set 0x3FED9 0x5A5A5A5A 8 -l
        #($cc).seeprom3_image.set 0x3FED9 0x5A5A5A5A 8 -l
}

# Load HB debug tools.
try {
    run-python-file (lookup-file hbfw/simics-debug-framework.py)
}   except { echo "ERROR: Failed to load Simics debug framework (simics-debug-framework.py)" }
try {
    run-python-file (lookup-file hbfw/hb-simdebug.py)
} except { echo "ERROR: Failed to load Hostboot debug tools (hb-simdebug.py)" }


# Determine security state
$hw_security=(shell "echo $SECURITY_HW_POLICY")
if($hw_security == "") {
    # Assume default (no HW security) if not specified
    $hw_security = "0"
}

if(($hw_security != "1") and ($hw_security != "0")) {
    # Emit warning and assume default
    echo ("SECURITY: WARNING! Bad value "+
        $hw_security+" for HW security policy, defaulting to 0")
    $hw_security = "0"
}
echo "SECURITY: HW security policy set to "+$hw_security

# Translate security state to SIMICS jumper state
$jumperApplied=TRUE
if($hw_security == "1") {
    $jumperApplied=FALSE
}

# Set logical jumper state in SIMICS based on HW policy
#     "TRUE"=jumper applied(security disabled, default)
#     "FALSE"=jumper removed(security enabled)

# Load jumper state to the master processor
$hb_masterproc.set-secure-jumper value = $jumperApplied

# Load jumper state to all slave processors
foreach $procS in ($hb_masterproc.get-slave-procs) {
    $procS.set-secure-jumper value = $jumperApplied
}

run-command-file (lookup-file hbfw/standalone.simics)

