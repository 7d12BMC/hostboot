# Note : Assumes these vars were setup in startup.simics
# $hb_masterproc : name of master proc chip object
##

$enable_2proc = "0"
@if 'HB_ENABLE_2PROC' in os.environ: simenv.enable_2proc = "1"

$hb_pnor = ""
$hb_pnor = (get-master-pnors)[0]

#New Simics flow can simply get the string from get-master-pnor command
if ($hb_pnor == NIL) {
    try {
        @simenv.hb_pnor = quiet_run_command("get-master-pnor")[0]
        @SIM_get_object(simenv.hb_pnor[0])
    } except {
        # Default to Nimbus name
        foreach $pnor in (get-object-list -all BmcCmp) {
            $hb_pnor = ($pnor)
        }
        $hb_pnor = $hb_pnor+".sfc_master_mem"
    }
}
echo "Master PNOR is: "+$hb_pnor

$vpo_compile = "0"
@if 'VPO_COMPILE' in os.environ: simenv.vpo_compile = "1"

if( $vpo_compile == "1" ) {
    echo "    - Skipping EECACHE preload (VPO Mode)"
} else if( $enable_2proc == "1" )  {
    echo "    - Skipping EECACHE preload (2 Proc)"
} else {
    # Only pre-load EECACHE when we don't have a valid EECACHE image
    # in PNOR by default
    $eccPreload = (lookup-file "%simics%/eecache_prebuilt.bin.ecc")
    # NOTE must change offset if PNOR layout changes EECACHE offsets
    echo "    - Loading prebuilt EECACHE "+$eccPreload+" at 0x2C000 in PNOR"
    ($hb_pnor).load-file $eccPreload 0x2C000
}


# Turn on all processor cec-chips
foreach $proc in (get-component-list -all proc_p10_pib) {
    foreach $cc in (get-object-list component=$proc type=cec-chip -recursive) {
        @SIM_get_interface(SIM_get_object(simenv.cc), "signal").signal_raise()
    }
}

###################################
#Enable the IPMI Responder
###################################
echo "Enable IPMI Responder"
try {
      run-python-file (lookup-file hbfw/ipmi_bt_responder.py)
} except { echo "ERROR: Failed to load IPMIresponder." }

###############################
#Initialize Explorer Registers
###############################

# Loop over all explorer chips
foreach $obj in (get-object-list ocmb -all){

    # Allow for testing MMIO HW failures
    # Forces write access to TRACE_TRDATA_CONFIG_0(0x08010403) to fail
    # in src/usr/mmio/test/mmiotest.H
    # NOTE: address is left shifted 3 and has MMIO
    #       offset (0x100000000) added.
    $obj->mmio_regs_mmioerr = 0x0000000140082018

}

# Enable the second processor
if( $enable_2proc == "1" ) {
    echo "**Enabling 2 processors"

    # Connect up the missing cfams
    connect backplane0.cnt_hfsi_link[1] backplane0.cnt_fsi_slave[0][1][1]

    # Set valid bit for Scratch Reg3/Reg6 in Scratch Reg8 bit 2/5
    (get-master-procs)[0].cfam_cmp.lbus_map.write 0x2800 + 0x3F*4 0x24000000 4 -b
    # Set bit24 for Scratch Reg6 - Master Proc
    (get-master-procs)[0].cfam_cmp.lbus_map.write 0x2800 + 0x3D*4 0x00000080 4 -b
}

# Force the localbus to default to the PIB side
foreach $fsis in (get-object-list -all fsi_slave_t3_v6) {
    $fsis->enforce_lbo = FALSE
}

# Force the C4 pin to indicate master chip
@conf.backplane0.dcm[0].chip[0].cfam_cmp.fsi2host_mbox.pib_regs_environment_status |= 0x0800000000000000

