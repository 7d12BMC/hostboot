# Note : Assumes these vars were setup in startup.simics
# $hb_masterproc : name of master proc chip object
##

$hb_pnor = ""
$hb_pnor = (get-master-pnors)[0]

#New Simics flow can simply get the string from get-master-pnor command
if ($hb_pnor == NIL) {
    try {
        @simenv.hb_pnor = quiet_run_command("get-master-pnor")[0]
        @SIM_get_object(simenv.hb_pnor[0])
    } except {
        # Default to Nimbus name
        foreach $pnor in (get-object-list -all BmcCmp) {
            $hb_pnor = ($pnor)
        }
        $hb_pnor = $hb_pnor+".sfc_master_mem"
    }
}
echo "Master PNOR is: "+$hb_pnor

$vpo_compile = "0"
@if 'VPO_COMPILE' in os.environ: simenv.vpo_compile = "1"

if($vpo_compile == "0") {
    # Only pre-load EECACHE in non-VPO mode; in VPO, a valid EECACHE image
    # is included in PNOR by default
    $eccPreload = (lookup-file "%simics%/eecache_prebuilt.bin.ecc")
    # NOTE must change offset if PNOR layout changes EECACHE offsets
    echo "    - Loading prebuilt EECACHE "+$eccPreload+" at 0x2C000 in PNOR"
    ($hb_pnor).load-file $eccPreload 0x2C000
}


# Turn on all processor cec-chips
foreach $proc in (get-component-list -all proc_pib) {
    foreach $cc in (get-object-list component=$proc type=cec-chip -recursive) {
        @SIM_get_interface(SIM_get_object(simenv.cc), "signal").signal_raise()
    }
}

###################################
#Enable the IPMI Responder
###################################
echo "Enable IPMI Responder"
try {
      run-python-file (lookup-file hbfw/ipmi_bt_responder.py)
} except { echo "ERROR: Failed to load IPMIresponder." }

###############################
#Initialize Explorer Registers
###############################

# Loop over all explorer chips
foreach $obj in (get-object-list ocmb -all){

    # Allow for testing MMIO HW failures
    # Forces write access to TRACE_TRDATA_CONFIG_0 to fail
    # in src/usr/mmio/test/mmiotest.H
    # NOTE: address is left shifted 3 and has MMIO
    #       offset (0x100000000) added.
    $obj->mmio_regs_mmioerr = 0x0000000140082018

}
