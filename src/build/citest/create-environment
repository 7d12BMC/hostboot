#!/bin/sh
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/build/citest/create-environment $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2014,2021
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

echo "Creating an ODE sandbox..."

export CMVC_FAMILY=aix@aix.austin.ibm.com@2035
if [ -z $LOCAL_CI_USER ]
then
    export CMVC_BECOME=hostboot
else
    export CMVC_BECOME=$LOCAL_CI_USER
fi
export CMVC_AUTH_METHOD=HOST

# Ensure backing build is accessible.
if [ ! -d "$BACKING_BUILD" ];
then
    echo "Cannot access the backing build: $BACKING_BUILD"
    exit -1
fi

# Delete existing sandbox if it exists.
if [ -d "$SANDBOXBASE" ];
then
    echo "----Removing old sandbox."
    mksb -undo -auto -rc $SANDBOXRC -dir $SANDBOXROOT -sb $SANDBOXNAME
    rm -rf $SANDBOXBASE
fi

# Create sandbox.
mksb -rc $SANDBOXRC -dir $SANDBOXROOT -back $BACKING_BUILD -sb $SANDBOXNAME \
      -m ppc -auto || exit -1

# workaround scripts expect $sb variable to be populated.
export sb=$SANDBOXBASE/src
export bb=$BACKING_BUILD
export bbsrc=$BACKING_BUILD/src

# Populate simics directories.

SIMICS_LEVEL=`cat ${PROJECT_ROOT}/src/build/citest/etc/simbuild`

if [[ ! -z "${VPO_COMPILE}" ]]; then
    # EECACHE to be used for VPO
    EECACHE_VPO_PREBUILT=`cat ${PROJECT_ROOT}/src/build/citest/etc/eecache_vpo_prebuilt`
else
    # EECACHE to be used for DD1 Standalone builds
    EECACHE_PREBUILT_DD1=`cat ${PROJECT_ROOT}/src/build/citest/etc/eecache_prebuilt`
    # EECACHE to be used for DD2 Standalone builds
    EECACHE_PREBUILT_DD2=`cat ${PROJECT_ROOT}/src/build/citest/etc/eecache_prebuilt_dd2`
fi

if [[ $SETUP_FOR_STANDALONE -eq 1 ]];then

    echo "----Setting up simics for standalone P10, non-FSP."

    if [[ ! -d ${STANDALONE} ]];then
        mkdir -p ${STANDALONE}
    fi

    if [[ ! -d ${STANDALONE_SIMICS} ]];then
        mkdir -p ${STANDALONE_SIMICS}
        mkdir -p ${STANDALONE_SIMICS}/hbfw
    fi

    echo tar -xf ${SIMICS_LEVEL} -C ${STANDALONE_SIMICS}
    tar -xf ${SIMICS_LEVEL} -C ${STANDALONE_SIMICS}
    echo "cd ${STANDALONE_SIMICS} && ./INSTALL.sh"
    cd ${STANDALONE_SIMICS} && ./INSTALL.sh


    if [[ ! -z "${VPO_COMPILE}" ]]; then
        # EECACHE to be used for VPO
        echo cp ${EECACHE_VPO_PREBUILT} ${STANDALONE_SIMICS}/eecache_vpo_prebuilt.bin.ecc
        cp ${EECACHE_VPO_PREBUILT} ${STANDALONE_SIMICS}/eecache_vpo_prebuilt.bin.ecc
    else
        # EECACHE to be used for DD1 Standalone builds
        echo cp ${EECACHE_PREBUILT_DD1} ${STANDALONE_SIMICS}/eecache_prebuilt.bin.ecc
        cp ${EECACHE_PREBUILT_DD1} ${STANDALONE_SIMICS}/eecache_prebuilt.bin.ecc
        # EECACHE to be used for DD2 Standalone builds
        echo cp ${EECACHE_PREBUILT_DD2} ${STANDALONE_SIMICS}/eecache_prebuilt_dd2.bin.ecc
        cp ${EECACHE_PREBUILT_DD2} ${STANDALONE_SIMICS}/eecache_prebuilt_dd2.bin.ecc
    fi

else

    # Run presimsetup workarounds.
    echo "----Running presimsetup workarounds."
    if [ -f ${CITESTPATH}/etc/workarounds.presimsetup ];
    then
        execute_in_sandbox "export BACKING_BUILD=\$bb && \
                            ${CITESTPATH}/etc/workarounds.presimsetup"  "ppc" \
                            || exit -1
    fi

    echo "----Setting up simics."
    if [ "$MACHINE" != "FSPBUILD" ];then
        echo "mkdir -p ${SANDBOXBASE}/simics"
        execute_in_sandbox "mkdir -p ${SANDBOXBASE}/simics" "ppc"
        echo "tar ${SIMICS_LEVEL}  -C ${SANDBOXBASE}/simics/"
        execute_in_sandbox "tar -xf ${SIMICS_LEVEL} -C ${SANDBOXBASE}/simics/" "ppc"
        echo "cd ${SANDBOXBASE}/simics/ && ./INSTALL.sh"
        execute_in_sandbox "cd ${SANDBOXBASE}/simics/ && ./INSTALL.sh" "ppc"
        echo "cp ${EECACHE_PREBUILT_DD1} ${SANDBOXBASE}/simics/eecache_prebuilt.bin.ecc"
        execute_in_sandbox "cp ${EECACHE_PREBUILT_DD1} ${SANDBOXBASE}/simics/eecache_prebuilt.bin.ecc" "ppc"
    else
        execute_in_sandbox "start_simics -no_start -machine $MACHINE -batch_mode" \
                          "ppc" || exit -1
    fi

    # Run postsimsetup workarounds.
    echo "----Running postsimsetup workarounds."
    if [ -f ${CITESTPATH}/etc/workarounds.postsimsetup ];
    then
        execute_in_sandbox "export BACKING_BUILD=\$bb && \
                           ${CITESTPATH}/etc/workarounds.postsimsetup"  "ppc" \
                       || exit -1
    fi

fi

