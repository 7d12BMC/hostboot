#!/usr/bin/perl
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/build/tools/editimgid $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2017,2022
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG
use strict;

use Getopt::Long;

my $imageIdSym = "hbi_ImageId";
my $imageFWIdLongSym = "hbi_FWId_long";
my $imageFWIdShortSym = "hbi_FWId_short";

# extendedImageIds indicates to process ALL imageIds (with Short and Long)
# Currrent exception is the Hostboot Bootloader image which will
# only have the imageId, not the Short and Long, since the SBE Update
# flow would trigger detection of changes on each driver level.
# SBE Update logic will ignore the Hostboot Bootloader hbi_ImageId
# data space to skip over the allocated area reserved for the hbi_ImageId.
my $extendedImageIds = 1;

my $img = "";
my $symsFile = "";

sub usage
{
    ## needs to files as inputs
    print   "Need 2 file names.   \nUsage:\n";
    print   "\teditimgid --binFile <path to image>/hostboot.bin --symsFile <path to syms file>/hhbicore.syms\n\n";
    exit    -1;
}


GetOptions('binFile=s' => \$img,
            'symsFile=s' => \$symsFile);

usage() unless $img and $symsFile;

#example from hbicore.syms:
# V,0002f008,00000000,00000000,hbi_ImageId
#   1. find the hbi_ImageId
#   2. chop off columns 1,2
#   3. now the address is in the first 8 columns, chop off the rest
my $addressStr = `grep hbi_ImageId $symsFile  | colrm 1 2 | colrm 9`;

# Exit 0 since this script gets called on ALL images, so some logic must be
# tolerant of images which do -NOT- expect these id's
if ($addressStr eq '' || $? )
{
    print "editimgid IMAGE=$img addressStr EMPTY! SKIP this IMAGE, looking for $imageIdSym from $symsFile\n";
    exit 0;
}
my $addressStrFWLong = `grep hbi_FWId_long $symsFile  | colrm 1 2 | colrm 9`;
if ($addressStrFWLong eq '' || $? )
{
    print "editimgid IMAGE=$img addressStrFWLong EMPTY! SKIP for $imageFWIdLongSym from $symsFile\n";
    $extendedImageIds = 0;
}
my $addressStrFWShort = `grep hbi_FWId_short $symsFile  | colrm 1 2 | colrm 9`;
if ($addressStrFWShort eq '' || $? )
{
    print "editimgid IMAGE=$img addressStrFWShort EMPTY! SKIP for $imageFWIdShortSym from $symsFile\n";
    $extendedImageIds = 0;
}

# If the symbols did -NOT- exist we have already bailed, so any errors from here
# forward are applicable to the images being processed

my $address = hex $addressStr;
my $addressFWLong = hex $addressStrFWLong;
# Short size limited by PEL length of 16
my $addressFWShort = hex $addressStrFWShort;

# SPECIAL NOTE: editimgid ONLY adds the .cfm tag to the images already built

# FIRST HANDLE IMAGE ID

my $exit_code;
#imageId is a 128 byte field, written null terminated
#string, extract all but the null terminator
my $max_value_length = 127;
print "editimgid working on $img with imageId $imageId";
my $imageId = `dd if=$img bs=1 skip=$address count=$max_value_length`;
if ($imageId eq '' || $?)
{
    print "editimgid error reading imageId tag from $img rc=$?\n";
    exit $?;
}

#remove any non printable chars from the data
$imageId =~ s/[^[:print:]]+//g;
$imageId = $imageId . "/" . "cfm";
# There is an exposure here that if the string is too long
# we may lose the cfm portion, but this is the best we can do.
if ( length($imageId) > $max_value_length)
{
   $imageId = substr($imageId, 0, $max_value_length);
}
my $count_image = length($imageId);

#make sure we can edit the file
my $mode = 0755;
chmod $mode, $img;
$exit_code = system("echo -n $imageId | dd of=$img conv=notrunc bs=1 seek=$address count=$count_image");
if ($exit_code != 0)
{
    print "editimgid PROBLEM with adding symbol=$imageIdSym to img=$img exit_code=$exit_code\n";
    exit $exit_code;
}

if ($extendedImageIds != 1)
{
    print "editimgid DONE working on symbol=$imageIdSym to img=$img ONLY had imageId, NO extendedImageIds\n";
    exit 0;
}
else
{
    print "editimgid DONE working on symbol=$imageIdSym to img=$img for imageId\n";
}

# NEXT HANDLE LONG FW VERSION

my $max_value_length_long = 127;
# short length determined by PEL limitation in subsys_version
my $max_value_length_short = 15;

print "editimgid working on $img with imageIdFWLong $imageIdFWLong";
my $imageIdFWLong = `dd if=$img bs=1 skip=$addressFWLong count=$max_value_length_long`;
if ($imageIdFWLong eq '' || $?)
{
    print "editimgid error reading imageIdFWLong tag from $img rc=$?\n";
    exit $?;
}

#remove any non printable chars from the data
$imageIdFWLong =~ s/[^[:print:]]+//g;

$imageIdFWLong = $imageIdFWLong . "/" . "cfm";
# There is an exposure here that if the string is too long
# we may lose the cfm portion, but this is the best we can do.
if ( length($imageIdFWLong) > $max_value_length_long)
{
    $imageIdFWLong = substr($imageIdFWLong, 0, $max_value_length_long);
}
my $count_FW_long = length($imageIdFWLong);
$exit_code = system("echo -n $imageIdFWLong | dd of=$img conv=notrunc bs=1 seek=$addressFWLong count=$count_FW_long");
if ($exit_code != 0)
{
    print "editimgid PROBLEM with adding symbol=$imageFWIdLongSym to img=$img exit_code=$exit_code\n";
    exit $exit_code;
}
print "editimgid DONE working on img=$img for imageIdFWLong\n";

# NEXT HANDLE SHORT FW VERSION

print "editimgid working on $img with imageIdFWShort $imageIdFWShort";
my $imageIdFWShort = `dd if=$img bs=1 skip=$addressFWShort count=$max_value_length_short`;
if ($imageIdFWShort eq '' || $?)
{
    print "editimgid error reading imageIdFWShort tag from $img rc=$?\n";
    exit $?;
}

#remove any non printable chars from the data
$imageIdFWShort =~ s/[^[:print:]]+//g;

$imageIdFWShort = $imageIdFWShort . "/" . "cfm";
# There is an exposure here that if the string is too long
# we may lose the cfm portion, but this is the best we can do.
if ( length($imageIdFWShort) > $max_value_length_short)
{
    $imageIdFWShort = substr($imageIdFWShort, 0, $max_value_length_short);
}
my $count_FW_short = length($imageIdFWShort);

$exit_code = system("echo -n $imageIdFWShort | dd of=$img conv=notrunc bs=1 seek=$addressFWShort count=$count_FW_short");
if ($exit_code != 0)
{
    print "editimgid PROBLEM with adding symbol=$imageFWIdShortSym to img=$img exit_code=$exit_code\n";
}
else
{
    print "editimgid DONE working on img=$img for imageIdFWShort\n";
}
exit $exit_code
