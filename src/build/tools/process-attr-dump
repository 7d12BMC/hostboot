#!/usr/bin/python

# This program takes as input all the files generated by extract_attr_info and
# produces a single file that contains all the collected attribute and target
# information.

import sys
import struct
from collections import defaultdict
import json

dumpfile = open(sys.argv[1], 'rb')

attr_types = json.load(open(sys.argv[2], 'r'))
attr_id_to_name = json.load(open(sys.argv[3], 'r'))
huid_to_children = json.load(open(sys.argv[4], 'r'))
enum_value_to_name = json.load(open(sys.argv[5], 'r'))

sizeof_uint32 = 4
sizeof_uint64 = 8

entry_size = sizeof_uint32*4 + sizeof_uint64

huid_to_attrs = defaultdict(lambda: {})

def write_to_string(s, value, offset):
  if len(s) < offset:
    s = s.ljust(offset, '\x00')

  return s[0:offset] + value + s[offset + len(value):]

while True:
  data = dumpfile.read(entry_size)

  if len(data) != entry_size:
    break

  huid, attr_id, attr_size, byte_offset, attr_bytes = \
    struct.unpack('>IIII8s', data)

  _, _, _, _, attr_raw = \
    struct.unpack('>IIIIQ', data)

  chunk_size = min(8, attr_size - byte_offset)

  huid_to_attrs[huid][attr_id] = write_to_string(huid_to_attrs[huid].get(attr_id, ''),
                                                 attr_bytes[0:chunk_size],
                                                 byte_offset)

  if str(huid) not in huid_to_children:
    print >>sys.stderr, "Got huid %d %d %d %d" % (huid, attr_id, attr_size, byte_offset)

output = { }

for huid, attrs in huid_to_attrs.items():
  output[huid] = { 'attributes': { }, 'children': huid_to_children[str(huid)] }

  for attr_id, attr_value in attrs.items():
    attr_name = attr_id_to_name.get(str(attr_id), 'ATTR_unknown')[5:]
    attr_type = attr_types.get(attr_name, 'unknown')
    attr_value_str = attr_value.encode('hex')
    pretty_attr_value = ''

    if type(attr_type) == list and attr_type[0] == 'enumeration':
      enum_name = attr_type[1]
      enum_val_name = enum_value_to_name[enum_name].get(str(int(attr_value_str, 16)),
                                                        'unknown')
      pretty_attr_value = 'enum %s = %s' % (enum_name, enum_val_name)

    output[huid]['attributes'][attr_name] = {
      'id': attr_id,
      'type': attr_type,
      'size': len(attr_value),
      'value': attr_value_str,
      'pretty-value': pretty_attr_value
    }

print(json.dumps(output, indent=2))
