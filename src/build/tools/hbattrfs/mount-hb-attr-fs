#!/bin/bash -e
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/build/tools/hbattrfs/mount-hb-attr-fs $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2019,2020
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

# Reads a Hostboot attribute dump file and mounts it on the given directory.

if [ ! "$PROJECT_ROOT" ] ; then
    echo "$0: PROJECT_ROOT is not set; please run from within a workon" >&2
    exit -1
fi

USAGE_STRING=\
"Usage: $0 DUMP_FILE MOUNT_DIR
       $0 --help|-h"

if [ "$1" = --help ] || [ "$1" = -h ] ; then
    echo "\
$0 - Mount virtual Hostboot attribute fileystem
$USAGE_STRING
  DUMP_FILE: HB attribute dump file (generated by Simics hb-HostAttrDump command or similar).
  MOUNT_DIR: The directory to mount the virtual filesystem to."
    exit
fi

if [ $# -lt 2 ] ; then
    echo "$USAGE_STRING" >&2
    exit -1
fi

function joinall ()
{
    for pid in "$@" ; do
        wait $pid

        if [ $? -ne 0 ] ; then
            exit 1
        fi
    done
}

ATTR_DUMP_FILE=$(readlink -f "$1")
MOUNTDIR=$(readlink -f "$2")

PATH="$PATH:$PROJECT_ROOT/src/build/tools/"

if [ ! -d "$MOUNTDIR" ] ; then
    echo "$0: $MOUNTDIR doesn't exist"
    exit 1
fi

cd "$PROJECT_ROOT"

# These XML files each contain attribute data. They must have the same format as
# attribute_types.xml.
XML_FILES="src/usr/targeting/common/xmltohb/attribute_types.xml \
           src/usr/targeting/common/xmltohb/attribute_types_hb.xml"

# Array to hold child process PIDs
CHILDPIDS=()

# Generate a map of attribute names to attribute IDs.
generate-attribute-id-map <obj/genfiles/attributeenums.H \
                          >obj/genfiles/attribute-id-map.json &
CHILDPIDS+=($!)

extract_attr_info ()
{
    OPERATION=$1

    # The <a> tags don't really matter in this command, they're just used to
    # give the XML file resulting from the concatenation of other XML files a
    # single root element.
    extract-attribute-info $OPERATION \
                           ./src/usr/targeting/common/xmltohb/target_types.xml \
                           <(cat <(echo "<a>") $XML_FILES <(echo "</a>")) \
                           ./src/usr/targeting/common/xmltohb/simics_P10.system.xml
}

extract_attr_info child_huids >obj/genfiles/child_huids.json &
CHILDPIDS+=($!)
extract_attr_info attribute_types >obj/genfiles/attr_types.json &
CHILDPIDS+=($!)
extract_attr_info hierarchy >obj/genfiles/target_hierarchy.json &
CHILDPIDS+=($!)
extract_attr_info enums >obj/genfiles/enum_attrs.json &
CHILDPIDS+=($!)

joinall ${CHILDPIDS[*]}

process-attr-dump "$ATTR_DUMP_FILE" \
                  obj/genfiles/attr_types.json \
                  obj/genfiles/attribute-id-map.json \
                  obj/genfiles/child_huids.json \
                  obj/genfiles/enum_attrs.json \
                  >obj/genfiles/attribute_dump_full.json

echo "Mounting filesystem at $MOUNTDIR; press Ctrl-\ to exit."

src/build/tools/hbattrfs/mountfs.py obj/genfiles/attribute_dump_full.json \
                                    obj/genfiles/target_hierarchy.json \
                                    "$MOUNTDIR" -f -o auto_unmount
