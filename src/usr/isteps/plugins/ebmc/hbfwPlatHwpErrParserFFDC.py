# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/isteps/plugins/ebmc/hbfwPlatHwpErrParserFFDC.py $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2020,2021
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG
# hbfwPlatHwpErrParserFFDC.py
# This file is generated by perl script platCreateHwpErrParser.pl

import json
from udparsers.helpers.errludP_Helpers import memConcat, hexDump, intConcat

def hbfwParseHwpFfdc(ver, data):
    CFAM_DATA_LEN = 4;
    SCOM_DATA_LEN = 8;
    POS_LEN = 4;

    d = dict()
    i = 0

    # The first 4 bytes is the FFDC ID
    ffdcId, i=intConcat(data, i, i+4)

    if ffdcId == 0x5de29c8e:
        d["HwpReturnCode"]="RC_MSS_BAD_MR_PARAMETER"
        d["FFDC"]="MR_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4619757d:
        d["HwpReturnCode"]="RC_MSS_BAD_MR_PARAMETER"
        d["FFDC"]="PARAMETER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbab95882:
        d["HwpReturnCode"]="RC_MSS_BAD_MR_PARAMETER"
        d["FFDC"]="PARAMETER_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x52f59f77:
        d["HwpReturnCode"]="RC_MSS_DIVIDE_BY_ZERO"
        d["FFDC"]="DIVISOR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2b0a349c:
        d["HwpReturnCode"]="RC_MSS_DIVIDE_BY_ZERO"
        d["FFDC"]="DIVIDEND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4008b10b:
        d["HwpReturnCode"]="RC_MSS_EMPTY_VECTOR"
        d["FFDC"]="RECEIVED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x42d5167a:
        d["HwpReturnCode"]="RC_MSS_EMPTY_VECTOR"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe9252375:
        d["HwpReturnCode"]="RC_MSS_EMPTY_PDA_VECTOR"
        d["FFDC"]="PROCEDURE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x36fb929a:
        d["HwpReturnCode"]="RC_MSS_FAILED_SPD_REVISION_FALLBACK"
        d["FFDC"]="FAILED_REVISION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf0b16f2d:
        d["HwpReturnCode"]="RC_MSS_FAILED_SPD_REVISION_FALLBACK"
        d["FFDC"]="FUNCTION_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2ed15cda:
        d["HwpReturnCode"]="RC_MSS_FAILED_TO_FIND_TRFC"
        d["FFDC"]="SDRAM_DENSITY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x75a4f3d7:
        d["HwpReturnCode"]="RC_MSS_FAILED_TO_FIND_TRFC"
        d["FFDC"]="REFRESH_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x54e8e349:
        d["HwpReturnCode"]="RC_MSS_FREQ_CL_EXCEEDS_TAA_MAX"
        d["FFDC"]="CAS_LATENCY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2dbe3c5e:
        d["HwpReturnCode"]="RC_MSS_FREQ_CL_EXCEEDS_TAA_MAX"
        d["FFDC"]="TCK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5b95596a:
        d["HwpReturnCode"]="RC_MSS_FREQ_CL_EXCEEDS_TAA_MAX"
        d["FFDC"]="TAA_MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9a0a98f0:
        d["HwpReturnCode"]="RC_MSS_FREQ_CL_EXCEEDS_TAA_MAX"
        d["FFDC"]="COMPARE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbf3617bf:
        d["HwpReturnCode"]="RC_MSS_FREQ_CL_EXCEEDS_TAA_MAX"
        d["FFDC"]="IS_3DS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x074c3a0d:
        d["HwpReturnCode"]="RC_MSS_FREQ_CL_EXCEEDS_TAA_MAX"
        d["FFDC"]="MC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf0798f39:
        d["HwpReturnCode"]="RC_MSS_FREQ_FAILED_TO_FIND_SUPPORTED_CL"
        d["FFDC"]="DESIRED_CAS_LATENCY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7bed7d6e:
        d["HwpReturnCode"]="RC_MSS_FREQ_FAILED_TO_FIND_SUPPORTED_CL"
        d["FFDC"]="COMMON_CLS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x57a03caf:
        d["HwpReturnCode"]="RC_MSS_FREQ_FAILED_TO_FIND_SUPPORTED_CL"
        d["FFDC"]="TAA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xee6bd440:
        d["HwpReturnCode"]="RC_MSS_FREQ_FAILED_TO_FIND_SUPPORTED_CL"
        d["FFDC"]="TCK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd0423509:
        d["HwpReturnCode"]="RC_MSS_FREQ_FAILED_TO_FIND_SUPPORTED_CL"
        d["FFDC"]="MC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x55274758:
        d["HwpReturnCode"]="RC_MSS_FREQ_INDEX_TOO_LARGE"
        d["FFDC"]="INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x99ed506b:
        d["HwpReturnCode"]="RC_MSS_FREQ_INDEX_TOO_LARGE"
        d["FFDC"]="NUM_MAX_FREQS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb4b280d7:
        d["HwpReturnCode"]="RC_MSS_FREQ_INVALID_CALCULATED_TCK"
        d["FFDC"]="TAAMIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x85bad602:
        d["HwpReturnCode"]="RC_MSS_FREQ_INVALID_CALCULATED_TCK"
        d["FFDC"]="PROPOSED_TCK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x193a747e:
        d["HwpReturnCode"]="RC_MSS_FREQ_INVALID_CALCULATED_TCK"
        d["FFDC"]="IS_3DS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7a35aa1c:
        d["HwpReturnCode"]="RC_MSS_FREQ_INVALID_CALCULATED_TCK"
        d["FFDC"]="MC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb663def2:
        d["HwpReturnCode"]="RC_MSS_INVALID_RTT_WR_ENCODING"
        d["FFDC"]="RTT_WR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcc3405e1:
        d["HwpReturnCode"]="RC_MSS_INVALID_RTT_WR_ENCODING"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf834b06b:
        d["HwpReturnCode"]="RC_MSS_FREQ_NO_COMMON_SUPPORTED_CL"
        d["FFDC"]="MC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x586431b6:
        d["HwpReturnCode"]="RC_MSS_FREQ_NO_COMMON_SUPPORTED_CL"
        d["FFDC"]="CL_SUPPORTED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x96aa3bf7:
        d["HwpReturnCode"]="RC_MSS_FREQ_SELECTED_FREQ_NOT_SUPPORTED"
        d["FFDC"]="SUPPORTED_FREQ_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x53688a0d:
        d["HwpReturnCode"]="RC_MSS_FREQ_SELECTED_FREQ_NOT_SUPPORTED"
        d["FFDC"]="SUPPORTED_FREQ_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x54e34acc:
        d["HwpReturnCode"]="RC_MSS_FREQ_SELECTED_FREQ_NOT_SUPPORTED"
        d["FFDC"]="SUPPORTED_FREQ_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7f95ed3a:
        d["HwpReturnCode"]="RC_MSS_FREQ_SELECTED_FREQ_NOT_SUPPORTED"
        d["FFDC"]="SUPPORTED_FREQ_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc65f1179:
        d["HwpReturnCode"]="RC_MSS_FREQ_SELECTED_FREQ_NOT_SUPPORTED"
        d["FFDC"]="FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x67069a76:
        d["HwpReturnCode"]="RC_MSS_FREQ_SELECTED_FREQ_NOT_SUPPORTED"
        d["FFDC"]="MC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2cfb12c8:
        d["HwpReturnCode"]="RC_MSS_INVALID_CAST_CALC_NCK"
        d["FFDC"]="TIMING_PS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xed71f454:
        d["HwpReturnCode"]="RC_MSS_INVALID_CAST_CALC_NCK"
        d["FFDC"]="NCK_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf0d165cf:
        d["HwpReturnCode"]="RC_MSS_INVALID_CAST_CALC_NCK"
        d["FFDC"]="CORRECTION_FACTOR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa4b24472:
        d["HwpReturnCode"]="RC_MSS_INVALID_CLOCK_PERIOD"
        d["FFDC"]="CLOCK_PERIOD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x69f0fe10:
        d["HwpReturnCode"]="RC_MSS_INVALID_DB_MDQ_DRIVE_STRENGTH"
        d["FFDC"]="DATA_RATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xef6282e9:
        d["HwpReturnCode"]="RC_MSS_INVALID_DIMM_SPEED"
        d["FFDC"]="DIMM_SPEED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xabeddb16:
        d["HwpReturnCode"]="RC_MSS_INVALID_DIMM_TYPE"
        d["FFDC"]="DIMM_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x738d25d0:
        d["HwpReturnCode"]="RC_MSS_INVALID_DIMM_TYPE"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5a2b380d:
        d["HwpReturnCode"]="RC_MSS_INVALID_DRAM_GEN"
        d["FFDC"]="DRAM_GEN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1ec3e98e:
        d["HwpReturnCode"]="RC_MSS_INVALID_DRAM_GEN"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x49c57fbc:
        d["HwpReturnCode"]="RC_MSS_INVALID_FREQ_PASSED_IN"
        d["FFDC"]="FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x87a2147c:
        d["HwpReturnCode"]="RC_MSS_INVALID_FREQ_PASSED_IN"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x077faba3:
        d["HwpReturnCode"]="RC_MSS_INVALID_FREQ_PASSED_IN"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xea5491f3:
        d["HwpReturnCode"]="RC_MSS_INVALID_FREQUENCY"
        d["FFDC"]="FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa46ea623:
        d["HwpReturnCode"]="RC_MSS_INVALID_FREQ_LIST_PASSED"
        d["FFDC"]="SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x79bc317c:
        d["HwpReturnCode"]="RC_MSS_INVALID_FREQ_LIST_PASSED"
        d["FFDC"]="EXPECTED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xeb2fe69c:
        d["HwpReturnCode"]="RC_MSS_INVALID_FINE_REFRESH_MODE"
        d["FFDC"]="FINE_REF_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4fa608f1:
        d["HwpReturnCode"]="RC_MSS_INVALID_HYBRID_MODULE"
        d["FFDC"]="HYBRID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8936b4c1:
        d["HwpReturnCode"]="RC_MSS_INVALID_HYBRID_MODULE"
        d["FFDC"]="HYBRID_MEDIA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9bd83e72:
        d["HwpReturnCode"]="RC_MSS_INVALID_HYBRID_MODULE"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x995fdbc0:
        d["HwpReturnCode"]="RC_MSS_INVALID_PORT_INDEX_PASSED"
        d["FFDC"]="INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1d816374:
        d["HwpReturnCode"]="RC_MSS_INVALID_PORT_INDEX_PASSED"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x96245f34:
        d["HwpReturnCode"]="RC_MSS_INVALID_RANK"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x70dea4c0:
        d["HwpReturnCode"]="RC_MSS_INVALID_RANK"
        d["FFDC"]="RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8bc19ad4:
        d["HwpReturnCode"]="RC_MSS_INVALID_RANK"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1734b62c:
        d["HwpReturnCode"]="RC_MSS_INVALID_REFRESH_RATE_REQUEST"
        d["FFDC"]="REFRESH_RATE_REQUEST"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa59ca844:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_PARAMETER_RECEIVED"
        d["FFDC"]="SPD_PARAM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf5a9ba83:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_PARAMETER_RECEIVED"
        d["FFDC"]="FUNCTION_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x97ac9dc7:
        d["HwpReturnCode"]="RC_MSS_INVALID_DIMM_MODULE_RECEIVED_FOR_SPD_REV_FALLBACK"
        d["FFDC"]="DIMM_MODULE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x54a61fb8:
        d["HwpReturnCode"]="RC_MSS_INVALID_DIMM_MODULE_RECEIVED_FOR_SPD_REV_FALLBACK"
        d["FFDC"]="SPD_REV"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0f97741d:
        d["HwpReturnCode"]="RC_MSS_INVALID_DIMM_MODULE_RECEIVED_FOR_SPD_REV_FALLBACK"
        d["FFDC"]="DRAM_GEN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x21dd9304:
        d["HwpReturnCode"]="RC_MSS_INVALID_DIMM_MODULE_RECEIVED_FOR_SPD_REV_FALLBACK"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x220f4656:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_RANK"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x92c83d3d:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_RANK"
        d["FFDC"]="RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd9541004:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_RANK"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9d8a9738:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_RESERVED_BITS"
        d["FFDC"]="FUNCTION_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5a6f7bef:
        d["HwpReturnCode"]="RC_MSS_INVALID_TIMING_VALUE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x10f383a2:
        d["HwpReturnCode"]="RC_MSS_INVALID_TIMING_VALUE"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb7ce5c63:
        d["HwpReturnCode"]="RC_MSS_INVALID_VPD_FREQ_LIST_PASSED"
        d["FFDC"]="SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfc22a1b4:
        d["HwpReturnCode"]="RC_MSS_INVALID_VPD_FREQ_LIST_PASSED"
        d["FFDC"]="EXPECTED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbdf99c9f:
        d["HwpReturnCode"]="RC_MSS_INVALID_VPD_KEYWORD_MAX"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xeabcf2b4:
        d["HwpReturnCode"]="RC_MSS_INVALID_VPD_KEYWORD_MAX"
        d["FFDC"]="ACTUAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd58fae5d:
        d["HwpReturnCode"]="RC_MSS_INVALID_VPD_KEYWORD_MAX"
        d["FFDC"]="KEYWORD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x955932e3:
        d["HwpReturnCode"]="RC_MSS_LOOKUP_FAILED"
        d["FFDC"]="KEY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2d6a997e:
        d["HwpReturnCode"]="RC_MSS_LOOKUP_FAILED"
        d["FFDC"]="DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x29a45121:
        d["HwpReturnCode"]="RC_MSS_LOOKUP_FAILED"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4a587fc5:
        d["HwpReturnCode"]="RC_MSS_MEMDIAGS_NO_MCBIST_SUBTESTS"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xad7f500b:
        d["HwpReturnCode"]="RC_MSS_MCBIST_EXCEEDED_MAX_SUBTESTS"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x59362466:
        d["HwpReturnCode"]="RC_MSS_MCBIST_EXCEEDED_MAX_SUBTESTS"
        d["FFDC"]="NUMBER_OF_SUBTESTS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1ca143f7:
        d["HwpReturnCode"]="RC_MSS_MCBIST_INCORRECT_PATTERN_LENGTH"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb96dfd43:
        d["HwpReturnCode"]="RC_MSS_MCBIST_INCORRECT_PATTERN_LENGTH"
        d["FFDC"]="ACTUAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0c0b444e:
        d["HwpReturnCode"]="RC_MSS_MCBIST_INCORRECT_PATTERN_LENGTH"
        d["FFDC"]="EXPECTED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3d45639f:
        d["HwpReturnCode"]="RC_MSS_PDA_DRAM_OUT_OF_RANGE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8d8898bc:
        d["HwpReturnCode"]="RC_MSS_PDA_DRAM_OUT_OF_RANGE"
        d["FFDC"]="DRAM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x321c4eeb:
        d["HwpReturnCode"]="RC_MSS_PDA_DRAM_OUT_OF_RANGE"
        d["FFDC"]="MAX_DRAM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x905af00b:
        d["HwpReturnCode"]="RC_MSS_VOLT_WRONG_NUMBER_OF_VOLTAGES"
        d["FFDC"]="VOLT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x04911098:
        d["HwpReturnCode"]="RC_MSS_VOLT_WRONG_NUMBER_OF_VOLTAGES"
        d["FFDC"]="SUPPLIED_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xebab300a:
        d["HwpReturnCode"]="RC_MSS_VOLT_WRONG_NUMBER_OF_VOLTAGES"
        d["FFDC"]="EXPECTED_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x021d6abd:
        d["HwpReturnCode"]="RC_MSS_VOLT_DDR_TYPE_REQUIRED_VOLTAGE"
        d["FFDC"]="EXPECTED_OPERABLE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x398aa0bf:
        d["HwpReturnCode"]="RC_MSS_VOLT_DDR_TYPE_REQUIRED_VOLTAGE"
        d["FFDC"]="EXPECTED_ENDURANT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf18f378d:
        d["HwpReturnCode"]="RC_MSS_VOLT_DDR_TYPE_REQUIRED_VOLTAGE"
        d["FFDC"]="ACTUAL_OPERABLE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc499e64a:
        d["HwpReturnCode"]="RC_MSS_VOLT_DDR_TYPE_REQUIRED_VOLTAGE"
        d["FFDC"]="ACTUAL_ENDURANT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2942098e:
        d["HwpReturnCode"]="RC_MSS_PORT_DOES_NOT_SUPPORT_MAJORITY_FREQ"
        d["FFDC"]="FREQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd9349dda:
        d["HwpReturnCode"]="RC_MSS_PORT_DOES_NOT_SUPPORT_MAJORITY_FREQ"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x25263566:
        d["HwpReturnCode"]="RC_MSS_PORT_DOES_NOT_SUPPORT_MAJORITY_FREQ"
        d["FFDC"]="FREQUENCY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9b8d0893:
        d["HwpReturnCode"]="RC_MSS_UNEXPECTED_VALUE_SEEN"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x52672f2d:
        d["HwpReturnCode"]="RC_MSS_UNEXPECTED_VALUE_SEEN"
        d["FFDC"]="EXPECTED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf39f03e4:
        d["HwpReturnCode"]="RC_MSS_UNEXPECTED_VALUE_SEEN"
        d["FFDC"]="ACTUAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa890a543:
        d["HwpReturnCode"]="RC_MSS_UNEXPECTED_VALUE_SEEN"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf06619ba:
        d["HwpReturnCode"]="RC_MSS_OUT_OF_BOUNDS_INDEXING"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe40298c6:
        d["HwpReturnCode"]="RC_MSS_OUT_OF_BOUNDS_INDEXING"
        d["FFDC"]="INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe603f3dd:
        d["HwpReturnCode"]="RC_MSS_OUT_OF_BOUNDS_INDEXING"
        d["FFDC"]="LIST_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc21af44f:
        d["HwpReturnCode"]="RC_MSS_OUT_OF_BOUNDS_INDEXING"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x31d3ba17:
        d["HwpReturnCode"]="RC_MSS_CONVERSION_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3b13a884:
        d["HwpReturnCode"]="RC_MSS_CONVERSION_ERROR"
        d["FFDC"]="ORIGINAL_VAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb220e1dc:
        d["HwpReturnCode"]="RC_MSS_CONVERSION_ERROR"
        d["FFDC"]="CONVERTED_VAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7c7ab9fd:
        d["HwpReturnCode"]="RC_MSS_CONVERSION_ERROR"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x03a9a28d:
        d["HwpReturnCode"]="RC_MSS_FAILED_DATA_INTEGRITY_CHECK"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcb1f214d:
        d["HwpReturnCode"]="RC_MSS_FAILED_DATA_INTEGRITY_CHECK"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa72a6a72:
        d["HwpReturnCode"]="RC_MSS_FAILED_DATA_INTEGRITY_CHECK"
        d["FFDC"]="BYTE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x884e1ddc:
        d["HwpReturnCode"]="RC_MSS_FAILED_DATA_INTEGRITY_CHECK"
        d["FFDC"]="FFDC_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4e97486b:
        d["HwpReturnCode"]="RC_MSS_ZERO_FREQ_OR_SIZE"
        d["FFDC"]="FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x44dc4cd7:
        d["HwpReturnCode"]="RC_MSS_ZERO_FREQ_OR_SIZE"
        d["FFDC"]="SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3d2d2109:
        d["HwpReturnCode"]="RC_MSS_MEMDIAGS_INVALID_PATTERN_INDEX"
        d["FFDC"]="INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x32a77147:
        d["HwpReturnCode"]="RC_MSS_MEMDIAGS_INVALID_PATTERN_INDEX"
        d["FFDC"]="MC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4f31f04c:
        d["HwpReturnCode"]="RC_MSS_MCBIST_PROGRAM_TOO_BIG"
        d["FFDC"]="PROGRAM_LENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6479e83c:
        d["HwpReturnCode"]="RC_MSS_MCBIST_PROGRAM_TOO_BIG"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x952cf16f:
        d["HwpReturnCode"]="RC_MSS_MCBIST_PROGRAM_TOO_BIG"
        d["FFDC"]="MC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbe60ef50:
        d["HwpReturnCode"]="RC_MSS_MCBIST_INVALID_ADDRESS_PAIR_INDEX"
        d["FFDC"]="INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd0b554a9:
        d["HwpReturnCode"]="RC_MSS_MCBIST_INVALID_ADDRESS_PAIR_INDEX"
        d["FFDC"]="MC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2199ae72:
        d["HwpReturnCode"]="RC_MSS_MCBIST_INVALID_ADDRESS_PAIR_INDEX"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x72436fd0:
        d["HwpReturnCode"]="RC_MSS_NO_DATABUS_UTILIZATION"
        d["FFDC"]="PORT_DATABUS_UTIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x374e05ad:
        d["HwpReturnCode"]="RC_MSS_NO_DATABUS_UTILIZATION"
        d["FFDC"]="DIMM_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdb58e9c7:
        d["HwpReturnCode"]="RC_MSS_CALC_POWER_CURVE_DIVIDE_BY_ZERO"
        d["FFDC"]="PORT_DATABUS_UTIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x80fb7f63:
        d["HwpReturnCode"]="RC_MSS_CALC_POWER_CURVE_DIVIDE_BY_ZERO"
        d["FFDC"]="UTIL_CONVERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x23a5c214:
        d["HwpReturnCode"]="RC_MSS_CALC_POWER_CURVE_DIVIDE_BY_ZERO"
        d["FFDC"]="IDLE_UTIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x458dc616:
        d["HwpReturnCode"]="RC_MSS_CALC_POWER_CURVE_DIVIDE_BY_ZERO"
        d["FFDC"]="RESULT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbb37990d:
        d["HwpReturnCode"]="RC_MSS_CALC_POWER_CURVE_NEGATIVE_OR_ZERO_SLOPE"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xba7e183b:
        d["HwpReturnCode"]="RC_MSS_CALC_POWER_CURVE_NEGATIVE_OR_ZERO_SLOPE"
        d["FFDC"]="PORT_IDLE_POWER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb52c0cd8:
        d["HwpReturnCode"]="RC_MSS_CALC_POWER_CURVE_NEGATIVE_OR_ZERO_SLOPE"
        d["FFDC"]="PORT_MAX_UTIL_POWER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8458d725:
        d["HwpReturnCode"]="RC_MSS_CALC_POWER_CURVE_NEGATIVE_OR_ZERO_SLOPE"
        d["FFDC"]="RESULT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x65f0dc13:
        d["HwpReturnCode"]="RC_MSS_NO_PORT_POWER_LIMIT"
        d["FFDC"]="COUNT_DIMMS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa9af7c9b:
        d["HwpReturnCode"]="RC_MSS_NO_PORT_POWER_LIMIT"
        d["FFDC"]="PORT_POWER_LIMIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x80337c72:
        d["HwpReturnCode"]="RC_MSS_NO_PORT_POWER"
        d["FFDC"]="COUNT_DIMMS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7f48fdc5:
        d["HwpReturnCode"]="RC_MSS_NO_PORT_POWER"
        d["FFDC"]="MAX_UTILIZATION_DIMM_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7993fe0f:
        d["HwpReturnCode"]="RC_MSS_NO_PORT_POWER"
        d["FFDC"]="MAX_UTILIZATION_DIMM_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4618b567:
        d["HwpReturnCode"]="RC_MSS_MAX_FREQ_ATTR_SIZE_CHANGED"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x88f6c1f1:
        d["HwpReturnCode"]="RC_MSS_MAX_FREQ_ATTR_SIZE_CHANGED"
        d["FFDC"]="SUPPOSED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x63e399b8:
        d["HwpReturnCode"]="RC_MSS_MAX_FREQ_ATTR_SIZE_CHANGED"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2319bf7f:
        d["HwpReturnCode"]="RC_MSS_CALC_PORT_POWER_EXCEEDS_MAX"
        d["FFDC"]="CALCULATED_PORT_POWER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3ebb93f0:
        d["HwpReturnCode"]="RC_MSS_CALC_PORT_POWER_EXCEEDS_MAX"
        d["FFDC"]="MAX_POWER_ALLOWED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x58747dfb:
        d["HwpReturnCode"]="RC_MSS_CALC_PORT_POWER_EXCEEDS_MAX"
        d["FFDC"]="PORT_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xea4d9a33:
        d["HwpReturnCode"]="RC_MSS_SPD_REV_ENCODING_LEVEL_NOT_SUPPORTED"
        d["FFDC"]="ENCODING_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x28e58471:
        d["HwpReturnCode"]="RC_MSS_SPD_TIMING_FAIL"
        d["FFDC"]="FAILED_REVISION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc73518ba:
        d["HwpReturnCode"]="RC_MSS_SPD_TIMING_FAIL"
        d["FFDC"]="FUNCTION_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd82d0e81:
        d["HwpReturnCode"]="RC_MSS_TOO_MANY_DIMMS_ON_PORT"
        d["FFDC"]="DIMM_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x341996c7:
        d["HwpReturnCode"]="RC_MSS_SLOT_UTIL_EXCEEDS_PORT"
        d["FFDC"]="SLOT_UTIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5529ede2:
        d["HwpReturnCode"]="RC_MSS_SLOT_UTIL_EXCEEDS_PORT"
        d["FFDC"]="PORT_UTIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf3042264:
        d["HwpReturnCode"]="RC_MSS_OUTPUT_OVERFLOW_CALC_UTIL"
        d["FFDC"]="RESULT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xecbc29ef:
        d["HwpReturnCode"]="RC_MSS_POWER_THERMAL_DECODE_ERROR"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x99e5bb66:
        d["HwpReturnCode"]="RC_MSS_POWER_THERMAL_DECODE_ERROR"
        d["FFDC"]="ATTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0a013379:
        d["HwpReturnCode"]="RC_MSS_MRW_SAFEMODE_UTIL_THROTTLE_NOT_SUPPORTED"
        d["FFDC"]="MRW_SAFEMODE_UTIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xafe297d5:
        d["HwpReturnCode"]="RC_MSS_MRW_SAFEMODE_UTIL_THROTTLE_NOT_SUPPORTED"
        d["FFDC"]="MIN_UTIL_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x629ba398:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="GENERATED_KEY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x566d0752:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x22f9aba9:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x183aa960:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5aaf7a12:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="DRAM_GEN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5f86e293:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="DIMM_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x933113cc:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="DRAM_WIDTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x69f51089:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="DRAM_DENSITY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb029372b:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="STACK_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7bd2f6bb:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="MFGID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x079dfd8a:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="MODULE_HEIGHT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc616efb3:
        d["HwpReturnCode"]="RC_MSS_POWER_THERMAL_ENCODE_ERROR"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x22b3e255:
        d["HwpReturnCode"]="RC_MSS_POWER_THERMAL_ENCODE_ERROR"
        d["FFDC"]="ATTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe4ec43ae:
        d["HwpReturnCode"]="RC_MSS_POWER_THERMAL_ATTR_VECTORS_INCORRECT"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3553a6ab:
        d["HwpReturnCode"]="RC_MSS_POWER_THERMAL_ATTR_VECTORS_INCORRECT"
        d["FFDC"]="INPUT_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd2a71647:
        d["HwpReturnCode"]="RC_MSS_POWER_THERMAL_ATTR_VECTORS_INCORRECT"
        d["FFDC"]="EXPECTED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x88bbffda:
        d["HwpReturnCode"]="RC_MSS_POWER_THERMAL_DIMM_INDEX_OUT_OF_BOUND"
        d["FFDC"]="INPUT_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x678129e3:
        d["HwpReturnCode"]="RC_MSS_POWER_THERMAL_DIMM_INDEX_OUT_OF_BOUND"
        d["FFDC"]="MAX_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfe1994ed:
        d["HwpReturnCode"]="RC_MSS_UNSUPPORTED_MRW_POWER_CONTROL_REQUESTED"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc3569a24:
        d["HwpReturnCode"]="RC_MSS_TOO_MANY_PRIMARY_RANKS_ON_DIMM"
        d["FFDC"]="RANK_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2e4ad0e9:
        d["HwpReturnCode"]="RC_MSS_RANK_OUT_OF_RANGE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe4e0c3ec:
        d["HwpReturnCode"]="RC_MSS_RANK_OUT_OF_RANGE"
        d["FFDC"]="RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8f19ee5b:
        d["HwpReturnCode"]="RC_MSS_INVALID_GALOIS_TO_SYMBOL"
        d["FFDC"]="GALOIS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x46f2f957:
        d["HwpReturnCode"]="RC_MSS_INVALID_SYMBOL_FOR_GALOIS"
        d["FFDC"]="SYMBOL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbee71a57:
        d["HwpReturnCode"]="RC_MSS_INVALID_DQ_TO_SYMBOL"
        d["FFDC"]="DQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x239aa1e8:
        d["HwpReturnCode"]="RC_MSS_INVALID_SYMBOL_TO_DQ"
        d["FFDC"]="SYMBOL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x571a246a:
        d["HwpReturnCode"]="RC_MSS_INVALID_RANK_PASSED"
        d["FFDC"]="RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2f61ba68:
        d["HwpReturnCode"]="RC_MSS_INVALID_RANK_PASSED"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2644db59:
        d["HwpReturnCode"]="RC_MSS_INVALID_RANK_PASSED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbb811bee:
        d["HwpReturnCode"]="RC_MSS_INVALID_INDEX_PASSED"
        d["FFDC"]="INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfe92de23:
        d["HwpReturnCode"]="RC_MSS_INVALID_INDEX_PASSED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9092a771:
        d["HwpReturnCode"]="RC_MSS_INVALID_INDEX_PASSED"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x63b6721b:
        d["HwpReturnCode"]="RC_MSS_INVALID_DRAM_WIDTH"
        d["FFDC"]="DRAM_WIDTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd6211c0f:
        d["HwpReturnCode"]="RC_MSS_INVALID_PAGE_SIZE"
        d["FFDC"]="DRAM_WIDTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf330db90:
        d["HwpReturnCode"]="RC_MSS_INVALID_OMI_POSITION"
        d["FFDC"]="POSITION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7c8855c1:
        d["HwpReturnCode"]="RC_MSS_INVALID_OMI_POSITION"
        d["FFDC"]="OMI_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7f7d2d78:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_SINGLE_DDIMM_IN_WRONG_SLOT"
        d["FFDC"]="SLOT_POSITION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf97bfcfd:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_SINGLE_DDIMM_IN_WRONG_SLOT"
        d["FFDC"]="CHANNEL_A_SLOT_POSITION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x82837099:
        d["HwpReturnCode"]="RC_MSS_MIN_UTILIZATION_ERROR"
        d["FFDC"]="INPUT_UTIL_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2fd4a2eb:
        d["HwpReturnCode"]="RC_MSS_MIN_UTILIZATION_ERROR"
        d["FFDC"]="MIN_UTIL_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x796b5484:
        d["HwpReturnCode"]="RC_MSS_UNKNOWN_DIMM_SPD_KEY"
        d["FFDC"]="MODULE_MFG_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x43e33dc1:
        d["HwpReturnCode"]="RC_MSS_UNKNOWN_DIMM_SPD_KEY"
        d["FFDC"]="DIMM_HEIGHT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb0e67891:
        d["HwpReturnCode"]="RC_MSS_UNKNOWN_DIMM_SPD_KEY"
        d["FFDC"]="DIMM_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd825cc74:
        d["HwpReturnCode"]="RC_MSS_UNSUPPORTED_SPD_REVISION"
        d["FFDC"]="SPD_REVISION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3ee92de6:
        d["HwpReturnCode"]="RC_MSS_UNSUPPORTED_SPD_REVISION"
        d["FFDC"]="MINIMUM_FUNCTIONAL_SPD_REVISION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2cecd5e0:
        d["HwpReturnCode"]="RC_MSS_NON_CURRENT_SPD_REVISION"
        d["FFDC"]="SPD_REVISION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x177a638a:
        d["HwpReturnCode"]="RC_MSS_NON_CURRENT_SPD_REVISION"
        d["FFDC"]="LATEST_SPD_REVISION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8d7a3ce6:
        d["HwpReturnCode"]="RC_MSS_UNSUPPORTED_SPD_COMBINED_REVISION"
        d["FFDC"]="SPD_COMBINED_REVISION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfe81ec3f:
        d["HwpReturnCode"]="RC_MSS_UNSUPPORTED_SPD_COMBINED_REVISION"
        d["FFDC"]="MINIMUM_FUNCTIONAL_SPD_COMBINED_REVISION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x108e0ae5:
        d["HwpReturnCode"]="RC_MSS_NON_CURRENT_SPD_COMBINED_REVISION"
        d["FFDC"]="SPD_COMBINED_REVISION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfdb8e77e:
        d["HwpReturnCode"]="RC_MSS_NON_CURRENT_SPD_COMBINED_REVISION"
        d["FFDC"]="LATEST_SPD_COMBINED_REVISION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6d46184f:
        d["HwpReturnCode"]="RC_OCMB_IS_NOT_EXPLORER"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd4e6bec4:
        d["HwpReturnCode"]="RC_OCMB_IS_NOT_EXPLORER"
        d["FFDC"]="ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6bf9c77d:
        d["HwpReturnCode"]="RC_EXPLR_OMI_TEMPLATE_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9bed0f84:
        d["HwpReturnCode"]="RC_EXPLR_OMI_TEMPLATE_ERR"
        d["FFDC"]="TEMPLATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb8ddc4a3:
        d["HwpReturnCode"]="RC_PROC_DOES_NOT_SUPPORT_US_B"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x73ce6473:
        d["HwpReturnCode"]="RC_PROC_DOES_NOT_SUPPORT_US_B"
        d["FFDC"]="B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc2a55adb:
        d["HwpReturnCode"]="RC_PROC_DOES_NOT_SUPPORT_DS_A"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4fb16240:
        d["HwpReturnCode"]="RC_PROC_DOES_NOT_SUPPORT_DS_A"
        d["FFDC"]="A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x40c61ce3:
        d["HwpReturnCode"]="RC_METADATA_ENABLE_REQUIRES_TEMPLATE_5_OR_9"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8a20b121:
        d["HwpReturnCode"]="RC_METADATA_ENABLE_REQUIRES_TEMPLATE_5_OR_9"
        d["FFDC"]="TMPL_5"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfeca42d1:
        d["HwpReturnCode"]="RC_METADATA_ENABLE_REQUIRES_TEMPLATE_5_OR_9"
        d["FFDC"]="TMPL_9"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x044b807d:
        d["HwpReturnCode"]="RC_EXP_UPDATE_INVALID_IMAGE_SIZE"
        d["FFDC"]="IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe12de812:
        d["HwpReturnCode"]="RC_EXP_UPDATE_CMD_FAILED"
        d["FFDC"]="RSP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xac7dced4:
        d["HwpReturnCode"]="RC_EXP_UPDATE_CMD_FAILED"
        d["FFDC"]="REQ_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x01a366c8:
        d["HwpReturnCode"]="RC_EXP_UPDATE_CMD_FAILED"
        d["FFDC"]="MCHP_ERROR_CODE_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6b6ce17a:
        d["HwpReturnCode"]="RC_EXP_UPDATE_CMD_FAILED"
        d["FFDC"]="MCHP_ERROR_CODE_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6fb054ce:
        d["HwpReturnCode"]="RC_EXP_UPDATE_CMD_FAILED"
        d["FFDC"]="MCHP_ERROR_CODE_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf8cbafc5:
        d["HwpReturnCode"]="RC_EXP_TWI_INVALID_STATUS_ID"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x355c0347:
        d["HwpReturnCode"]="RC_EXP_TWI_INVALID_STATUS_ID"
        d["FFDC"]="STATUS_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x41106c9d:
        d["HwpReturnCode"]="RC_EXP_TWI_INVALID_STATUS_ID"
        d["FFDC"]="STATUS_WORD32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdb54c985:
        d["HwpReturnCode"]="RC_EXP_TWI_UNEXPECTED_STATUS"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa05f1025:
        d["HwpReturnCode"]="RC_EXP_TWI_UNEXPECTED_STATUS"
        d["FFDC"]="EXPECTED_STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x975a047e:
        d["HwpReturnCode"]="RC_EXP_TWI_UNEXPECTED_STATUS"
        d["FFDC"]="STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x71c40330:
        d["HwpReturnCode"]="RC_EXP_TWI_UNEXPECTED_STATUS"
        d["FFDC"]="STATUS_WORD32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc81a05fa:
        d["HwpReturnCode"]="RC_EXP_TWI_UNEXPECTED_WRITE_OFFSET"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6ef3f78d:
        d["HwpReturnCode"]="RC_EXP_TWI_UNEXPECTED_WRITE_OFFSET"
        d["FFDC"]="EXPECTED_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x021bca1e:
        d["HwpReturnCode"]="RC_EXP_TWI_UNEXPECTED_WRITE_OFFSET"
        d["FFDC"]="WRITE_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x81b5fc38:
        d["HwpReturnCode"]="RC_EXP_TWI_UNEXPECTED_WRITE_OFFSET"
        d["FFDC"]="STATUS_WORD32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe1497a92:
        d["HwpReturnCode"]="RC_EXP_TWI_INVALID_IMAGE_SIZE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7124ee81:
        d["HwpReturnCode"]="RC_EXP_TWI_INVALID_IMAGE_SIZE"
        d["FFDC"]="MAX_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdb360c84:
        d["HwpReturnCode"]="RC_EXP_TWI_INVALID_IMAGE_SIZE"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8fd54f9e:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_DOWNLOAD_INVALID_STATE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x514468d7:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_DOWNLOAD_INVALID_STATE"
        d["FFDC"]="BOOT_STAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4339b7f7:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_DOWNLOAD_INVALID_STATE"
        d["FFDC"]="STATUS_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa2eee6d1:
        d["HwpReturnCode"]="RC_EXP_UNKNOWN_REVISION"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1d440d2c:
        d["HwpReturnCode"]="RC_EXP_UNKNOWN_REVISION"
        d["FFDC"]="REVISION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5baf297f:
        d["HwpReturnCode"]="RC_EXP_UNKNOWN_REVISION"
        d["FFDC"]="CHIP_INFO_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xef0a9f1d:
        d["HwpReturnCode"]="RC_EXP_UNKNOWN_REVISION"
        d["FFDC"]="EFUSE_IMAGE_OUT_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf59755d2:
        d["HwpReturnCode"]="RC_EXP_INBAND_RSP_CRC_ERR"
        d["FFDC"]="COMPUTED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3b17b730:
        d["HwpReturnCode"]="RC_EXP_INBAND_RSP_CRC_ERR"
        d["FFDC"]="RECEIVED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x136891a4:
        d["HwpReturnCode"]="RC_EXP_INBAND_LE_DATA_RANGE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe383172e:
        d["HwpReturnCode"]="RC_EXP_INBAND_LE_DATA_RANGE"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd5b65f6c:
        d["HwpReturnCode"]="RC_EXP_INBAND_LE_DATA_RANGE"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4fa49783:
        d["HwpReturnCode"]="RC_EXP_INBAND_LE_DATA_RANGE"
        d["FFDC"]="MAX_INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd2fe8591:
        d["HwpReturnCode"]="RC_EXP_INBAND_BE_DATA_RANGE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x08271fc9:
        d["HwpReturnCode"]="RC_EXP_INBAND_BE_DATA_RANGE"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe7150f1d:
        d["HwpReturnCode"]="RC_EXP_INBAND_BE_DATA_RANGE"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x500dfd0a:
        d["HwpReturnCode"]="RC_EXP_INBAND_BE_DATA_RANGE"
        d["FFDC"]="MAX_INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8edfd1c7:
        d["HwpReturnCode"]="RC_EXP_INBAND_RSP_NO_DOORBELL"
        d["FFDC"]="DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1680704c:
        d["HwpReturnCode"]="RC_EXP_INBAND_RSP_NO_DOORBELL"
        d["FFDC"]="NUM_LOOPS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x68957977:
        d["HwpReturnCode"]="RC_EXP_INBAND_RSP_NO_DOORBELL"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x748d0540:
        d["HwpReturnCode"]="RC_EXP_MEMDIAGS_COMPARE_ERROR_IN_LAST_PATTERN"
        d["FFDC"]="PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x191cacbd:
        d["HwpReturnCode"]="RC_EXP_MEMDIAGS_COMPARE_ERROR_IN_LAST_PATTERN"
        d["FFDC"]="SUBTEST"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2fd6def8:
        d["HwpReturnCode"]="RC_EXP_MEMDIAGS_ERROR_IN_LAST_PATTERN"
        d["FFDC"]="STATUS0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x89737857:
        d["HwpReturnCode"]="RC_EXP_MEMDIAGS_ERROR_IN_LAST_PATTERN"
        d["FFDC"]="STATUS1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa08d5686:
        d["HwpReturnCode"]="RC_EXP_MEMDIAGS_PORT_NOT_FUNCTIONAL"
        d["FFDC"]="RELATIVE_PORT_POSITION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x60b9c2c7:
        d["HwpReturnCode"]="RC_EXP_MEMDIAGS_PORT_NOT_FUNCTIONAL"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xad4f873d:
        d["HwpReturnCode"]="RC_EXP_MEMDIAGS_PORT_NOT_FUNCTIONAL"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8cef3dc4:
        d["HwpReturnCode"]="RC_EXP_MEMDIAGS_MCBIST_FAILED_TO_STOP"
        d["FFDC"]="POLL_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1e3931a4:
        d["HwpReturnCode"]="RC_EXP_MEMDIAGS_ALREADY_AT_BOUNDARY"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xac6dedfc:
        d["HwpReturnCode"]="RC_EXP_MEMDIAGS_ALREADY_AT_BOUNDARY"
        d["FFDC"]="BOUNDARY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x585d7227:
        d["HwpReturnCode"]="RC_EXP_MCBIST_DATA_FAIL"
        d["FFDC"]="STATUS_REGISTER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x013e0ae0:
        d["HwpReturnCode"]="RC_EXP_MCBIST_UNKNOWN_FAILURE"
        d["FFDC"]="STATUS_REGISTER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x65751903:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_BAD_NUM_RANKS"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x482a9fee:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_BAD_NUM_RANKS"
        d["FFDC"]="NUM_RANKS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8924898d:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_BAD_NUM_RANKS"
        d["FFDC"]="MAX_RANKS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8bc7c111:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_UNSUPPORTED_DIMM_TYPE"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7059c801:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_UNSUPPORTED_DIMM_TYPE"
        d["FFDC"]="PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcee1d766:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_UNSUPPORTED_DIMM_TYPE"
        d["FFDC"]="TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb3e0704d:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_UNSUPPORTED_DRAM_WIDTH"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfe2165f8:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_UNSUPPORTED_DRAM_WIDTH"
        d["FFDC"]="PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4b2f2c5e:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_UNSUPPORTED_DRAM_WIDTH"
        d["FFDC"]="DATA_WIDTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x94b9323a:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_UNSUPPORTED_3DS_HEIGHT"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x12ab4faa:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_UNSUPPORTED_3DS_HEIGHT"
        d["FFDC"]="PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x99e814c7:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_UNSUPPORTED_3DS_HEIGHT"
        d["FFDC"]="HEIGHT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x361f5b37:
        d["HwpReturnCode"]="RC_MSS_EXP_HALF_DIMM_MODE_NOT_SUPPORTED"
        d["FFDC"]="ENTERPRISE_SETTING"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xebb9607b:
        d["HwpReturnCode"]="RC_MSS_EXP_HALF_DIMM_MODE_NOT_SUPPORTED"
        d["FFDC"]="HALF_DIMM_SETTING"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x84f0d58f:
        d["HwpReturnCode"]="RC_MSS_EXP_ENTERPRISE_INVALID_CONFIGURATION"
        d["FFDC"]="ENTERPRISE_SUPPORTED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1741c54e:
        d["HwpReturnCode"]="RC_MSS_EXP_ENTERPRISE_INVALID_CONFIGURATION"
        d["FFDC"]="POLICY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xec625794:
        d["HwpReturnCode"]="RC_MSS_EXP_ENTERPRISE_SETUP_ERROR"
        d["FFDC"]="EXPECTED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x52ea88e7:
        d["HwpReturnCode"]="RC_MSS_EXP_ENTERPRISE_SETUP_ERROR"
        d["FFDC"]="ACTUAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe33bbf8e:
        d["HwpReturnCode"]="RC_MSS_EXP_ENTERPRISE_SETUP_ERROR"
        d["FFDC"]="REGISTER_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xacf14011:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_STATUS_CODE_FAILED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xef74b8cc:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_STATUS_CODE_FAILED"
        d["FFDC"]="STATUS_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdb8433a8:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_STATUS_CODE_FAILED"
        d["FFDC"]="CMD_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe2ecfc66:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_STATUS_CODE_FAILED"
        d["FFDC"]="STATUS_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xae2b1aac:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_BOOT_CONFIG_STATUS_CODE_INVALID"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe7fef7ca:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_BOOT_CONFIG_STATUS_CODE_INVALID"
        d["FFDC"]="STATUS_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe9e9726b:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_BOOT_CONFIG_STATUS_CODE_INVALID"
        d["FFDC"]="CMD_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1e7b7905:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_BOOT_CONFIG_STATUS_CODE_INVALID"
        d["FFDC"]="STATUS_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9eae3b42:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_STATUS_BUSY"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfb1925b9:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_STATUS_BUSY"
        d["FFDC"]="STATUS_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x00e46072:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_STATUS_BUSY"
        d["FFDC"]="STATUS_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfb0cbc40:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_WRONG_BOOT_STAGE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x29687e82:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_WRONG_BOOT_STAGE"
        d["FFDC"]="BOOT_STAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4ac8fd6e:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_WRONG_BOOT_STAGE"
        d["FFDC"]="EXPECTED_BOOT_STAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x408acfb4:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_WRONG_BOOT_STAGE"
        d["FFDC"]="STATUS_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd4ea4b73:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_STATUS_INVALID_SIZE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x70e1c467:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_STATUS_INVALID_SIZE"
        d["FFDC"]="STATUS_CODE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x308b49e6:
        d["HwpReturnCode"]="RC_MSS_EXP_RSP_ARG_FAILED"
        d["FFDC"]="CMD_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb70bb7b9:
        d["HwpReturnCode"]="RC_MSS_EXP_RSP_ARG_FAILED"
        d["FFDC"]="RSP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xec862e8e:
        d["HwpReturnCode"]="RC_MSS_EXP_RSP_ARG_FAILED"
        d["FFDC"]="ERROR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4f0f8d50:
        d["HwpReturnCode"]="RC_MSS_EXP_RSP_ARG_FAILED"
        d["FFDC"]="EXTENDED_ERROR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9186e816:
        d["HwpReturnCode"]="RC_MSS_EXP_RSP_ARG_FAILED"
        d["FFDC"]="EXPECTED_REQID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7e3dc282:
        d["HwpReturnCode"]="RC_MSS_EXP_RSP_ARG_FAILED"
        d["FFDC"]="ACTUAL_REQID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe9de128a:
        d["HwpReturnCode"]="RC_MSS_EXP_SENSOR_CACHE_ENABLE_FAILED"
        d["FFDC"]="RSP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9c33faa7:
        d["HwpReturnCode"]="RC_MSS_EXP_SENSOR_CACHE_ENABLE_FAILED"
        d["FFDC"]="ERROR_CODE_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa814e821:
        d["HwpReturnCode"]="RC_MSS_EXP_SENSOR_CACHE_ENABLE_FAILED"
        d["FFDC"]="ERROR_CODE_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xca7b1a50:
        d["HwpReturnCode"]="RC_MSS_EXP_CCS_READ_MISCOMPARE"
        d["FFDC"]="FAIL_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x37eb8384:
        d["HwpReturnCode"]="RC_MSS_EXP_CCS_UE_SUE"
        d["FFDC"]="FAIL_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x745494a4:
        d["HwpReturnCode"]="RC_MSS_EXP_UNKNOWN_PHY_INIT_MODE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7d0ee6ce:
        d["HwpReturnCode"]="RC_MSS_EXP_UNKNOWN_PHY_INIT_MODE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x80527bb0:
        d["HwpReturnCode"]="RC_MSS_EXP_INVALID_PHY_INIT_RSP_DATA_LENGTH"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x41110850:
        d["HwpReturnCode"]="RC_MSS_EXP_INVALID_PHY_INIT_RSP_DATA_LENGTH"
        d["FFDC"]="PHY_INIT_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x65bd747b:
        d["HwpReturnCode"]="RC_MSS_EXP_INVALID_PHY_INIT_RSP_DATA_LENGTH"
        d["FFDC"]="EXPECTED_LENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x036b67aa:
        d["HwpReturnCode"]="RC_MSS_EXP_INVALID_PHY_INIT_RSP_DATA_LENGTH"
        d["FFDC"]="ACTUAL_LENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x51b4519c:
        d["HwpReturnCode"]="RC_MSS_EXP_INVALID_FW_ADAPTER_PROPERTIES_RSP_DATA_LENGTH"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x89c54ebf:
        d["HwpReturnCode"]="RC_MSS_EXP_INVALID_FW_ADAPTER_PROPERTIES_RSP_DATA_LENGTH"
        d["FFDC"]="EXPECTED_LENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xffde3603:
        d["HwpReturnCode"]="RC_MSS_EXP_INVALID_FW_ADAPTER_PROPERTIES_RSP_DATA_LENGTH"
        d["FFDC"]="ACTUAL_LENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x99cb7859:
        d["HwpReturnCode"]="RC_MSS_EXP_UNKNOWN_THERMAL_SENSOR"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc9053bc2:
        d["HwpReturnCode"]="RC_MSS_EXP_UNKNOWN_THERMAL_SENSOR"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x86a8f144:
        d["HwpReturnCode"]="RC_EXP_MAINT_SYMBOL_NOT_FOUND"
        d["FFDC"]="SYMBOL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xae2ad2c0:
        d["HwpReturnCode"]="RC_EXP_MAINT_BAD_RANK_INPUT"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x394733b5:
        d["HwpReturnCode"]="RC_EXP_MAINT_BAD_RANK_INPUT"
        d["FFDC"]="RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9c397c9e:
        d["HwpReturnCode"]="RC_EXP_MAINT_BAD_SPARE_INDEX"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x079318b7:
        d["HwpReturnCode"]="RC_EXP_MAINT_BAD_SPARE_INDEX"
        d["FFDC"]="SPARE0_INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbfdcaacf:
        d["HwpReturnCode"]="RC_EXP_MAINT_BAD_SPARE_INDEX"
        d["FFDC"]="SPARE1_INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x213075de:
        d["HwpReturnCode"]="RC_EXP_MAINT_BAD_STEER_MUX_TYPE"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x10800b58:
        d["HwpReturnCode"]="RC_EXP_MAINT_BAD_STEER_MUX_TYPE"
        d["FFDC"]="STEER_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x68800dce:
        d["HwpReturnCode"]="RC_EXP_MAINT_INVALID_SYMBOL"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1bc486a8:
        d["HwpReturnCode"]="RC_EXP_MAINT_INVALID_SYMBOL"
        d["FFDC"]="SYMBOL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2a953752:
        d["HwpReturnCode"]="RC_EXP_MAINT_DO_STEER_INPUT_OUT_OF_RANGE"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x24886a7b:
        d["HwpReturnCode"]="RC_EXP_MAINT_DO_STEER_INPUT_OUT_OF_RANGE"
        d["FFDC"]="RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0d143338:
        d["HwpReturnCode"]="RC_EXP_MAINT_DO_STEER_INPUT_OUT_OF_RANGE"
        d["FFDC"]="SYMBOL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x911c642c:
        d["HwpReturnCode"]="RC_EXP_MAINT_DO_STEER_ALL_SPARES_DEPLOYED"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfaf6b9a6:
        d["HwpReturnCode"]="RC_EXP_MAINT_DO_STEER_ALL_SPARES_DEPLOYED"
        d["FFDC"]="RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb483b3ec:
        d["HwpReturnCode"]="RC_EXP_MAINT_DO_STEER_ALL_SPARES_DEPLOYED"
        d["FFDC"]="SYMBOL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd7711b4e:
        d["Register FFDC"]="REG_FFDC_EXP_MEMDIAGS_FAILURE"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBMR0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBCFGQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCB_CNTLQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCB_CNTLSTATQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBSTATQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBMCATQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBPARMQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBAGRAQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MBSEC1Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MBSTRQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBISTFIRQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBAMR0A0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBAMR1A0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBAMR2A0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBAMR3A0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBFD0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBFD1Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBFD2Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBFD3Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBFD4Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBFD5Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBFD6Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBFD7Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBSA0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBSA1Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBSA2Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBSA3Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBEA0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBEA1Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBEA2Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBEA3Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0xa8c27faa:
        d["Register FFDC"]="REG_FFDC_EXP_CCS_FAILURE"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_MODEQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_STATQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_CNTLQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBMCATQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_00",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_01",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_02",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_03",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_04",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_05",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_06",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_07",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_08",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_09",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_10",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_11",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_12",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_13",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_14",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_15",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_16",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_17",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_18",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_19",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_20",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_21",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_22",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_23",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_24",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_25",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_26",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_27",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_28",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_29",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_30",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_31",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_00",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_01",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_02",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_03",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_04",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_05",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_06",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_07",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_08",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_09",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_10",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_11",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_12",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_13",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_14",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_15",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_16",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_17",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_18",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_19",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_20",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_21",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_22",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_23",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_24",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_25",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_26",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_27",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_28",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_29",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_30",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_31",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MBA_MCBERRPT0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MBA_MCBERRPT1Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x3c5cd644:
        d["HwpReturnCode"]="RC_I2C_GET_SCOM_INVALID_READ_SIZE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xaca01651:
        d["HwpReturnCode"]="RC_I2C_GET_SCOM_INVALID_READ_SIZE"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6af81540:
        d["HwpReturnCode"]="RC_I2C_GET_SCOM_INVALID_READ_SIZE"
        d["FFDC"]="SIZE_RETURNED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcf0a3659:
        d["HwpReturnCode"]="RC_I2C_GET_SCOM_INVALID_READ_SIZE"
        d["FFDC"]="SIZE_REQUESTED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa6150441:
        d["HwpReturnCode"]="RC_I2C_SCOM_EXPECTED_IBM_INDICATOR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x681ae901:
        d["HwpReturnCode"]="RC_I2C_SCOM_EXPECTED_IBM_INDICATOR"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc88b169f:
        d["HwpReturnCode"]="RC_I2C_SCOM_UNEXPECTED_IBM_INDICATOR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb2e1aeea:
        d["HwpReturnCode"]="RC_I2C_SCOM_UNEXPECTED_IBM_INDICATOR"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0cf17d5f:
        d["HwpReturnCode"]="RC_COLLECT_EXPLORER_ERROR"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd4d9e8e2:
        d["HwpReturnCode"]="RC_COLLECT_EXPLORER_ERROR"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf0cb7918:
        d["HwpReturnCode"]="RC_COLLECT_EXPLORER_ERROR"
        d["FFDC"]="EXP_SAVED_IMAGEA_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc98ae057:
        d["HwpReturnCode"]="RC_COLLECT_EXPLORER_ERROR"
        d["FFDC"]="EXP_SAVED_IMAGEB_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x03a3b94c:
        d["HwpReturnCode"]="RC_EXPLORER_ACTIVE_ERROR_LOG"
        d["FFDC"]="UNIT_FFDC_EXP_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2dd24e31:
        d["HwpReturnCode"]="RC_EXPLORER_SAVED_IMAGEA_ERROR_LOG"
        d["FFDC"]="UNIT_FFDC_EXP_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x61a98339:
        d["HwpReturnCode"]="RC_EXPLORER_SAVED_IMAGEB_ERROR_LOG"
        d["FFDC"]="UNIT_FFDC_EXP_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa96dfddc:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6256382e:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="OMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x40fb9f2d:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="OMI_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x09119fa3:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="EXPECTED_SM_STATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xeb8d2a5f:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="ACTUAL_SM_STATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3eeba8f1:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="DL0_STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc0711045:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="DL0_TRAINING_STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdfe368b4:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="DL0_CONFIG1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7c2ccbd4:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="DL0_ERROR_HOLD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5182ef1f:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="OMI_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbe878337:
        d["HwpReturnCode"]="RC_MSS_FFE_CURSOR_OVERFLOW"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1374b058:
        d["HwpReturnCode"]="RC_MSS_FFE_CURSOR_OVERFLOW"
        d["FFDC"]="PRE_CURSOR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4f7d63ab:
        d["HwpReturnCode"]="RC_MSS_FFE_CURSOR_OVERFLOW"
        d["FFDC"]="POST_CURSOR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2b729a65:
        d["HwpReturnCode"]="RC_EXP_OMI_BUMP_SL_WORKAROUND_ERROR"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6e135e69:
        d["HwpReturnCode"]="RC_EXP_OMI_BUMP_SL_WORKAROUND_ERROR"
        d["FFDC"]="LANE_INPUT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd7ea6ee7:
        d["HwpReturnCode"]="RC_EXP_OMI_BUMP_SL_WORKAROUND_ERROR"
        d["FFDC"]="MAX_LANE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x10f2f92f:
        d["HwpReturnCode"]="RC_I2C_PMIC_INVALID_READ_SIZE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x798e6e2b:
        d["HwpReturnCode"]="RC_I2C_PMIC_INVALID_READ_SIZE"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa52658c2:
        d["HwpReturnCode"]="RC_I2C_PMIC_INVALID_READ_SIZE"
        d["FFDC"]="SIZE_RETURNED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x18e68a11:
        d["HwpReturnCode"]="RC_I2C_PMIC_INVALID_READ_SIZE"
        d["FFDC"]="SIZE_REQUESTED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa06ba2c0:
        d["HwpReturnCode"]="RC_PMIC_CHIP_NOT_RECOGNIZED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb30fac23:
        d["HwpReturnCode"]="RC_PMIC_CHIP_NOT_RECOGNIZED"
        d["FFDC"]="VENDOR_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x736d4d73:
        d["HwpReturnCode"]="RC_PMIC_VOLTAGE_OUT_OF_RANGE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf2d9b430:
        d["HwpReturnCode"]="RC_PMIC_VOLTAGE_OUT_OF_RANGE"
        d["FFDC"]="VOLTAGE_BITMAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x02749597:
        d["HwpReturnCode"]="RC_PMIC_VOLTAGE_OUT_OF_RANGE"
        d["FFDC"]="RAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x32de82e3:
        d["HwpReturnCode"]="RC_PMIC_ORDER_OUT_OF_RANGE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb6543965:
        d["HwpReturnCode"]="RC_PMIC_ORDER_OUT_OF_RANGE"
        d["FFDC"]="RAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x42b12af8:
        d["HwpReturnCode"]="RC_PMIC_ORDER_OUT_OF_RANGE"
        d["FFDC"]="ORDER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc3bd5742:
        d["HwpReturnCode"]="RC_PMIC_VOLTAGE_RANGE_SETTING_OUT_OF_RANGE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbc92f048:
        d["HwpReturnCode"]="RC_PMIC_VOLTAGE_RANGE_SETTING_OUT_OF_RANGE"
        d["FFDC"]="RAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdf216b1b:
        d["HwpReturnCode"]="RC_PMIC_VOLTAGE_RANGE_SETTING_OUT_OF_RANGE"
        d["FFDC"]="RANGE_SETTING"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x103d6b0d:
        d["HwpReturnCode"]="RC_PMIC_DELAY_OUT_OF_RANGE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3ae44db3:
        d["HwpReturnCode"]="RC_PMIC_DELAY_OUT_OF_RANGE"
        d["FFDC"]="RAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd5bb1e58:
        d["HwpReturnCode"]="RC_PMIC_DELAY_OUT_OF_RANGE"
        d["FFDC"]="DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xda9d21e1:
        d["HwpReturnCode"]="RC_PMIC_DIMM_SPD_UNSUPPORTED_MODULE_HEIGHT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe96aaff6:
        d["HwpReturnCode"]="RC_PMIC_DIMM_SPD_UNSUPPORTED_MODULE_HEIGHT"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x498362a5:
        d["HwpReturnCode"]="RC_PMIC_NOT_ENABLED"
        d["FFDC"]="PMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x38cf7fd5:
        d["HwpReturnCode"]="RC_PMIC_NOT_ENABLED"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf7f1c672:
        d["HwpReturnCode"]="RC_PMIC_STATUS_ERRORS"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3017009c:
        d["HwpReturnCode"]="RC_PMIC_STATUS_ERRORS"
        d["FFDC"]="PMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf2410ac2:
        d["HwpReturnCode"]="RC_PMIC_MISMATCHING_VENDOR_IDS"
        d["FFDC"]="VENDOR_ATTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x87c36827:
        d["HwpReturnCode"]="RC_PMIC_MISMATCHING_VENDOR_IDS"
        d["FFDC"]="VENDOR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x00329564:
        d["HwpReturnCode"]="RC_PMIC_MISMATCHING_VENDOR_IDS"
        d["FFDC"]="PMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8f36b3fd:
        d["HwpReturnCode"]="RC_PMIC_MISMATCHING_REVISIONS"
        d["FFDC"]="REVISION_ATTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x52d00a27:
        d["HwpReturnCode"]="RC_PMIC_MISMATCHING_REVISIONS"
        d["FFDC"]="REVISION_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc9e636c6:
        d["HwpReturnCode"]="RC_PMIC_MISMATCHING_REVISIONS"
        d["FFDC"]="PMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf3b67e96:
        d["HwpReturnCode"]="RC_PMIC_EXPECTED_FOUR_PMICS"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6694abfd:
        d["HwpReturnCode"]="RC_PMIC_EXPECTED_FOUR_PMICS"
        d["FFDC"]="NUM_PMICS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfc3332d6:
        d["HwpReturnCode"]="RC_VIN_BULK_BELOW_TOLERANCE"
        d["FFDC"]="NOMINAL_MV"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x642f4b56:
        d["HwpReturnCode"]="RC_VIN_BULK_BELOW_TOLERANCE"
        d["FFDC"]="MINIMUM_MV"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xaf2af2e2:
        d["HwpReturnCode"]="RC_VIN_BULK_BELOW_TOLERANCE"
        d["FFDC"]="ACTUAL_MV"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0f802808:
        d["HwpReturnCode"]="RC_INVALID_NUMBER_OF_TARGETS"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe9484a9d:
        d["HwpReturnCode"]="RC_INVALID_NUMBER_OF_TARGETS"
        d["FFDC"]="NUM_GENERICI2CSLAVE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8c623f80:
        d["HwpReturnCode"]="RC_INVALID_NUMBER_OF_TARGETS"
        d["FFDC"]="NUM_PMIC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd50a2438:
        d["HwpReturnCode"]="RC_PMIC_MISMATCHING_REDUNDANCY_ATTRS"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x46843bcc:
        d["HwpReturnCode"]="RC_PMIC_MISMATCHING_REDUNDANCY_ATTRS"
        d["FFDC"]="PMIC0_REDUNDANCY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8780282c:
        d["HwpReturnCode"]="RC_PMIC_MISMATCHING_REDUNDANCY_ATTRS"
        d["FFDC"]="PMIC1_REDUNDANCY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa8ed1e72:
        d["HwpReturnCode"]="RC_PMIC_REDUNDANCY_FAIL"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x070172c4:
        d["HwpReturnCode"]="RC_PMIC_REDUNDANCY_FAIL"
        d["FFDC"]="N_MODE_PMIC0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2cbf0ff2:
        d["HwpReturnCode"]="RC_PMIC_REDUNDANCY_FAIL"
        d["FFDC"]="N_MODE_PMIC1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x82eaf480:
        d["HwpReturnCode"]="RC_PMIC_REDUNDANCY_FAIL"
        d["FFDC"]="N_MODE_PMIC2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4b6ef854:
        d["HwpReturnCode"]="RC_PMIC_REDUNDANCY_FAIL"
        d["FFDC"]="N_MODE_PMIC3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x88f946fc:
        d["HwpReturnCode"]="RC_PMIC_DROPPED_INTO_N_MODE"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x65dbd64f:
        d["HwpReturnCode"]="RC_PMIC_DROPPED_INTO_N_MODE"
        d["FFDC"]="PMIC_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6b95fc36:
        d["HwpReturnCode"]="RC_DIMM_RUNNING_IN_N_MODE"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x92c4b0a3:
        d["HwpReturnCode"]="RC_DIMM_RUNNING_IN_N_MODE"
        d["FFDC"]="N_MODE_PMIC0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xaf43b823:
        d["HwpReturnCode"]="RC_DIMM_RUNNING_IN_N_MODE"
        d["FFDC"]="N_MODE_PMIC1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb576112c:
        d["HwpReturnCode"]="RC_DIMM_RUNNING_IN_N_MODE"
        d["FFDC"]="N_MODE_PMIC2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf6b9e433:
        d["HwpReturnCode"]="RC_DIMM_RUNNING_IN_N_MODE"
        d["FFDC"]="N_MODE_PMIC3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9d3b7283:
        d["HwpReturnCode"]="RC_MSS_PMIC_I2C_POLLING_TIMEOUT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbefeddae:
        d["HwpReturnCode"]="RC_MSS_PMIC_I2C_POLLING_TIMEOUT"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd50df2f0:
        d["HwpReturnCode"]="RC_PM_PSS_ADC_ERROR"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x72a3c4b6:
        d["HwpReturnCode"]="RC_PM_PSS_ADC_ERROR"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x70cec2c0:
        d["HwpReturnCode"]="RC_PM_PSS_ADC_WRITE_WHILE_BUSY"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x90fe810e:
        d["HwpReturnCode"]="RC_PM_PSS_ADC_WRITE_WHILE_BUSY"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3c85b247:
        d["HwpReturnCode"]="RC_PM_PSS_ADC_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf52eddf9:
        d["HwpReturnCode"]="RC_PM_PSS_ADC_TIMEOUT"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe919c97c:
        d["HwpReturnCode"]="RC_PM_PSS_ADC_TIMEOUT"
        d["FFDC"]="MAXPOLLS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x302212b8:
        d["HwpReturnCode"]="RC_PM_PSS_ADC_TIMEOUT"
        d["FFDC"]="TIMEOUTUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7f5516da:
        d["HwpReturnCode"]="RC_PM_PSS_P2S_ERROR"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7416954e:
        d["HwpReturnCode"]="RC_PM_PSS_P2S_ERROR"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xaff698b4:
        d["HwpReturnCode"]="RC_PM_PBA_INIT_INCORRECT_MODE"
        d["FFDC"]="PM_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xce33f115:
        d["HwpReturnCode"]="RC_PM_PBA_SLAVE_RESET_TIMEOUT"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4579d49c:
        d["HwpReturnCode"]="RC_PM_PBA_SLAVE_RESET_TIMEOUT"
        d["FFDC"]="SLAVENUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x639b976f:
        d["HwpReturnCode"]="RC_PM_PBA_SLAVE_RESET_TIMEOUT"
        d["FFDC"]="PBASLVREG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x559b1d1e:
        d["HwpReturnCode"]="RC_PM_PBA_SLAVE_RESET_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4f79b79e:
        d["HwpReturnCode"]="RC_PM_PBA_SLAVE_BUSY_AFTER_RESET"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf7720aca:
        d["HwpReturnCode"]="RC_PM_PBA_SLAVE_BUSY_AFTER_RESET"
        d["FFDC"]="SLAVENUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x96de95be:
        d["HwpReturnCode"]="RC_PM_PBA_SLAVE_BUSY_AFTER_RESET"
        d["FFDC"]="PBASLVREG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x61743177:
        d["HwpReturnCode"]="RC_PM_PBA_SLAVE_BUSY_AFTER_RESET"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9573a2cc:
        d["HwpReturnCode"]="RC_PM_PBA_BCDE_STOP_TIMEOUT"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa1d9d53b:
        d["HwpReturnCode"]="RC_PM_PBA_BCDE_STOP_TIMEOUT"
        d["FFDC"]="POLLVALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc5fc1c7e:
        d["HwpReturnCode"]="RC_PM_PBA_BCDE_STOP_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xae907089:
        d["HwpReturnCode"]="RC_PM_PBA_BCUE_STOP_TIMEOUT"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1401bbf5:
        d["HwpReturnCode"]="RC_PM_PBA_BCUE_STOP_TIMEOUT"
        d["FFDC"]="POLLVALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x467b9a0a:
        d["HwpReturnCode"]="RC_PM_PBA_BCUE_STOP_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdd70661e:
        d["HwpReturnCode"]="RC_P10_INVALID_LINK_CONFIG_ERR"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x415be3f8:
        d["HwpReturnCode"]="RC_P10_INVALID_LINK_CONFIG_ERR"
        d["FFDC"]="LINK_TRAIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x39c5f266:
        d["HwpReturnCode"]="RC_P10_INVALID_LINK_CONFIG_ERR"
        d["FFDC"]="LINK_SPEED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf094f094:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_UNSUPPORTED_TABLE_TYPE_ERR"
        d["FFDC"]="TABLE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa82c056b:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_UNSUPPORTED_BROADCAST_MODE_ERR"
        d["FFDC"]="TABLE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x15e9c189:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_UNSUPPORTED_BROADCAST_MODE_ERR"
        d["FFDC"]="BROADCAST_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd3fc12c6:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_UNSUPPORTED_DLR_PSAVE_MODE_ERR"
        d["FFDC"]="TABLE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa94328c9:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_UNSUPPORTED_DLR_PSAVE_MODE_ERR"
        d["FFDC"]="DLR_PSAVE_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc76ad7b7:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_INVALID_VALUES_ERR"
        d["FFDC"]="TABLE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdaace873:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_INVALID_VALUES_ERR"
        d["FFDC"]="EPS_GB_PERCENTAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x11da5329:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_INVALID_VALUES_ERR"
        d["FFDC"]="BROADCAST_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe84361e7:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_INVALID_VALUES_ERR"
        d["FFDC"]="R_T0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7da3ce2a:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_INVALID_VALUES_ERR"
        d["FFDC"]="R_T1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5de026ac:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_INVALID_VALUES_ERR"
        d["FFDC"]="R_T2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbe43cde6:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_INVALID_VALUES_ERR"
        d["FFDC"]="W_T0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5c42d032:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_INVALID_VALUES_ERR"
        d["FFDC"]="W_T1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x85f87249:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_CORE_FREQ_RANGE_ERR"
        d["FFDC"]="FREQ_CORE_FLOOR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7a3b629e:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_CORE_FREQ_RANGE_ERR"
        d["FFDC"]="FREQ_CORE_CEILING"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7d3e837b:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_CORE_FREQ_RATIO_ERR"
        d["FFDC"]="FREQ_CORE_FLOOR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x29799835:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_CORE_FREQ_RATIO_ERR"
        d["FFDC"]="FREQ_CORE_CEILING"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe4ba472d:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_OFFSET_ERROR"
        d["FFDC"]="OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x45a275e0:
        d["HwpReturnCode"]="RC_P10_IOP_TOP_PHY_ERROR"
        d["FFDC"]="IOP_TOP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x580438f0:
        d["HwpReturnCode"]="RC_P10_IOP_TOP_PHY_ERROR"
        d["FFDC"]="XRAM_PHY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf0f55920:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_ACCESS_SIZE_ERROR"
        d["FFDC"]="ACCESS_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x07ed9311:
        d["HwpReturnCode"]="RC_BAD_HOMER_PTR"
        d["FFDC"]="HOMER_PTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x484a0742:
        d["HwpReturnCode"]="RC_ILLEGAL_EXPECTED_STOP_LEVEL"
        d["FFDC"]="EXPECTED_STOP_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa003f2a7:
        d["HwpReturnCode"]="RC_EXPECTED_STOP_LEVEL_NOT_REACHED"
        d["FFDC"]="ACTUAL_STOP_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0e1ff1f0:
        d["HwpReturnCode"]="RC_EXPECTED_STOP_LEVEL_NOT_REACHED"
        d["FFDC"]="EXPECTED_STOP_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbd88c95d:
        d["HwpReturnCode"]="RC_ECL2_CLK_SYNC_DROP_TIMEOUT"
        d["FFDC"]="ECL2_CLK_SYNC_DROP_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x486d0af9:
        d["HwpReturnCode"]="RC_ECL2_CLK_SYNC_DROP_TIMEOUT"
        d["FFDC"]="CPMS_CGCSR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2719d2b8:
        d["HwpReturnCode"]="RC_ECL2_CLK_SYNC_DROP_TIMEOUT"
        d["FFDC"]="CLK_REGIONS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4b71477f:
        d["HwpReturnCode"]="RC_ECL2_CLK_SYNC_DROP_TIMEOUT"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x430fed9d:
        d["HwpReturnCode"]="RC_P10_EXIT_CACHE_CONTAINED_MULTIPLE_MASTER_ERR"
        d["FFDC"]="MASTER_CHIP1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6300fe0e:
        d["HwpReturnCode"]="RC_P10_EXIT_CACHE_CONTAINED_MULTIPLE_MASTER_ERR"
        d["FFDC"]="MASTER_CHIP2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9a9ecebc:
        d["HwpReturnCode"]="RC_P10_EXIT_CACHE_CONTAINED_NO_MASTER_ERR"
        d["FFDC"]="MASTER_CHIP1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x45a9f16b:
        d["HwpReturnCode"]="RC_P10_EXIT_CACHE_CONTAINED_NO_MASTER_ERR"
        d["FFDC"]="MASTER_CHIP2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5c3bc400:
        d["HwpReturnCode"]="RC_P10_EXIT_CACHE_CONTAINED_INVALID_MCD_GROUP_SIZE_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x48644839:
        d["HwpReturnCode"]="RC_P10_EXIT_CACHE_CONTAINED_INVALID_MCD_GROUP_SIZE_ERR"
        d["FFDC"]="RANGE_BASE_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbff6c0c4:
        d["HwpReturnCode"]="RC_P10_EXIT_CACHE_CONTAINED_INVALID_MCD_GROUP_SIZE_ERR"
        d["FFDC"]="RANGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x20505f93:
        d["HwpReturnCode"]="RC_P10_EXIT_CACHE_CONTAINED_INVALID_MCD_GROUP_SIZE_ERR"
        d["FFDC"]="MCD_RANGE_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb252c292:
        d["HwpReturnCode"]="RC_CBS_NOT_IN_IDLE_STATE"
        d["FFDC"]="CBS_CS_READ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe2838f26:
        d["HwpReturnCode"]="RC_CBS_NOT_IN_IDLE_STATE"
        d["FFDC"]="CBS_CS_IDLE_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcd047c11:
        d["HwpReturnCode"]="RC_CBS_NOT_IN_IDLE_STATE"
        d["FFDC"]="LOOP_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb811d280:
        d["HwpReturnCode"]="RC_CBS_NOT_IN_IDLE_STATE"
        d["FFDC"]="HW_DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfd7cdaa7:
        d["HwpReturnCode"]="RC_VDN_PGOOD_NOT_SET"
        d["FFDC"]="CBS_ENVSTAT_READ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa4ccac46:
        d["HwpReturnCode"]="RC_P10_PPE_STATE_HALT_TIMEOUT_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9535ad97:
        d["HwpReturnCode"]="RC_P10_GETSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x37b96f51:
        d["HwpReturnCode"]="RC_P10_GETSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="PERV_CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8d7f3144:
        d["HwpReturnCode"]="RC_P10_GETSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x88c7e2be:
        d["HwpReturnCode"]="RC_P10_GETSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xaef70dad:
        d["HwpReturnCode"]="RC_P10_GETSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="BYTES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x513059f2:
        d["HwpReturnCode"]="RC_P10_PUTSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xec3f028b:
        d["HwpReturnCode"]="RC_P10_PUTSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="PERV_CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcd59b8d3:
        d["HwpReturnCode"]="RC_P10_PUTSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="MULTICAST"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1f353565:
        d["HwpReturnCode"]="RC_P10_PUTSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xce35cdb9:
        d["HwpReturnCode"]="RC_P10_PUTSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb3334f83:
        d["HwpReturnCode"]="RC_P10_PUTSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="BYTES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x50bc365c:
        d["HwpReturnCode"]="RC_P10_INVALID_OCC_ACCESS_MODE_ERROR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9357f532:
        d["HwpReturnCode"]="RC_P10_INVALID_OCC_ACCESS_MODE_ERROR"
        d["FFDC"]="PERV_CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x07c56932:
        d["HwpReturnCode"]="RC_P10_INVALID_OCC_ACCESS_MODE_ERROR"
        d["FFDC"]="OCC_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x39a2c571:
        d["HwpReturnCode"]="RC_BAD_VPD_READ"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa07dd8df:
        d["HwpReturnCode"]="RC_BAD_VPD_READ"
        d["FFDC"]="EXPECTED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x398eace3:
        d["HwpReturnCode"]="RC_BAD_VPD_READ"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xadfd1ab2:
        d["HwpReturnCode"]="RC_INVALID_POUNDV_VERSION"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6f9ab250:
        d["HwpReturnCode"]="RC_INVALID_POUNDV_VERSION"
        d["FFDC"]="POUNDV_VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x72e4f6c4:
        d["HwpReturnCode"]="RC_INVALID_MATCHING_FREQ_NUMBER"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc04bfddc:
        d["HwpReturnCode"]="RC_INVALID_MATCHING_FREQ_NUMBER"
        d["FFDC"]="MATCHES_FOUND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x704a752f:
        d["HwpReturnCode"]="RC_INVALID_MATCHING_FREQ_NUMBER"
        d["FFDC"]="DESIRED_FREQPB"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa8e2142a:
        d["HwpReturnCode"]="RC_INVALID_MATCHING_FREQ_NUMBER"
        d["FFDC"]="LRPREC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x184504b9:
        d["HwpReturnCode"]="RC_INVALID_MATCHING_FREQ_NUMBER"
        d["FFDC"]="BUCKETA_FREQPB"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8bd0d966:
        d["HwpReturnCode"]="RC_INVALID_MATCHING_FREQ_NUMBER"
        d["FFDC"]="BUCKETB_FREQPB"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4f9ffbaa:
        d["HwpReturnCode"]="RC_INVALID_EQ_CHIP_POS"
        d["FFDC"]="EQ_POSITION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x11ce5224:
        d["HwpReturnCode"]="RC_INVALID_BUCKET_ID"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x033ee596:
        d["HwpReturnCode"]="RC_INVALID_BUCKET_ID"
        d["FFDC"]="BUCKET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x10b45636:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_AGGREGATE_INVALID_CONFIG_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb525f605:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_AGGREGATE_INVALID_CONFIG_ERR"
        d["FFDC"]="LOCAL_FBC_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1929b8d2:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_AGGREGATE_INVALID_CONFIG_ERR"
        d["FFDC"]="REMOTE_FBC_ID1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x37628235:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_AGGREGATE_INVALID_CONFIG_ERR"
        d["FFDC"]="REMOTE_FBC_ID2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x92794367:
        d["HwpReturnCode"]="RC_P10_IO_LOAD_PPE_HW_IMG_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x459120bd:
        d["HwpReturnCode"]="RC_P10_IO_LOAD_PPE_HW_IMG_ERROR"
        d["FFDC"]="HW_IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcde5ae5f:
        d["HwpReturnCode"]="RC_P10_IO_LOAD_PPE_IOPPE_IMG_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x76644367:
        d["HwpReturnCode"]="RC_P10_IO_LOAD_PPE_IOPPE_IMG_ERROR"
        d["FFDC"]="IOO_IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x87834d52:
        d["HwpReturnCode"]="RC_P10_IO_LOAD_PPE_IOPPE_IMG_ERROR"
        d["FFDC"]="MEMREGS_IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc10158b8:
        d["HwpReturnCode"]="RC_P10_IO_LOAD_PPE_IOPPE_IMG_ERROR"
        d["FFDC"]="IOO_IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x78cd0986:
        d["HwpReturnCode"]="RC_P10_IO_LOAD_PPE_IOPPE_IMG_ERROR"
        d["FFDC"]="MEMREGS_IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd2bcd33c:
        d["HwpReturnCode"]="RC_P10_IO_LOAD_PPE_IOPPE_IMG_ERROR"
        d["FFDC"]="HW_IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xea521e75:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_TIMEOUT"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x15c84280:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_TIMEOUT"
        d["FFDC"]="SP_WKUP_REG_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf8cf3c6f:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_TIMEOUT"
        d["FFDC"]="ENTITY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x52042720:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_TIMEOUT"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf7454f49:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_TIMEOUT"
        d["FFDC"]="CORE_SSHSRC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x39efa0de:
        d["HwpReturnCode"]="RC_SPCWKUP_CODE_BAD_ENTITY"
        d["FFDC"]="ENTITY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x460d09ac:
        d["HwpReturnCode"]="RC_SPCWKUP_CODE_BAD_OP"
        d["FFDC"]="OPERATION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd8c08a2e:
        d["HwpReturnCode"]="RC_SYSTEM_IN_CHECKSTOP_STATE"
        d["FFDC"]="QME_EISR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x352172d1:
        d["HwpReturnCode"]="RC_CORE_SPECIAL_WAKEUP_NOT_FEASIBLE"
        d["FFDC"]="QME_FLAG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x167427c2:
        d["HwpReturnCode"]="RC_INTERNAL_SPLWKUP_IS_POSSIBLE"
        d["FFDC"]="QME_EISR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x825e0b39:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_HW529794_TIMEOUT"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6d5ed749:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_HW529794_TIMEOUT"
        d["FFDC"]="SP_WKUP_REG_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8704a664:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_HW529794_TIMEOUT"
        d["FFDC"]="ENTITY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc8507186:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_HW529794_TIMEOUT"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1962baa0:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_HW529794_TIMEOUT"
        d["FFDC"]="CORE_SSHSRC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xeb512076:
        d["HwpReturnCode"]="RC_MSS_EFF_CONFIG_MIRROR_DISABLED"
        d["FFDC"]="MRW_HW_MIRRORING_ENABLE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbef41dd6:
        d["HwpReturnCode"]="RC_MSS_EFF_CONFIG_MIRROR_DISABLED"
        d["FFDC"]="MIRROR_PLACEMENT_POLICY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x01877ee6:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NO_GROUP_ALLOWED"
        d["FFDC"]="MSS_INTERLEAVE_ENABLE_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x907a3958:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NO_GROUP_ALLOWED"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf0bcb603:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP"
        d["FFDC"]="MAX_REGION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x886d4cac:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP_DIMM"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x133abca4:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP_DIMM"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcff081e6:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP_DIMM"
        d["FFDC"]="MC_PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7ca811c9:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP_DIMM"
        d["FFDC"]="MC_PORT_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xacb91f66:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NOT_ENOUGH_MEMORY"
        d["FFDC"]="REQ_MEMORY_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb61f9322:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NOT_ENOUGH_MEMORY"
        d["FFDC"]="AVAIL_MEM_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6b14f0d8:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NOT_ENOUGH_MEMORY"
        d["FFDC"]="REQUESTED_MEM_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa3aed6a5:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NOT_ENOUGH_MEMORY"
        d["FFDC"]="MIRROR_PLACEMENT_POLICY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9a7b4465:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_MEMORY_BAR_NOT_POSSIBLE"
        d["FFDC"]="MIRROR_PLACEMENT_POLICY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x330b65f3:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_MEMORY_BAR_NOT_POSSIBLE"
        d["FFDC"]="MEMSIZE_INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xedf36926:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_MEMORY_BAR_NOT_POSSIBLE"
        d["FFDC"]="ADJUSTED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1ebd9a83:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_MEMORY_BAR_NOT_POSSIBLE"
        d["FFDC"]="REQ_MEMORY_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xafa83052:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_MEMORY_BAR_NOT_POSSIBLE"
        d["FFDC"]="REQUESTED_MEM_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9d450fd6:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_MEMORY_BAR_NOT_POSSIBLE"
        d["FFDC"]="AVAIL_MEM_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7d88b7ac:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_ADDRESS_NOT_ALIGNED"
        d["FFDC"]="REQ_MEMORY_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf9fc5602:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_ADDRESS_NOT_ALIGNED"
        d["FFDC"]="BAR_BASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x53667fe2:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_ADDRESS_NOT_ALIGNED"
        d["FFDC"]="BAR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7cebf5fb:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_SMF_NOT_ENABLED"
        d["FFDC"]="SMF_CONFIG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb9cac689:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_SMF_NOT_ENABLED"
        d["FFDC"]="SMF_TOTAL_BAR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9660006d:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_INVALID_BAR_TYPE"
        d["FFDC"]="BAR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc19db0bd:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_SMF_256MB_MINIMUM_ERROR"
        d["FFDC"]="SMF_TOTAL_BAR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4c10e8ea:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_SMF_256MB_OFFSET_ERROR"
        d["FFDC"]="SMF_BASE_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4baa450e:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NM_REGION_MAP_ERROR"
        d["FFDC"]="PROC_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4839ebb6:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NM_REGION_MAP_ERROR"
        d["FFDC"]="MEM_BASE_ADDRS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x51aeb4fc:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NM_REGION_MAP_ERROR"
        d["FFDC"]="CURR_GROUP_IDX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xeb48ceea:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NM_REGION_MAP_ERROR"
        d["FFDC"]="CURR_GROUP_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x515cd665:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NM_REGION_MAP_ERROR"
        d["FFDC"]="CURR_REGION_IDX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbd42da66:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NM_REGION_MAP_ERROR"
        d["FFDC"]="CURR_REGION_SIZE_LEFT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x318b0964:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NM_REGION_MAP_ERROR"
        d["FFDC"]="MAX_REGION_IDX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x360bed8b:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NM_REGION_MAP_ERROR"
        d["FFDC"]="MAX_REGION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4f2dd38a:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_M_REGION_MAP_ERROR"
        d["FFDC"]="PROC_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0aba7adf:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_M_REGION_MAP_ERROR"
        d["FFDC"]="MIRROR_BASE_ADDRS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9049cf99:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_M_REGION_MAP_ERROR"
        d["FFDC"]="CURR_GROUP_IDX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x976a0587:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_M_REGION_MAP_ERROR"
        d["FFDC"]="CURR_GROUP_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x251f91be:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_M_REGION_MAP_ERROR"
        d["FFDC"]="CURR_REGION_SIZE_LEFT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbccb968e:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_M_REGION_MAP_ERROR"
        d["FFDC"]="MAX_REGION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcbeb617e:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_INVALID_GROUP_SIZE"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf0a0dbe7:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_INVALID_GROUP_SIZE"
        d["FFDC"]="MC_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x71e71179:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_INVALID_GROUP_SIZE"
        d["FFDC"]="GROUP_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb5821a5d:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_INVALID_MCC_CONFIG"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa89ec771:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_INVALID_MCC_CONFIG"
        d["FFDC"]="MCC0_NUM_MCC_IN_GROUP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x41869738:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_INVALID_MCC_CONFIG"
        d["FFDC"]="MCC0_GROUP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf859650a:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_INVALID_MCC_CONFIG"
        d["FFDC"]="MCC1_MCC_NUM_IN_GROUP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x934d9079:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_INVALID_MCC_CONFIG"
        d["FFDC"]="MCC1_GROUP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x65fbaea2:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_ENDLESS_BUFFER"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbf9b340d:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_ENDLESS_BUFFER"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd50338bc:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_ENDLESS_BUFFER"
        d["FFDC"]="CHIPLET_SEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x74d91ece:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_ENDLESS_BUFFER"
        d["FFDC"]="RECORD_VAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x568d9f36:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_ENDLESS_BUFFER"
        d["FFDC"]="KEYWORD_VAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1efd8e6c:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_MAGIC"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x834499af:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_MAGIC"
        d["FFDC"]="HEADER_MAGIC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1c803825:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_MAGIC"
        d["FFDC"]="REF_MAGIC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdd5a11c7:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb468abd5:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="HEADER_MAGIC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0fe9bac9:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="REF_MAGIC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x31a449c4:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="HEADER_RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbdc5500c:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="REF_RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xddb4434e:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="HEADER_SCAN_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x057bc1f8:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="REF_CHIPLET_SEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb7194a93:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="HEADER_RING_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0918ae15:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="REF_RING_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbfee360b:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="SIZEOF_COMPRESSED_SCAN_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb05da7a5:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="FAILED_TEST_VEC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb66f4559:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_NULL_POINTER"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2b24e83e:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_NULL_POINTER"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x336762e8:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_NULL_POINTER"
        d["FFDC"]="CHIPLET_SEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x78efc655:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RECORD_KEYWORD_PAIR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbc03d9bc:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RECORD_KEYWORD_PAIR"
        d["FFDC"]="MVPD_RECORD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3f0b7d33:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RECORD_KEYWORD_PAIR"
        d["FFDC"]="MVPD_KEYWORD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x023622c1:
        d["HwpReturnCode"]="RC_MVPD_INSUFFICIENT_RECORD_SPACE"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb1159138:
        d["HwpReturnCode"]="RC_MVPD_INSUFFICIENT_RECORD_SPACE"
        d["FFDC"]="REM_RING_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8f654aad:
        d["HwpReturnCode"]="RC_MVPD_INSUFFICIENT_RECORD_SPACE"
        d["FFDC"]="REM_RECORD_SPACE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x04737690:
        d["HwpReturnCode"]="RC_MVPD_INSUFFICIENT_RECORD_SPACE"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2fd38b77:
        d["HwpReturnCode"]="RC_MVPD_INSUFFICIENT_RING_BUFFER_SPACE"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6c2c1aee:
        d["HwpReturnCode"]="RC_MVPD_INSUFFICIENT_RING_BUFFER_SPACE"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x69407c8f:
        d["HwpReturnCode"]="RC_MVPD_INSUFFICIENT_RING_BUFFER_SPACE"
        d["FFDC"]="CHIPLET_SEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8f656e8e:
        d["HwpReturnCode"]="RC_MVPD_INSUFFICIENT_RING_BUFFER_SPACE"
        d["FFDC"]="BUFFER_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4e49512f:
        d["HwpReturnCode"]="RC_MVPD_INSUFFICIENT_RING_BUFFER_SPACE"
        d["FFDC"]="RING_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x762238f3:
        d["HwpReturnCode"]="RC_MVPD_INSUFFICIENT_RING_BUFFER_SPACE"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x82b9fc8f:
        d["HwpReturnCode"]="RC_MVPD_CODE_BUG"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x631e7877:
        d["HwpReturnCode"]="RC_MVPD_CODE_BUG"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe81fe6fb:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_FLAGS"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1181b13f:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_FLAGS"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa5bfe641:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_FLAGS"
        d["FFDC"]="BYTES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x76d34d8c:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_FLAGS"
        d["FFDC"]="FLAGS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcfcc46e6:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_FLAGS"
        d["FFDC"]="FLAG_CHECK_OP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x527db1ef:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_FLAGS"
        d["FFDC"]="FLAG_CHECK_LCO_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd5e9fd95:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_FLAGS"
        d["FFDC"]="FLAG_CHECK_CACHE_INJECT_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe2048eb0:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_UNSUPPORTED_FLAGS"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x955fc82a:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_UNSUPPORTED_FLAGS"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4a7645bf:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_UNSUPPORTED_FLAGS"
        d["FFDC"]="BYTES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6b852382:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_UNSUPPORTED_FLAGS"
        d["FFDC"]="FLAGS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x559390e2:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_UNSUPPORTED_FLAGS"
        d["FFDC"]="FLAG_CHECK_ECC_OVERRIDE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x810377a7:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_UNSUPPORTED_FLAGS"
        d["FFDC"]="FLAG_CHECK_TAG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2a56eeb6:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_UNSUPPORTED_FLAGS"
        d["FFDC"]="FLAG_CHECK_HOST_PASS_THROUGH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe5fb4b3f:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_SIZE_CI"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x17948e29:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_SIZE_CI"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x38f6e144:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_SIZE_CI"
        d["FFDC"]="BYTES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa3319ace:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_SIZE_CI"
        d["FFDC"]="FLAGS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xff4b0791:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_SIZE_DMA"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb7c1c2db:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_SIZE_DMA"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc0dd4069:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_SIZE_DMA"
        d["FFDC"]="BYTES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd99a818c:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_SIZE_DMA"
        d["FFDC"]="FLAGS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x066dae8b:
        d["HwpReturnCode"]="RC_BAD_PROC_TARGET"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0633ff3a:
        d["HwpReturnCode"]="RC_BAD_PROC_TARGET"
        d["FFDC"]="INPUT_BUF"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa8331959:
        d["HwpReturnCode"]="RC_BAD_INPUT_BUFFER"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x74b1f9e0:
        d["HwpReturnCode"]="RC_BAD_INPUT_BUFFER"
        d["FFDC"]="INPUT_BUF"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf1369192:
        d["HwpReturnCode"]="RC_MSS_BAD_CL_CAST"
        d["FFDC"]="CL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x157d6e06:
        d["HwpReturnCode"]="RC_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="MSS_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x04044427:
        d["HwpReturnCode"]="RC_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="SUPPORTED_FREQ_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x48b09005:
        d["HwpReturnCode"]="RC_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="SUPPORTED_FREQ_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb91abc05:
        d["HwpReturnCode"]="RC_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="SUPPORTED_FREQ_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa56b772a:
        d["HwpReturnCode"]="RC_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="SUPPORTED_FREQ_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6d18e2e1:
        d["HwpReturnCode"]="RC_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6d3d5e82:
        d["HwpReturnCode"]="RC_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="PROC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x746afa20:
        d["HwpReturnCode"]="RC_MSS_FREQ_NOT_EQUAL_MAX_DOMAIN_FREQ"
        d["FFDC"]="MSS_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xae66b2cc:
        d["HwpReturnCode"]="RC_MSS_FREQ_NOT_EQUAL_MAX_DOMAIN_FREQ"
        d["FFDC"]="DOMAIN_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcbd39422:
        d["HwpReturnCode"]="RC_MSS_FREQ_NOT_EQUAL_MAX_DOMAIN_FREQ"
        d["FFDC"]="DOMAIN_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe798a10d:
        d["HwpReturnCode"]="RC_MSS_FAILED_SYNC_MODE"
        d["FFDC"]="NEST_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x462071d6:
        d["HwpReturnCode"]="RC_MSS_FAILED_SYNC_MODE"
        d["FFDC"]="MEM_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4648bfc8:
        d["HwpReturnCode"]="RC_MSS_ALL_TARGETS_HAVE_0_FREQ"
        d["FFDC"]="VECTOR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc2ab98de:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_SIZE_CHANGED"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0b48edac:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_SIZE_CHANGED"
        d["FFDC"]="SUPPOSED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf47a0577:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_SIZE_CHANGED"
        d["FFDC"]="MCA_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe6b3a1dc:
        d["HwpReturnCode"]="RC_MSS_ERROR_CALCULATING_CAS_LATENCY_VECTOR"
        d["FFDC"]="NUM_PORTS_FUNCTIONAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x01c1f5b6:
        d["HwpReturnCode"]="RC_MSS_ERROR_CALCULATING_CAS_LATENCY_VECTOR"
        d["FFDC"]="NUM_CAS_LATENCIES_FOUND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9cb68b54:
        d["HwpReturnCode"]="RC_MSS_ERROR_CALCULATING_CAS_LATENCY_VECTOR"
        d["FFDC"]="MCS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfff0989a:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_VPD_FREQ_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0f091509:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_VPD_FREQ_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xff6a5c22:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_VPD_FREQ_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x65e49d0c:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_VPD_FREQ_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xba7a1002:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_MAX_FREQ_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe8d1602e:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_MAX_FREQ_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x150e339a:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_MAX_FREQ_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9db62dac:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_MAX_FREQ_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0ac605c4:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_MAX_FREQ_4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0fd5e509:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_NEST_FREQ_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x15cb81ec:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_NEST_FREQ_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x03857b40:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_NEST_FREQ_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf49abc54:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_NEST_FREQ_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbc11e6d9:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_NEST_FREQ_4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x374c6a51:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="REQUIRED_SYNC_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x89eacbcb:
        d["HwpReturnCode"]="RC_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="REQUIRED_SYNC_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x463d5fca:
        d["HwpReturnCode"]="RC_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="MCBIST_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6e212b45:
        d["HwpReturnCode"]="RC_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="NUM_PORTS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb67774ab:
        d["HwpReturnCode"]="RC_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="MRW_MAX_FREQ_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x27a2eadb:
        d["HwpReturnCode"]="RC_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="MRW_MAX_FREQ_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdf18a1e6:
        d["HwpReturnCode"]="RC_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="MRW_MAX_FREQ_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe0ed5ccc:
        d["HwpReturnCode"]="RC_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="MRW_MAX_FREQ_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xecbc093f:
        d["HwpReturnCode"]="RC_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="MRW_MAX_FREQ_4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf76df021:
        d["HwpReturnCode"]="RC_MSS_FREQ_TO_NEST_FREQ_RATIO_TOO_LARGE"
        d["FFDC"]="MSS_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x574d0fe9:
        d["HwpReturnCode"]="RC_MSS_FREQ_TO_NEST_FREQ_RATIO_TOO_LARGE"
        d["FFDC"]="NEST_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb29944ba:
        d["HwpReturnCode"]="RC_MSS_FREQ_OR_NEST_FREQ_IS_ZERO"
        d["FFDC"]="MSS_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9e8eea6f:
        d["HwpReturnCode"]="RC_MSS_FREQ_OR_NEST_FREQ_IS_ZERO"
        d["FFDC"]="NEST_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd92394c4:
        d["HwpReturnCode"]="RC_L3_PURGE_DONE_TIMEOUT"
        d["FFDC"]="L3_PURGE_DONE_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1c2626e3:
        d["HwpReturnCode"]="RC_L3_PURGE_DONE_TIMEOUT"
        d["FFDC"]="PM_PURGE_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4b395784:
        d["HwpReturnCode"]="RC_L3_PURGE_DONE_TIMEOUT"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x057403c0:
        d["HwpReturnCode"]="RC_PM_QME_FIRINIT_BAD_MODE"
        d["FFDC"]="BADMODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x41156bff:
        d["Register FFDC"]="PGPE_STATE_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCFLG2_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIIR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIXSR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXILR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXISRR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEIVPR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x3e4151bc:
        d["Register FFDC"]="XGPE_STATE_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCFLG3_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIIR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIXSR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXILR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXISRR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEIVPR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0xba3c5ce5:
        d["Register FFDC"]="XGPE_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCFLG3_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPETSEL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEIVPR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEMACR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXISGBU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXISGBL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIICACU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIICACL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIDCACU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIDCACL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x0a1d5bf6:
        d["Register FFDC"]="OCCGPE0_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPETSEL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEIVPR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEMACR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXISGBU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXISGBL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXIICACU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXIICACL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXIDCACU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXIDCACL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x125fe0dd:
        d["Register FFDC"]="OCCGPE1_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPETSEL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEIVPR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEMACR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXISGBU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXISGBL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXIICACU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXIICACL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXIDCACU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXIDCACL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x4d685de9:
        d["Register FFDC"]="PGPE_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCFLG2_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIIR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIXSR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXILR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXISRR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPETSEL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEIVPR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEMACR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXISGBU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXISGBL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIICACU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIICACL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIDCACU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIDCACL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0xc2d13199:
        d["Register FFDC"]="PBA_FFDC_BASIC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVRST",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAMODE",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAFIR_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAFIRACT0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAFIRACT1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAFIRMASK_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAFIR_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAFIRACT0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAFIRACT1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAFIRMASK_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAERRRPT0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAERRRPT1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAERRRPT2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAERRRPT1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAERRRPT2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABAR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABAR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABAR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABAR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABARMSK0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABARMSK1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABARMSK2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABARMSK3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0xd0d3dd10:
        d["Register FFDC"]="PBA_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAXCFG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_BCUE_STAT",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_BCUE_PBADR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_BCUE_OCIBAR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_BCDE_PBADR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_BCDE_OCIBAR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_BCDE_STAT",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVRST",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAMODE",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAFIR_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAFIRACT0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAFIRACT1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAFIRMASK_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAERRRPT0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAERRRPT1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAERRRPT2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAERRRPT1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAERRRPT2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL4",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL5",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL4",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL5",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABAR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABAR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABAR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABAR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABARMSK0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABARMSK1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABARMSK2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABARMSK3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x14b91420:
        d["Register FFDC"]="PSS_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_CR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_CR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_CR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_STAT",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_CMD",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_RESET",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_WDATA",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_RDATA0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_RDATA1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_RDATA2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_RDATA3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_RDATA4",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_RDATA5",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_RDATA6",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_RDATA7",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_P2S_100NS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_P2S_CR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_P2S_CR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_P2S_CR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_P2S_STAT",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_P2S_CMD",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_P2S_WDATA",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_P2S_RDATA",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVRST",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAMODE",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x3b5be4ab:
        d["Register FFDC"]="OCB_CHANNEL0_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBAR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBCSR0_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSLBR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSLCS0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSHBR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSHCS0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWCR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSBR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSES0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBESR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x51497952:
        d["Register FFDC"]="OCB_CHANNEL1_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBAR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBCSR1_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSLBR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSLCS1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSHBR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSHCS1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWCR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSBR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSES1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBESR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0xfa36cbd3:
        d["Register FFDC"]="OCB_CHANNEL2_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBAR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBCSR2_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSLBR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSLCS2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSHBR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSHCS2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWCR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSBR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSES2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBESR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0xae3b7031:
        d["Register FFDC"]="OCB_CHANNEL3_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBAR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBCSR3_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSLBR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSLCS3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSHBR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSHCS3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWCR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSBR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVRST",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAMODE",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSES3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBESR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x81576941:
        d["Register FFDC"]="OCC_JTAG_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OJIC",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OJSTAT",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OJTDI",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OJTDO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OJCFG_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x13311d75:
        d["Register FFDC"]="PM_FIR_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_SCOM_OCCLFIR_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_SCOM_OCCLFIRMASK_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_SCOM_OCCLFIRACT0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_SCOM_OCCLFIRACT1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAFIR_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAFIR_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0xd780eda0:
        d["Register FFDC"]="OCC_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OISR0_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OIMR0_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OITR0_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OISR1_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OIMR1_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OITR1_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCFLG0_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCFLG1_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_CCSR_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWCR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWCR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWCR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWCR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSBR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSBR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSBR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSBR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBAR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBAR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBAR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBAR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBCSR0_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBCSR1_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBCSR2_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBCSR3_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBESR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBESR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBESR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBESR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAMODE",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVRST",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEIVPR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEIVPR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEIVPR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEIVPR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_SCOM_OCCLFIR_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OINKR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OINKR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCFLG0_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCFLG1_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_G0ISR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_G1ISR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_G2ISR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_G3ISR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_G0ISR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_G1ISR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_G2ISR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_G3ISR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCS0_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCS1_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCS2_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCS3_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x32827c2c:
        d["Register FFDC"]="CHECK_MASTER_STOP15_FFDC_REGS_PU"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_CCSR_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x4a8c306c:
        d["Register FFDC"]="CHECK_MASTER_STOP15_FFDC_REGS_EQ"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_FLAGS_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCRA_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCRB_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_LFIR_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIXCR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIDBGINF",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDR4",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDR6",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDR8",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDRX",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDR28",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDR30",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x0cec5a3a:
        d["Register FFDC"]="CHECK_MASTER_STOP15_FFDC_REGS_EC"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::c::QME_SSH_SRC",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::c::QME_SCSR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x64040390:
        d["HwpReturnCode"]="RC_PGPE_BAD_MODE"
        d["FFDC"]="BADMODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3db2f54c:
        d["HwpReturnCode"]="RC_PGPE_INIT_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x03e1f9a0:
        d["HwpReturnCode"]="RC_PGPE_INIT_TIMEOUT"
        d["FFDC"]="PGPE_BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x280dab5d:
        d["HwpReturnCode"]="RC_PGPE_INIT_TIMEOUT"
        d["FFDC"]="PGPE_STATE_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6ae6366c:
        d["HwpReturnCode"]="RC_PGPE_INIT_PSTATE_AUTOSTART_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2bf7df84:
        d["HwpReturnCode"]="RC_PGPE_INIT_HALT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc4ee43e7:
        d["HwpReturnCode"]="RC_PGPE_INIT_HALT"
        d["FFDC"]="PGPE_BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x95148483:
        d["HwpReturnCode"]="RC_PGPE_INIT_HALT"
        d["FFDC"]="PGPE_STATE_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xaa32aa11:
        d["HwpReturnCode"]="RC_PGPE_INIT_DEBUG_HALT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfba0a340:
        d["HwpReturnCode"]="RC_PGPE_INIT_DEBUG_HALT"
        d["FFDC"]="PGPE_BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4d35b1b0:
        d["HwpReturnCode"]="RC_PGPE_INIT_DEBUG_HALT"
        d["FFDC"]="PGPE_STATE_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8cdc6707:
        d["HwpReturnCode"]="RC_PGPE_RESET_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8a6ecded:
        d["HwpReturnCode"]="RC_PGPE_RESET_TIMEOUT"
        d["FFDC"]="PGPE_BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x08c0a61e:
        d["HwpReturnCode"]="RC_PGPE_RESET_TIMEOUT"
        d["FFDC"]="PGPE_STATE_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf71e710f:
        d["HwpReturnCode"]="RC_PGPE_PBA_INIT_FAILED"
        d["FFDC"]="MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xaf5aaf12:
        d["HwpReturnCode"]="RC_PGPE_PBA_INIT_FAILED"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9fba8ae1:
        d["HwpReturnCode"]="RC_P10_GEN_XSCOM_INIT_UNSUPPORTED_SCOM_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x84e85261:
        d["HwpReturnCode"]="RC_P10_GEN_XSCOM_INIT_UNSUPPORTED_SCOM_ERR"
        d["FFDC"]="CU_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x12873aad:
        d["HwpReturnCode"]="RC_P10_GEN_XSCOM_INIT_UNSUPPORTED_SCOM_ERR"
        d["FFDC"]="EC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6f6e7272:
        d["HwpReturnCode"]="RC_P10_GEN_XSCOM_INIT_UNSUPPORTED_SCOM_ERR"
        d["FFDC"]="CU_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xafe732f0:
        d["HwpReturnCode"]="RC_P10_GEN_XSCOM_INIT_UNSUPPORTED_SCOM_ERR"
        d["FFDC"]="ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x084fff6a:
        d["HwpReturnCode"]="RC_P10_GEN_XSCOM_INIT_SCOM_XLATE_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc0760f89:
        d["HwpReturnCode"]="RC_P10_GEN_XSCOM_INIT_SCOM_XLATE_ERR"
        d["FFDC"]="CU_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xeda40506:
        d["HwpReturnCode"]="RC_P10_GEN_XSCOM_INIT_SCOM_XLATE_ERR"
        d["FFDC"]="EC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc7a1d6bb:
        d["HwpReturnCode"]="RC_P10_GEN_XSCOM_INIT_SCOM_XLATE_ERR"
        d["FFDC"]="CU_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x649352c3:
        d["HwpReturnCode"]="RC_P10_GEN_XSCOM_INIT_SCOM_XLATE_ERR"
        d["FFDC"]="ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8d5e9ac9:
        d["HwpReturnCode"]="RC_L2_PURGE_DONE_TIMEOUT"
        d["FFDC"]="L2_PURGE_DONE_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x44ff10b5:
        d["HwpReturnCode"]="RC_L2_PURGE_DONE_TIMEOUT"
        d["FFDC"]="QME_SCSR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3fb5ea9a:
        d["HwpReturnCode"]="RC_L2_PURGE_DONE_TIMEOUT"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xde069b3c:
        d["HwpReturnCode"]="RC_PMSR_SHIFT_INACTIVE_TIMEOUT"
        d["FFDC"]="PMSR_SHIFT_INACTIVE_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc6dde657:
        d["HwpReturnCode"]="RC_PMSR_SHIFT_INACTIVE_TIMEOUT"
        d["FFDC"]="QME_SCSR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdb0c8aeb:
        d["HwpReturnCode"]="RC_PMSR_SHIFT_INACTIVE_TIMEOUT"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe21d2e10:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_POLL_TIMEOUT"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe3cc0c16:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_POLL_TIMEOUT"
        d["FFDC"]="AVSBUS_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc8107f74:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_POLL_TIMEOUT"
        d["FFDC"]="AVSBUS_BRIDGE_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x89181cd2:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_POLL_TIMEOUT"
        d["FFDC"]="AVSBUS_MAX_POLL_CNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdeb3c0ca:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_VOLTAGE_TIMEOUT"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcb569d54:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_VOLTAGE_TIMEOUT"
        d["FFDC"]="AVSBUS_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb8183aae:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_VOLTAGE_TIMEOUT"
        d["FFDC"]="AVSBUS_BRIDGE_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf5bbcacb:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_VOLTAGE_TIMEOUT"
        d["FFDC"]="AVSBUS_CMD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x499d04f4:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_VOLTAGE_TIMEOUT"
        d["FFDC"]="AVSBUS_CMD_GROUP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2a3bdeed:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_VOLTAGE_TIMEOUT"
        d["FFDC"]="AVSBUS_CMD_DATATYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3b120d12:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_VOLTAGE_TIMEOUT"
        d["FFDC"]="AVSBUS_RAILSELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1609c92f:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_VOLTAGE_TIMEOUT"
        d["FFDC"]="AVSBUS_CMD_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3839abbc:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_VOLTAGE_TIMEOUT"
        d["FFDC"]="CRC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0f8847fb:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_VOLTAGE_TIMEOUT"
        d["FFDC"]="AVSBUS_OP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdeeb772a:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_IDLEFRAME_TIMEOUT"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x220b4785:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_IDLEFRAME_TIMEOUT"
        d["FFDC"]="AVSBUS_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7b49977d:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_IDLEFRAME_TIMEOUT"
        d["FFDC"]="AVSBUS_BRIDGE_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd7dfff81:
        d["HwpReturnCode"]="RC_PM_AVSBUS_ZERO_RESP_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe32746c8:
        d["HwpReturnCode"]="RC_PM_AVSBUS_ZERO_RESP_ERROR"
        d["FFDC"]="BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe779b06c:
        d["HwpReturnCode"]="RC_PM_AVSBUS_ZERO_RESP_ERROR"
        d["FFDC"]="BRIDGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x79405cc0:
        d["HwpReturnCode"]="RC_PM_AVSBUS_ZERO_RESP_ERROR"
        d["FFDC"]="ROOT_CTRL1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xad9dd737:
        d["HwpReturnCode"]="RC_PM_AVSBUS_NO_RESP_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2f443266:
        d["HwpReturnCode"]="RC_PM_AVSBUS_NO_RESP_ERROR"
        d["FFDC"]="BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd3f0129c:
        d["HwpReturnCode"]="RC_PM_AVSBUS_NO_RESP_ERROR"
        d["FFDC"]="BRIDGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd20c8357:
        d["HwpReturnCode"]="RC_PM_AVSBUS_NO_RESP_ERROR"
        d["FFDC"]="ROOT_CTRL1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5694f6ff:
        d["HwpReturnCode"]="RC_PM_AVSBUS_MASTER_BAD_CRC_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc22f982f:
        d["HwpReturnCode"]="RC_PM_AVSBUS_MASTER_BAD_CRC_ERROR"
        d["FFDC"]="BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x320e91b2:
        d["HwpReturnCode"]="RC_PM_AVSBUS_MASTER_BAD_CRC_ERROR"
        d["FFDC"]="BRIDGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xab8e2b88:
        d["HwpReturnCode"]="RC_PM_AVSBUS_SLAVE_BAD_CRC_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x54d47792:
        d["HwpReturnCode"]="RC_PM_AVSBUS_SLAVE_BAD_CRC_ERROR"
        d["FFDC"]="BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3407f420:
        d["HwpReturnCode"]="RC_PM_AVSBUS_SLAVE_BAD_CRC_ERROR"
        d["FFDC"]="BRIDGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4c526c3b:
        d["HwpReturnCode"]="RC_PM_AVSBUS_UNAVAILABLE_RESOURCE_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4d6d4384:
        d["HwpReturnCode"]="RC_PM_AVSBUS_UNAVAILABLE_RESOURCE_ERROR"
        d["FFDC"]="BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9fc5be4d:
        d["HwpReturnCode"]="RC_PM_AVSBUS_UNAVAILABLE_RESOURCE_ERROR"
        d["FFDC"]="BRIDGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x229a57da:
        d["HwpReturnCode"]="RC_PM_AVSBUS_INVALID_DATA_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x88fd4ebd:
        d["HwpReturnCode"]="RC_PM_AVSBUS_INVALID_DATA_ERROR"
        d["FFDC"]="BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfd1307f4:
        d["HwpReturnCode"]="RC_PM_AVSBUS_INVALID_DATA_ERROR"
        d["FFDC"]="BRIDGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4917458c:
        d["HwpReturnCode"]="RC_SET_ATOMIC_LOCK_BUSY"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x617ebca4:
        d["HwpReturnCode"]="RC_SET_ATOMIC_LOCK_BUSY"
        d["FFDC"]="DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x99409e21:
        d["HwpReturnCode"]="RC_SET_ATOMIC_LOCK_FAIL"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd3123e7d:
        d["HwpReturnCode"]="RC_SET_ATOMIC_LOCK_FAIL"
        d["FFDC"]="DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1f59e39e:
        d["HwpReturnCode"]="RC_ATOMIC_LOCK_OWNER_ID_INVALID"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf5100a53:
        d["HwpReturnCode"]="RC_ATOMIC_LOCK_OWNER_ID_INVALID"
        d["FFDC"]="ACTUAL_LOCK_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x03f08ae0:
        d["HwpReturnCode"]="RC_ATOMIC_LOCK_OWNER_ID_INVALID"
        d["FFDC"]="EXPECTED_LOCK_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x528240e6:
        d["HwpReturnCode"]="RC_PM_OCBINIT_BAD_MODE"
        d["FFDC"]="BADMODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x39a60862:
        d["HwpReturnCode"]="RC_PM_OCBINIT_BAD_Q_LENGTH_PARM"
        d["FFDC"]="BADQLENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xda567d50:
        d["HwpReturnCode"]="RC_PM_OCBINIT_BAD_Q_LENGTH_PARM"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf6660b02:
        d["HwpReturnCode"]="RC_PM_OCBINIT_BAD_Q_LENGTH_PARM"
        d["FFDC"]="TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe493cae7:
        d["HwpReturnCode"]="RC_P10_RAM_THREAD_INVALID_ERR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf4f6e4d0:
        d["HwpReturnCode"]="RC_P10_RAM_THREAD_INVALID_ERR"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x841b42b8:
        d["HwpReturnCode"]="RC_P10_SPR_NAME_MAP_ACCESS_ERR"
        d["FFDC"]="REGNAME"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x314799e5:
        d["HwpReturnCode"]="RC_P10_RAM_NOT_SETUP_ERR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x165b280c:
        d["HwpReturnCode"]="RC_P10_RAM_NOT_SETUP_ERR"
        d["FFDC"]="REG_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x31348ebc:
        d["HwpReturnCode"]="RC_P10_RAM_NOT_SETUP_ERR"
        d["FFDC"]="REG_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x609f1b10:
        d["HwpReturnCode"]="RC_P10_RAM_NOT_SETUP_ERR"
        d["FFDC"]="ALLOW_MULT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x625ef635:
        d["HwpReturnCode"]="RC_P10_RAM_INACTIVE_THREAD_HW542214"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x12ed2ff4:
        d["HwpReturnCode"]="RC_P10_RAM_INACTIVE_THREAD_HW542214"
        d["FFDC"]="REG_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd2db6fcb:
        d["HwpReturnCode"]="RC_P10_RAM_INACTIVE_THREAD_HW542214"
        d["FFDC"]="REG_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x17989c0f:
        d["HwpReturnCode"]="RC_P10_RAM_INACTIVE_THREAD_HW542214"
        d["FFDC"]="ALLOW_MULT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x567cfa5d:
        d["HwpReturnCode"]="RC_P10_RAM_THREAD_NOT_STOP_ERR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3e39140b:
        d["HwpReturnCode"]="RC_P10_RAM_THREAD_NOT_STOP_ERR"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x40999f2e:
        d["HwpReturnCode"]="RC_P10_RAM_THREAD_INACTIVE_ERR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5063cde2:
        d["HwpReturnCode"]="RC_P10_RAM_THREAD_INACTIVE_ERR"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xecba04d0:
        d["HwpReturnCode"]="RC_P10_RAM_STATUS_IN_RECOVERY_ERR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x352fdc08:
        d["HwpReturnCode"]="RC_P10_RAM_STATUS_EXCEPTION_ERR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x835f8d65:
        d["HwpReturnCode"]="RC_P10_RAM_STATUS_POLL_THRESHOLD_ERR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x257140ce:
        d["HwpReturnCode"]="RC_P10_RAM_STATUS_POLL_THRESHOLD_ERR"
        d["FFDC"]="C_RAM_STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x654561ca:
        d["HwpReturnCode"]="RC_P10_RAM_INVALID_REG_TYPE_ACCESS_ERR"
        d["FFDC"]="REGTYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x549fd384:
        d["HwpReturnCode"]="RC_P10_RAM_TEST_ECMD_ERROR"
        d["FFDC"]="ECMD_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc8565967:
        d["HwpReturnCode"]="RC_P10_RAM_TEST_GENERAL_ERROR"
        d["FFDC"]="LINE_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x436650c4:
        d["HwpReturnCode"]="RC_P10_RAM_HW533775_FUSED_CORE_SEARCH_ERROR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x530f1ef9:
        d["HwpReturnCode"]="RC_P10_RAM_HW533775_FUSED_CORE_SEARCH_ERROR"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9cfa4982:
        d["HwpReturnCode"]="RC_P10_RAM_HW533775_RECOVERY_ERROR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x38937698:
        d["HwpReturnCode"]="RC_P10_RAM_HW533775_RECOVERY_ERROR"
        d["FFDC"]="CORE_FIR_POLL_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbd8baabb:
        d["HwpReturnCode"]="RC_P10_RAM_HW533775_RECOVERY_ERROR"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x37a3991d:
        d["HwpReturnCode"]="RC_P10_RAM_HW533775_RECOVERY_ERROR"
        d["FFDC"]="CORE_FIR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbe004641:
        d["HwpReturnCode"]="RC_P10_RAM_HW533775_RECOVERY_ERROR"
        d["FFDC"]="HID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf07ed0bd:
        d["Register FFDC"]="REG_FFDC_RAM_CORE_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::c::EC_PC_THRCTL_TCTLCOM_RAS_STATUS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::c::EC_PC_FIR_RAM_MODEREG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::c::EC_PC_FIR_RAM_CTRL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::c::EC_PC_FIR_RAM_STATUS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::c::EC_PC_THRCTL_TCTLCOM_HOLD_OUT",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::c::EC_PC_FIR_HOLD_OUT",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::c::EC_PC_PMC_THREAD_INFO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x22ab56b3:
        d["HwpReturnCode"]="RC_OCC_CONTROL_NONSTART_DUE_TO_RISCWATCH"
        d["FFDC"]="JTAGCFG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x898b2d84:
        d["HwpReturnCode"]="RC_OCC_CONTROL_NONSTART_DUE_TO_RISCWATCH"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xda34c34c:
        d["HwpReturnCode"]="RC_OCC_CONTROL_MEM_BOOT_LENGTH_MISMATCH"
        d["FFDC"]="ACTLENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd42d26ed:
        d["HwpReturnCode"]="RC_OCC_CONTROL_MEM_BOOT_LENGTH_MISMATCH"
        d["FFDC"]="LENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc38debf1:
        d["HwpReturnCode"]="RC_P10_LOAD_IOP_XRAM_HW_IMG_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x57497cec:
        d["HwpReturnCode"]="RC_P10_LOAD_IOP_XRAM_HW_IMG_ERROR"
        d["FFDC"]="HW_IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x00f7958d:
        d["HwpReturnCode"]="RC_P10_LOAD_IOP_XRAM_IMG_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdb950dbf:
        d["HwpReturnCode"]="RC_P10_LOAD_IOP_XRAM_IMG_ERROR"
        d["FFDC"]="HW_IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2d6737b1:
        d["HwpReturnCode"]="RC_P10_LOAD_IOP_XRAM_IMG_ERROR"
        d["FFDC"]="XRAM_IMAGE_PTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4d99b98c:
        d["HwpReturnCode"]="RC_P10_LOAD_IOP_XRAM_IMG_ERROR"
        d["FFDC"]="XRAM_FW_DATA_PTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5a56c50d:
        d["HwpReturnCode"]="RC_P10_LOAD_IOP_XRAM_IMG_ERROR"
        d["FFDC"]="XRAM_FW_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8d76b729:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_INIT_TIMEOUT_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa535ea14:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_INIT_TIMEOUT_ERROR"
        d["FFDC"]="TOP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcaa74f61:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_INIT_TIMEOUT_ERROR"
        d["FFDC"]="ARRAY_MODE_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x282e6c35:
        d["HwpReturnCode"]="RC_BAD_POUNDW_VPD_READ"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x83c0a8c7:
        d["HwpReturnCode"]="RC_BAD_POUNDW_VPD_READ"
        d["FFDC"]="EXPECTED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd9de3735:
        d["HwpReturnCode"]="RC_BAD_POUNDW_VPD_READ"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4d701f6b:
        d["HwpReturnCode"]="RC_INVALID_POUNDW_VERSION"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x63ca54c8:
        d["HwpReturnCode"]="RC_INVALID_POUNDW_VERSION"
        d["FFDC"]="POUNDW_VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbb557e85:
        d["HwpReturnCode"]="RC_INCORRECT_POUNDW_BUCKET_ID"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc6608230:
        d["HwpReturnCode"]="RC_INCORRECT_POUNDW_BUCKET_ID"
        d["FFDC"]="BUCKET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbe913d8f:
        d["HwpReturnCode"]="RC_INCORRECT_POUNDW_BUCKET_ID"
        d["FFDC"]="EXP_BUCKET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcbf38adb:
        d["HwpReturnCode"]="RC_SB_MSG_SET_POLL_THRESHOLD_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb2023a9c:
        d["HwpReturnCode"]="RC_SB_MSG_SET_POLL_THRESHOLD_ERR"
        d["FFDC"]="MAILBOX_MSG_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6f8774bd:
        d["HwpReturnCode"]="RC_SB_MSG_SET_POLL_THRESHOLD_ERR"
        d["FFDC"]="LOOP_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x38555650:
        d["HwpReturnCode"]="RC_SB_MSG_SET_POLL_THRESHOLD_ERR"
        d["FFDC"]="HW_DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0f4df46e:
        d["HwpReturnCode"]="RC_HTM_SETUP_PROC_BAR_SIZE"
        d["FFDC"]="PROC_BAR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcb7bb024:
        d["HwpReturnCode"]="RC_P10_NHTM_CTRL_BAD_STATE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0eb598d9:
        d["HwpReturnCode"]="RC_P10_NHTM_CTRL_BAD_STATE"
        d["FFDC"]="HTM_STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x88732cee:
        d["HwpReturnCode"]="RC_P10_CHTM_CTRL_BAD_STATE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4cae8efa:
        d["HwpReturnCode"]="RC_P10_CHTM_CTRL_BAD_STATE"
        d["FFDC"]="HTM_STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf12723b1:
        d["HwpReturnCode"]="RC_P10_NHTM_CTRL_TIMEOUT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa1f0cd04:
        d["HwpReturnCode"]="RC_P10_NHTM_CTRL_TIMEOUT"
        d["FFDC"]="DELAY_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0a909253:
        d["HwpReturnCode"]="RC_P10_NHTM_CTRL_TIMEOUT"
        d["FFDC"]="HTM_STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7c673bd5:
        d["HwpReturnCode"]="RC_NHTM_TRACE_TYPE_NOT_SUPPORTED"
        d["FFDC"]="NHTM_TRACE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xabf278dd:
        d["HwpReturnCode"]="RC_CHTM_TRACE_TYPE_NOT_SUPPORTED"
        d["FFDC"]="CORE_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc430ffa7:
        d["HwpReturnCode"]="RC_CHTM_TRACE_TYPE_NOT_SUPPORTED"
        d["FFDC"]="CHTM_TRACE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe0bb89bd:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="FIR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5eb6fb02:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="CONFIG_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3a2bc89c:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="CONTROL_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbb3497a8:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="CONFIG_PHY_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd7d5ac26:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="SECONDARY_CONFIG_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf6cf9b3e:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="LATENCY_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x54a3b6ba:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="OPTICAL_CONFIG_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xeb832309:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="TX0_LANE_CONTROL_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd2393fd6:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="TX1_LANE_CONTROL_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x60ae5737:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="RX0_LANE_CONTROL_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x02d10eea:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="RX1_LANE_CONTROL_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb9e3a960:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="ERR0_STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0c5f00d0:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="ERR1_STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1342fbbd:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x830b290f:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="ERR_MISC_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7f2fe0d8:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FFDC_ERR"
        d["FFDC"]="FIR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9a0b9fd9:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FFDC_ERR"
        d["FFDC"]="CONFIG01_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5fe854c9:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FFDC_ERR"
        d["FFDC"]="CONFIG23_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc7688707:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FFDC_ERR"
        d["FFDC"]="MISC_CONFIG_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x680a7b60:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FFDC_ERR"
        d["FFDC"]="FRAMER0123_ERR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x69f58f9b:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FFDC_ERR"
        d["FFDC"]="PARSER0123_ERR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa43b9830:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_REM_ENDP_TARGET_ERR"
        d["FFDC"]="LOC_ENDP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x15b426c5:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_ENDP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x09320996:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_LINK_TRAIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8295dbae:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_LINK_TRAIN_NEXT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcea843eb:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_LINK_FAILED0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xeca232ad:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_LINK_FAILED1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe86b6517:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="REM_ENDP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5281291a:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="LOC_ENDP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xab151582:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="LOC_LINK_TRAIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x365702c7:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="LOC_LINK_TRAIN_NEXT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x947fb16f:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="LOC_LINK_FAILED0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x93779c01:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="LOC_LINK_FAILED1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfb5e7b2c:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="REM_ENDP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd021f42f:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_NOT_TRAINED_ERR"
        d["FFDC"]="LOC_LINK_TRAIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5128289f:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_NOT_TRAINED_ERR"
        d["FFDC"]="REM_ENDP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x46ca8463:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_INVALID_BUS"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf02bc20c:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_INVALID_BUS"
        d["FFDC"]="TRACE_BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x20a50eff:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_INVALID_TARGET"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x92064af5:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_INVALID_TARGET"
        d["FFDC"]="TRACE_BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9863ccc3:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_INVALID_TARGET"
        d["FFDC"]="REQUIRED_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf5018ab9:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_CORE_NOT_DUMPABLE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x647ed359:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_CORE_NOT_DUMPABLE"
        d["FFDC"]="TRACE_BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x28425dd2:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_TRACE_RUNNING"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x76325830:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_TRACE_RUNNING"
        d["FFDC"]="TRACE_BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x62566718:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_TRACE_MUX_INCORRECT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3867911d:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_TRACE_MUX_INCORRECT"
        d["FFDC"]="TRACE_BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb973ac6d:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_TRACE_MUX_INCORRECT"
        d["FFDC"]="MUX_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5be48c87:
        d["HwpReturnCode"]="RC_P10_L2_FLUSH_PURGE_REQ_OUTSTANDING"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa8c00a18:
        d["HwpReturnCode"]="RC_P10_L2_FLUSH_PURGE_REQ_OUTSTANDING"
        d["FFDC"]="COUNT_THRESHOLD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcfe252de:
        d["HwpReturnCode"]="RC_P10_L2_FLUSH_PURGE_REQ_OUTSTANDING"
        d["FFDC"]="CMD_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf0fbb8db:
        d["HwpReturnCode"]="RC_P10_PURGE_CMD_REG_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xee899d8f:
        d["HwpReturnCode"]="RC_P10_PURGE_CMD_REG_ERR"
        d["FFDC"]="CMD_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe40c292a:
        d["HwpReturnCode"]="RC_P10_PURGE_COMPLETE_TIMEOUT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4fba3f3f:
        d["HwpReturnCode"]="RC_P10_PURGE_COMPLETE_TIMEOUT"
        d["FFDC"]="CMD_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb034bb6d:
        d["HwpReturnCode"]="RC_P10_PURGE_COMPLETE_TIMEOUT"
        d["FFDC"]="COUNT_THRESHOLD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4c622f4f:
        d["Register FFDC"]="REG_FFDC_PROC_L2_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x1dd86d03:
        d["HwpReturnCode"]="RC_P10_L3_FLUSH_INVALID_ARGS_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4007dd60:
        d["HwpReturnCode"]="RC_P10_L3_FLUSH_INVALID_ARGS_ERR"
        d["FFDC"]="PURGETYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4bedc941:
        d["HwpReturnCode"]="RC_P10_L3_FLUSH_INVALID_ARGS_ERR"
        d["FFDC"]="PURGEADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf06f3fde:
        d["HwpReturnCode"]="RC_P10_L3_FLUSH_PREVIOUS_PURGE_ACTIVE_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8d16982f:
        d["HwpReturnCode"]="RC_P10_L3_FLUSH_PREVIOUS_PURGE_ACTIVE_ERR"
        d["FFDC"]="PURGEREG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x205600bd:
        d["HwpReturnCode"]="RC_P10_L3_FLUSH_PURGE_REQ_TIMEOUT_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8df3315f:
        d["HwpReturnCode"]="RC_P10_L3_FLUSH_PURGE_REQ_TIMEOUT_ERR"
        d["FFDC"]="PURGETYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x921ceb77:
        d["HwpReturnCode"]="RC_P10_L3_FLUSH_PURGE_REQ_TIMEOUT_ERR"
        d["FFDC"]="PURGEADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x390cca1e:
        d["HwpReturnCode"]="RC_P10_L3_FLUSH_PURGE_REQ_TIMEOUT_ERR"
        d["FFDC"]="L3_PRD_PURGE_REG_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb5c94d5b:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_DIFF_GROUP_ID_ERR"
        d["FFDC"]="LOC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2d5f0ce0:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_DIFF_GROUP_ID_ERR"
        d["FFDC"]="REM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6a97c8db:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_DIFF_GROUP_ID_ERR"
        d["FFDC"]="LOC_FBC_GROUP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2c4608af:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_DIFF_GROUP_ID_ERR"
        d["FFDC"]="REM_FBC_GROUP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2e5314a9:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_DIFF_GROUP_ID_ERR"
        d["FFDC"]="LOC_FBC_CHIP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xefff36fe:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_DIFF_GROUP_ID_ERR"
        d["FFDC"]="REM_FBC_CHIP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9d8f861b:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_SAME_GROUP_ID_ERR"
        d["FFDC"]="LOC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8265090b:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_SAME_GROUP_ID_ERR"
        d["FFDC"]="REM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3e8decfd:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_SAME_GROUP_ID_ERR"
        d["FFDC"]="LOC_FBC_GROUP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa4fc6bc9:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_SAME_GROUP_ID_ERR"
        d["FFDC"]="REM_FBC_GROUP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9264bc92:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_SAME_GROUP_ID_ERR"
        d["FFDC"]="LOC_FBC_CHIP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3df74917:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_SAME_GROUP_ID_ERR"
        d["FFDC"]="REM_FBC_CHIP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcfe8cac4:
        d["HwpReturnCode"]="RC_SBE_SCAN0_DONE_POLL_THRESHOLD_ERR"
        d["FFDC"]="PERV_CPLT_STAT0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x57c9ce9b:
        d["HwpReturnCode"]="RC_SBE_SCAN0_DONE_POLL_THRESHOLD_ERR"
        d["FFDC"]="LOOP_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5a008583:
        d["HwpReturnCode"]="RC_SBE_SCAN0_DONE_POLL_THRESHOLD_ERR"
        d["FFDC"]="HW_DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9b2d7588:
        d["HwpReturnCode"]="RC_SBE_ARRAYINIT_POLL_THRESHOLD_ERR"
        d["FFDC"]="PERV_CPLT_STAT0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe507ea85:
        d["HwpReturnCode"]="RC_SBE_ARRAYINIT_POLL_THRESHOLD_ERR"
        d["FFDC"]="LOOP_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa0fbd696:
        d["HwpReturnCode"]="RC_SBE_ARRAYINIT_POLL_THRESHOLD_ERR"
        d["FFDC"]="HW_DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x70120fea:
        d["HwpReturnCode"]="RC_SRAM_ABIST_DONE_BIT_ERR"
        d["FFDC"]="PERV_CPLT_STAT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x666da6db:
        d["HwpReturnCode"]="RC_SRAM_ABIST_DONE_BIT_ERR"
        d["FFDC"]="SELECT_SRAM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x417d1340:
        d["HwpReturnCode"]="RC_SRAM_ABIST_DONE_BIT_ERR"
        d["FFDC"]="READ_ABIST_DONE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4c43d154:
        d["HwpReturnCode"]="RC_CPLT_OPCG_DONE_NOT_SET_ERR"
        d["FFDC"]="PERV_CPLT_STAT0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x49e70815:
        d["HwpReturnCode"]="RC_CPLT_OPCG_DONE_NOT_SET_ERR"
        d["FFDC"]="LOOP_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc3325b1b:
        d["HwpReturnCode"]="RC_CPLT_OPCG_DONE_NOT_SET_ERR"
        d["FFDC"]="HW_DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x465da2f0:
        d["HwpReturnCode"]="RC_THOLD_ERR"
        d["FFDC"]="CLOCK_CMD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xec295d58:
        d["HwpReturnCode"]="RC_THOLD_ERR"
        d["FFDC"]="CLOCK_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd488ed53:
        d["HwpReturnCode"]="RC_THOLD_ERR"
        d["FFDC"]="REGIONS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x09c2aa2a:
        d["HwpReturnCode"]="RC_THOLD_ERR"
        d["FFDC"]="READ_CLK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb6697713:
        d["HwpReturnCode"]="RC_MC_GROUP_SETUP_ERR"
        d["FFDC"]="CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2eae25f0:
        d["HwpReturnCode"]="RC_CPLT_NOT_ALIGNED_ERR"
        d["FFDC"]="PERV_CPLT_STAT0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xad8789a2:
        d["HwpReturnCode"]="RC_CPLT_NOT_ALIGNED_ERR"
        d["FFDC"]="LOOP_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6295b95c:
        d["HwpReturnCode"]="RC_CPLT_NOT_ALIGNED_ERR"
        d["FFDC"]="HW_DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xaf4d4966:
        d["HwpReturnCode"]="RC_XIPC_BAD_PG_XLATE"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8c896f0b:
        d["HwpReturnCode"]="RC_XIPC_BAD_PG_XLATE"
        d["FFDC"]="CHIP_UNIT_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x14bd7bce:
        d["HwpReturnCode"]="RC_XIPC_BAD_PG_XLATE"
        d["FFDC"]="PG_INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x23a46535:
        d["HwpReturnCode"]="RC_XIPC_BAD_PG_XLATE"
        d["FFDC"]="IMG_PG_ENTRIES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd30f7c7b:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_PTR_PARM"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfdade58d:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_PTR_PARM"
        d["FFDC"]="SYSPHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5c96181e:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_PTR_PARM"
        d["FFDC"]="HW_IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc2405139:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_PTR_PARM"
        d["FFDC"]="IMAGE_BUF"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x41b76309:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_PTR_PARM"
        d["FFDC"]="RING_SECTION_BUF"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1ad51086:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_PTR_PARM"
        d["FFDC"]="RING_BUF1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5476021e:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_PTR_PARM"
        d["FFDC"]="RING_BUF2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf70a26e9:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_PTR_PARM"
        d["FFDC"]="RING_BUF3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4a98d32a:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_SIZE_PARM"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa3c4d31c:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_SIZE_PARM"
        d["FFDC"]="SYSPHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x18b8a453:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_SIZE_PARM"
        d["FFDC"]="INPUT_IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x22e247c0:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_SIZE_PARM"
        d["FFDC"]="IMAGE_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7d423052:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_SIZE_PARM"
        d["FFDC"]="RING_SECTION_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x69adb24f:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_SIZE_PARM"
        d["FFDC"]="RING_BUF_SIZE1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xefbea318:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_SIZE_PARM"
        d["FFDC"]="RING_BUF_SIZE2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5ed45675:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_SIZE_PARM"
        d["FFDC"]="RING_BUF_SIZE3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf71a3f6d:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_SIZE_PARM"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5b9d4836:
        d["HwpReturnCode"]="RC_XIPC_INVALID_SYSPHASE_PARM"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6c276d75:
        d["HwpReturnCode"]="RC_XIPC_INVALID_SYSPHASE_PARM"
        d["FFDC"]="SYSPHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2d1bc037:
        d["HwpReturnCode"]="RC_XIPC_INVALID_SYSPHASE_PARM"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb7846d60:
        d["HwpReturnCode"]="RC_XIPC_ATTR_MAX_SBE_SEEPROM_SIZE_TOO_SMALL"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd148bf26:
        d["HwpReturnCode"]="RC_XIPC_ATTR_MAX_SBE_SEEPROM_SIZE_TOO_SMALL"
        d["FFDC"]="ATTR_MAX_SBE_SEEPROM_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3a269449:
        d["HwpReturnCode"]="RC_XIPC_ATTR_MAX_SBE_SEEPROM_SIZE_TOO_SMALL"
        d["FFDC"]="MAX_SBE_SEEPROM_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4b3f9753:
        d["HwpReturnCode"]="RC_XIPC_INVALID_MVPD_RINGCLASS"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3874e21d:
        d["HwpReturnCode"]="RC_XIPC_INVALID_MVPD_RINGCLASS"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x13f5bc6b:
        d["HwpReturnCode"]="RC_XIPC_INVALID_MVPD_RINGCLASS"
        d["FFDC"]="RING_CLASS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6c4bffe1:
        d["HwpReturnCode"]="RC_XIPC_INVALID_MVPD_RINGCLASS"
        d["FFDC"]="KWD_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa4c4137b:
        d["HwpReturnCode"]="RC_XIPC_MVPD_CHIPLET_ID_MESS"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb7fd4de4:
        d["HwpReturnCode"]="RC_XIPC_MVPD_CHIPLET_ID_MESS"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdbc665ca:
        d["HwpReturnCode"]="RC_XIPC_MVPD_CHIPLET_ID_MESS"
        d["FFDC"]="CHIPLET_SEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc635b60c:
        d["HwpReturnCode"]="RC_XIPC_MVPD_CHIPLET_ID_MESS"
        d["FFDC"]="MVPD_CHIPLET_SEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc2ff07f0:
        d["HwpReturnCode"]="RC_XIPC_MVPD_RING_SIZE_TOO_BIG"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9ee5d976:
        d["HwpReturnCode"]="RC_XIPC_MVPD_RING_SIZE_TOO_BIG"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbf3d4f32:
        d["HwpReturnCode"]="RC_XIPC_MVPD_RING_SIZE_TOO_BIG"
        d["FFDC"]="CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xba327795:
        d["HwpReturnCode"]="RC_XIPC_MVPD_RING_SIZE_TOO_BIG"
        d["FFDC"]="RING_BUFFER_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x655d85e2:
        d["HwpReturnCode"]="RC_XIPC_MVPD_RING_SIZE_TOO_BIG"
        d["FFDC"]="MVPD_RING_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xda751cac:
        d["HwpReturnCode"]="RC_XIPC_MVPD_INVALID_RECORD_DATA"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa5fd8650:
        d["HwpReturnCode"]="RC_XIPC_MVPD_INVALID_RECORD_DATA"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9f19b1ae:
        d["HwpReturnCode"]="RC_XIPC_MVPD_INVALID_RECORD_DATA"
        d["FFDC"]="CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd57e20a3:
        d["HwpReturnCode"]="RC_XIPC_MVPD_FIELD_SIZE_MESS"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xda5e2e79:
        d["HwpReturnCode"]="RC_XIPC_MVPD_FIELD_SIZE_MESS"
        d["FFDC"]="MVPD_FIELD_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd2ba91fa:
        d["HwpReturnCode"]="RC_XIPC_MVPD_FIELD_SIZE_MESS"
        d["FFDC"]="EXPECTED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6eeca149:
        d["HwpReturnCode"]="RC_XIPC_MVPD_AW_FIELD_VALUE_ERR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8af6516a:
        d["HwpReturnCode"]="RC_XIPC_MVPD_AW_FIELD_VALUE_ERR"
        d["FFDC"]="MVPD_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x84eaa61c:
        d["HwpReturnCode"]="RC_XIPC_RS4_REDUNDANT_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xba7d1170:
        d["HwpReturnCode"]="RC_XIPC_RS4_REDUNDANT_ERROR"
        d["FFDC"]="LOCAL_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5a5052e1:
        d["HwpReturnCode"]="RC_XIPC_RS4_REDUNDANT_ERROR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x97412b0a:
        d["HwpReturnCode"]="RC_XIPC_RS4_REDUNDANT_ERROR"
        d["FFDC"]="CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7c7a0222:
        d["HwpReturnCode"]="RC_XIPC_RS4_REDUNDANT_ERROR"
        d["FFDC"]="REDUNDANT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa93fa31e:
        d["HwpReturnCode"]="RC_XIPC_RS4_REDUNDANT_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7ec631e4:
        d["HwpReturnCode"]="RC_XIPC_RINGID_RINGPROPS_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd66bfe5a:
        d["HwpReturnCode"]="RC_XIPC_RINGID_RINGPROPS_ERROR"
        d["FFDC"]="LOCAL_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3b5ce121:
        d["HwpReturnCode"]="RC_XIPC_RINGID_RINGPROPS_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x573cdd60:
        d["HwpReturnCode"]="RC_XIPC_RINGID_CHIPLETPROPS_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xde7bafce:
        d["HwpReturnCode"]="RC_XIPC_RINGID_CHIPLETPROPS_ERROR"
        d["FFDC"]="LOCAL_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf6cbf01f:
        d["HwpReturnCode"]="RC_XIPC_RINGID_CHIPLETPROPS_ERROR"
        d["FFDC"]="TOR_MAGIC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x49052998:
        d["HwpReturnCode"]="RC_XIPC_RINGID_CHIPLETPROPS_ERROR"
        d["FFDC"]="TOR_VER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc58fb84d:
        d["HwpReturnCode"]="RC_XIPC_RINGID_CHIPLETPROPS_ERROR"
        d["FFDC"]="CHIPLET_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x26566288:
        d["HwpReturnCode"]="RC_XIPC_RINGID_CHIPLETPROPS_ERROR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc70329ca:
        d["HwpReturnCode"]="RC_XIPC_RINGID_CHIPLETPROPS_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf610fc1a:
        d["HwpReturnCode"]="RC_XIPC_RINGID_CHECK_RINGID_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa23e81c9:
        d["HwpReturnCode"]="RC_XIPC_RINGID_CHECK_RINGID_ERROR"
        d["FFDC"]="LOCAL_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbd3ed83d:
        d["HwpReturnCode"]="RC_XIPC_RINGID_CHECK_RINGID_ERROR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xde3cc36b:
        d["HwpReturnCode"]="RC_XIPC_RINGID_CHECK_RINGID_ERROR"
        d["FFDC"]="CHIP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbddc07d6:
        d["HwpReturnCode"]="RC_XIPC_RINGID_CHECK_RINGID_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa4eb7e4e:
        d["HwpReturnCode"]="RC_XIPC_TOR_APPEND_RING_FAILED"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3ac243ee:
        d["HwpReturnCode"]="RC_XIPC_TOR_APPEND_RING_FAILED"
        d["FFDC"]="TOR_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x57c4f989:
        d["HwpReturnCode"]="RC_XIPC_TOR_APPEND_RING_FAILED"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x997a490d:
        d["HwpReturnCode"]="RC_XIPC_TOR_APPEND_RING_FAILED"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x613bf8c0:
        d["HwpReturnCode"]="RC_XIPC_SECTION_REMOVAL_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc1f28cde:
        d["HwpReturnCode"]="RC_XIPC_SECTION_REMOVAL_ERROR"
        d["FFDC"]="XIP_SECTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xeed30e94:
        d["HwpReturnCode"]="RC_XIPC_XIP_GET_SECTION_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8e0fc4f9:
        d["HwpReturnCode"]="RC_XIPC_XIP_GET_SECTION_ERROR"
        d["FFDC"]="XIP_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xac351a98:
        d["HwpReturnCode"]="RC_XIPC_XIP_GET_SECTION_ERROR"
        d["FFDC"]="SECTION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfab05561:
        d["HwpReturnCode"]="RC_XIPC_XIP_GET_SECTION_ERROR"
        d["FFDC"]="SECTION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8183c73b:
        d["HwpReturnCode"]="RC_XIPC_XIP_GET_SECTION_ERROR"
        d["FFDC"]="DDLEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcdd04039:
        d["HwpReturnCode"]="RC_XIPC_XIP_GET_SECTION_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0bc9d40e:
        d["HwpReturnCode"]="RC_XIPC_XIP_APPEND_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3f9c01e4:
        d["HwpReturnCode"]="RC_XIPC_XIP_APPEND_ERROR"
        d["FFDC"]="XIP_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x897d88c7:
        d["HwpReturnCode"]="RC_XIPC_XIP_APPEND_ERROR"
        d["FFDC"]="SECTION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2f382fda:
        d["HwpReturnCode"]="RC_XIPC_XIP_APPEND_ERROR"
        d["FFDC"]="MAX_IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xff270388:
        d["HwpReturnCode"]="RC_XIPC_XIP_APPEND_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3f18b5c7:
        d["HwpReturnCode"]="RC_XIPC_XIP_API_MISC_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd6c4063b:
        d["HwpReturnCode"]="RC_XIPC_XIP_API_MISC_ERROR"
        d["FFDC"]="XIP_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb8ca464f:
        d["HwpReturnCode"]="RC_XIPC_XIP_API_MISC_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4af54185:
        d["HwpReturnCode"]="RC_XIPC_EMPTY_IMAGE_SECTION"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5eff6375:
        d["HwpReturnCode"]="RC_XIPC_EMPTY_IMAGE_SECTION"
        d["FFDC"]="SECTION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x53e94a66:
        d["HwpReturnCode"]="RC_XIPC_EMPTY_IMAGE_SECTION"
        d["FFDC"]="DDLEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x00d9677e:
        d["HwpReturnCode"]="RC_XIPC_EMPTY_IMAGE_SECTION"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x179c0f1a:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x47594932:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW"
        d["FFDC"]="CURRENT_RING_SECTION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xee17fc0d:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW"
        d["FFDC"]="SIZE_OF_THIS_RING"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x380a467b:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW"
        d["FFDC"]="MAX_RING_SECTION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb6283779:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7f257274:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW"
        d["FFDC"]="CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb2f68080:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW"
        d["FFDC"]="CURRENT_BOOT_CORE_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe8e2682c:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW_ADDL_INFO"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x798f2a51:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW_ADDL_INFO"
        d["FFDC"]="REQUESTED_BOOT_CORE_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xad3e5ff9:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW_ADDL_INFO"
        d["FFDC"]="CURRENT_BOOT_CORE_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x197de076:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW_BEFORE_REACHING_MIN_ECS"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x98cacd7d:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW_BEFORE_REACHING_MIN_ECS"
        d["FFDC"]="REQUESTED_BOOT_CORE_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x554f09f2:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW_BEFORE_REACHING_MIN_ECS"
        d["FFDC"]="CURRENT_BOOT_CORE_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6cf29c22:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW_BEFORE_REACHING_MIN_ECS"
        d["FFDC"]="MIN_REQD_ECS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x557b6341:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW_BEFORE_REACHING_MIN_ECS"
        d["FFDC"]="ACTUAL_EC_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7d964dbd:
        d["HwpReturnCode"]="RC_XIPC_RING_SECTION_SIZING"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x77e63916:
        d["HwpReturnCode"]="RC_XIPC_RING_SECTION_SIZING"
        d["FFDC"]="RING_SECTION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8e0a972c:
        d["HwpReturnCode"]="RC_XIPC_RING_SECTION_SIZING"
        d["FFDC"]="RING_SECTION_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xefa7b352:
        d["HwpReturnCode"]="RC_XIPC_RING_SECTION_SIZING"
        d["FFDC"]="MAX_RING_SECTION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6219cdac:
        d["HwpReturnCode"]="RC_XIPC_RING_SECTION_SIZING"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xee43e51b:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_SIZING"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbce77392:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_SIZING"
        d["FFDC"]="IMAGE_SIZE_WITHOUT_RINGS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdcd7a57e:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_SIZING"
        d["FFDC"]="RING_SECTION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbf85d114:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_SIZING"
        d["FFDC"]="MAX_IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd10b201c:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_TOO_LARGE"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x25d44dcb:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_TOO_LARGE"
        d["FFDC"]="IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3b5ee646:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_TOO_LARGE"
        d["FFDC"]="MAX_IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x32207e52:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_TOO_LARGE"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfdce1556:
        d["HwpReturnCode"]="RC_XIPC_FAPI_ATTR_SVC_FAIL"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xaf9c111b:
        d["HwpReturnCode"]="RC_XIPC_FAPI_ATTR_SVC_FAIL"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xea37338c:
        d["HwpReturnCode"]="RC_XIPC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd798f93e:
        d["HwpReturnCode"]="RC_XIPC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x56900573:
        d["HwpReturnCode"]="RC_XIPC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="DD_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3c6d45ac:
        d["HwpReturnCode"]="RC_XIPC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="LOCAL_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf3e5052e:
        d["HwpReturnCode"]="RC_XIPC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3f84d7bc:
        d["HwpReturnCode"]="RC_XIPC_RS4_OVERLAY_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x635b698f:
        d["HwpReturnCode"]="RC_XIPC_RS4_OVERLAY_ERROR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4075c4cf:
        d["HwpReturnCode"]="RC_XIPC_RS4_OVERLAY_ERROR"
        d["FFDC"]="LOCAL_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfba0ebe2:
        d["HwpReturnCode"]="RC_XIPC_RS4_OVERLAY_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6544c84c:
        d["HwpReturnCode"]="RC_XIPC_RS4_DECOMPRESS_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x49178157:
        d["HwpReturnCode"]="RC_XIPC_RS4_DECOMPRESS_ERROR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3a54e228:
        d["HwpReturnCode"]="RC_XIPC_RS4_DECOMPRESS_ERROR"
        d["FFDC"]="MAX_RING_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd5a1d449:
        d["HwpReturnCode"]="RC_XIPC_RS4_DECOMPRESS_ERROR"
        d["FFDC"]="LOCAL_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x62f679a6:
        d["HwpReturnCode"]="RC_XIPC_RS4_DECOMPRESS_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x951fd5bd:
        d["HwpReturnCode"]="RC_XIPC_TARGET_OVLY_RAW_RING_LENGTH_MISMATCH"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb497bc20:
        d["HwpReturnCode"]="RC_XIPC_TARGET_OVLY_RAW_RING_LENGTH_MISMATCH"
        d["FFDC"]="TARGET_RAW_RING_LENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb8bdfcf0:
        d["HwpReturnCode"]="RC_XIPC_TARGET_OVLY_RAW_RING_LENGTH_MISMATCH"
        d["FFDC"]="OVLY_RAW_RING_LENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8ed49846:
        d["HwpReturnCode"]="RC_XIPC_MVPD_OVLY_RING_HEADER_MISMATCH"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf6752b49:
        d["HwpReturnCode"]="RC_XIPC_MVPD_OVLY_RING_HEADER_MISMATCH"
        d["FFDC"]="MVPD_RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x54a592d8:
        d["HwpReturnCode"]="RC_XIPC_MVPD_OVLY_RING_HEADER_MISMATCH"
        d["FFDC"]="OVLY_RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf0f6fee3:
        d["HwpReturnCode"]="RC_XIPC_MVPD_OVLY_RING_HEADER_MISMATCH"
        d["FFDC"]="MVPD_SCAN_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x71eea426:
        d["HwpReturnCode"]="RC_XIPC_MVPD_OVLY_RING_HEADER_MISMATCH"
        d["FFDC"]="OVLY_SCAN_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbe98186a:
        d["HwpReturnCode"]="RC_XIPC_MVPD_OVLY_RING_HEADER_MISMATCH"
        d["FFDC"]="MVPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf8bb28d7:
        d["HwpReturnCode"]="RC_XIPC_MVPD_OVLY_RING_HEADER_MISMATCH"
        d["FFDC"]="OVLY_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2ac28373:
        d["HwpReturnCode"]="RC_XIPC_RS4_COMPRESS_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x90b87efa:
        d["HwpReturnCode"]="RC_XIPC_RS4_COMPRESS_ERROR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xed0fdec0:
        d["HwpReturnCode"]="RC_XIPC_RS4_COMPRESS_ERROR"
        d["FFDC"]="SCAN_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfa5822ae:
        d["HwpReturnCode"]="RC_XIPC_RS4_COMPRESS_ERROR"
        d["FFDC"]="LOCAL_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2bfb8aa1:
        d["HwpReturnCode"]="RC_XIPC_RS4_COMPRESS_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x84a4aa83:
        d["HwpReturnCode"]="RC_XIPC_INPUT_SBE_IMAGE_NONZERO_RINGS_SIZE"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x61c16409:
        d["HwpReturnCode"]="RC_XIPC_INPUT_SBE_IMAGE_NONZERO_RINGS_SIZE"
        d["FFDC"]="INPUT_RINGS_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd8f00e71:
        d["HwpReturnCode"]="RC_XIPC_DD_LEVEL_MISMATCH_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8e84a0aa:
        d["HwpReturnCode"]="RC_XIPC_DD_LEVEL_MISMATCH_ERROR"
        d["FFDC"]="ATTR_DDLEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x206ec732:
        d["HwpReturnCode"]="RC_XIPC_DD_LEVEL_MISMATCH_ERROR"
        d["FFDC"]="MVPD_DDLEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x172648a8:
        d["HwpReturnCode"]="RC_XIPC_DD_LEVEL_MISMATCH_ERROR"
        d["FFDC"]="MVPD_DDDATA1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8c372660:
        d["HwpReturnCode"]="RC_XIPC_DD_LEVEL_MISMATCH_ERROR"
        d["FFDC"]="MVPD_DDDATA2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf94eaafc:
        d["HwpReturnCode"]="RC_XIPC_DD_LEVEL_MISMATCH_ERROR"
        d["FFDC"]="MVPD_DDDATA3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9148076f:
        d["HwpReturnCode"]="RC_XIPC_DD_LEVEL_MISMATCH_ERROR"
        d["FFDC"]="MVPD_DDDATA4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3e4c4ffc:
        d["HwpReturnCode"]="RC_XIPC_DD_LEVEL_MISMATCH_ERROR"
        d["FFDC"]="MVPD_DDSIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x99d545f7:
        d["HwpReturnCode"]="RC_XIPC_CHIPNAME_MISMATCH_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8acef085:
        d["HwpReturnCode"]="RC_XIPC_CHIPNAME_MISMATCH_ERROR"
        d["FFDC"]="ATTR_NAME"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9eb9c933:
        d["HwpReturnCode"]="RC_XIPC_CHIPNAME_MISMATCH_ERROR"
        d["FFDC"]="MVPD_NAME"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8f25428a:
        d["HwpReturnCode"]="RC_XIPC_MVPD_DD_KEYWORD_VERSION_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2dcebca3:
        d["HwpReturnCode"]="RC_XIPC_MVPD_DD_KEYWORD_VERSION_ERROR"
        d["FFDC"]="MVPD_DD_KWD_VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd11fc57a:
        d["HwpReturnCode"]="RC_XIPC_MVPD_DD_KEYWORD_VERSION_ERROR"
        d["FFDC"]="MVPD_DDSIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1b762558:
        d["HwpReturnCode"]="RC_XIPC_SKELETON_GEN_FAILED"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf4ac3f50:
        d["HwpReturnCode"]="RC_XIPC_DYNAMIC_INIT_FAILED"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x72833d4f:
        d["HwpReturnCode"]="RC_XIPC_DYNAMIC_INIT_FAILED"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7fc39cf9:
        d["HwpReturnCode"]="RC_XIPC_DYNAMIC_NO_RINGS_FOUND"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xab7e90c5:
        d["HwpReturnCode"]="RC_XIPC_DYN_GET_RING_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb0e0fb22:
        d["HwpReturnCode"]="RC_XIPC_DYN_GET_RING_ERROR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x92e1ea08:
        d["HwpReturnCode"]="RC_XIPC_DYN_GET_RING_ERROR"
        d["FFDC"]="FEATURE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6ca59029:
        d["HwpReturnCode"]="RC_XIPC_DYN_GET_RING_ERROR"
        d["FFDC"]="MAX_RING_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3f9aa00d:
        d["HwpReturnCode"]="RC_XIPC_DYN_GET_RING_ERROR"
        d["FFDC"]="LOCAL_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x26a5fd9c:
        d["HwpReturnCode"]="RC_XIPC_TYPE_FIELD_MISMATCH"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xaae8109c:
        d["HwpReturnCode"]="RC_XIPC_TYPE_FIELD_MISMATCH"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb553645a:
        d["HwpReturnCode"]="RC_XIPC_TYPE_FIELD_MISMATCH"
        d["FFDC"]="RING1_TYPE_FIELD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcf3cb323:
        d["HwpReturnCode"]="RC_XIPC_TYPE_FIELD_MISMATCH"
        d["FFDC"]="RING2_TYPE_FIELD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa6f5d190:
        d["HwpReturnCode"]="RC_XIPC_TYPE_FIELD_MISMATCH"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x153113e4:
        d["HwpReturnCode"]="RC_XIPC_CODE_BUG"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x91822a73:
        d["HwpReturnCode"]="RC_XIPC_CODE_BUG"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa169f4b1:
        d["HwpReturnCode"]="RC_XIPC_MVPD_RINGTABLE_VERSION_MISMATCH"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xee0c1e00:
        d["HwpReturnCode"]="RC_XIPC_MVPD_RINGTABLE_VERSION_MISMATCH"
        d["FFDC"]="RINGTABLE_VERSION_MVPD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd32f9408:
        d["HwpReturnCode"]="RC_XIPC_MVPD_RINGTABLE_VERSION_MISMATCH"
        d["FFDC"]="RINGTABLE_VERSION_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2ff33985:
        d["HwpReturnCode"]="RC_XIPC_MVPD_RINGTABLE_VERSION_MISMATCH"
        d["FFDC"]="MVPD_RING_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc349635b:
        d["HwpReturnCode"]="RC_XIPC_FEATURE_LIST_SIZE_OVERFLOW"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc1e5ebfa:
        d["HwpReturnCode"]="RC_XIPC_FEATURE_LIST_SIZE_OVERFLOW"
        d["FFDC"]="FEAT_LIST_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6fa73439:
        d["HwpReturnCode"]="RC_XIPC_FEATURE_LIST_SIZE_OVERFLOW"
        d["FFDC"]="FEAT_LIST_MAX_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0ab2e64c:
        d["HwpReturnCode"]="RC_EXPAND_RING_UTIL_INVALID_PARAMETERS"
        d["FFDC"]="OUT_IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x356e392b:
        d["HwpReturnCode"]="RC_EXPAND_RING_UTIL_INVALID_PARAMETERS"
        d["FFDC"]="IN_IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xec493e78:
        d["HwpReturnCode"]="RC_EXPAND_RING_UTIL_INVALID_PARAMETERS"
        d["FFDC"]="IN_IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1d989bac:
        d["HwpReturnCode"]="RC_XIPC_MVPD_MK_KEYWORD_VERSION_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x39cce599:
        d["HwpReturnCode"]="RC_XIPC_MVPD_MK_KEYWORD_VERSION_ERROR"
        d["FFDC"]="MVPD_MK_KWD_VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbbaf33fe:
        d["HwpReturnCode"]="RC_XIPC_MVPD_MK_KEYWORD_VERSION_ERROR"
        d["FFDC"]="MVPD_MKSIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf4d8d9b6:
        d["HwpReturnCode"]="RC_XIPC_MVPD_PG_KEYWORD_VERSION_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbd2e5917:
        d["HwpReturnCode"]="RC_XIPC_MVPD_PG_KEYWORD_VERSION_ERROR"
        d["FFDC"]="MVPD_PG_KWD_VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdfe9523a:
        d["HwpReturnCode"]="RC_XIPC_MVPD_PG_KEYWORD_VERSION_ERROR"
        d["FFDC"]="MVPD_PGSIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9a3b4d68:
        d["HwpReturnCode"]="RC_P10_REVERT_SBE_MCS_SETUP_NO_MI_TARGETS_FOUND"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x173ab723:
        d["HwpReturnCode"]="RC_P10_REVERT_SBE_MCS_SETUP_SELECTED_MC_NOT_FOUND"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0c331138:
        d["HwpReturnCode"]="RC_P10_REVERT_SBE_MCS_SETUP_SELECTED_MC_NOT_FOUND"
        d["FFDC"]="ATTR_PROC_SBE_MCS_SETUP_SELECTED_MC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x966feaf2:
        d["HwpReturnCode"]="RC_P10_DOWNSTREAM_TMPL1_REQUIRED_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6fb2439a:
        d["HwpReturnCode"]="RC_P10_DOWNSTREAM_TMPL4OR7_REQUIRED_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x72accc5d:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_FSP_BAR_ATTR_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9e96a9b8:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_FSP_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa4fd047f:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_FSP_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5a42b01d:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_FSP_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OVERLAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x628f4c9b:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_PSI_BAR_ATTR_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x37972127:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_PSI_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x589e4e83:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_PSI_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd990082c:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_PSI_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OVERLAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb00c3180:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_PAU_MMIO_BAR_ATTR_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6b3fca06:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_PAU_MMIO_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8570b432:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_PAU_MMIO_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd5be404e:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_PAU_MMIO_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OVERLAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x718c468f:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_NVPG_BAR_ATTR_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6befd848:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_NVPG_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb79a1baa:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_NVPG_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe94c919b:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_NVPG_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OVERLAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xeb05284b:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_NVC_BAR_ATTR_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xff7da905:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_NVC_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xedb4ccb8:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_NVC_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1072798c:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_NVC_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OVERLAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1deadd01:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_TM_BAR_ATTR_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x849db45a:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_TM_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa22b53bd:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_TM_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2e612f25:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_TM_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OVERLAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x24ff353d:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_IC_BAR_ATTR_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe6767f50:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_IC_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2633fa3d:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_IC_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9ca8c9d2:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_IC_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OVERLAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x43c9ad87:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_RANGE_OVERLAP_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x30af4d6b:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_RANGE_OVERLAP_ERR"
        d["FFDC"]="BASE_ADDR1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd0e21ca0:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_RANGE_OVERLAP_ERR"
        d["FFDC"]="END_ADDR1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdd42f5e4:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_RANGE_OVERLAP_ERR"
        d["FFDC"]="ENABLED1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x37898fe6:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_RANGE_OVERLAP_ERR"
        d["FFDC"]="BASE_ADDR2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcd1e8129:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_RANGE_OVERLAP_ERR"
        d["FFDC"]="END_ADDR2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe750ed1e:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_RANGE_OVERLAP_ERR"
        d["FFDC"]="ENABLED2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc35d7f49:
        d["HwpReturnCode"]="RC_SHADOW_DIS_FDCR_UPDATE_IN_PROG_TIMEOUT"
        d["FFDC"]="SHADOW_DIS_FDCR_UPDATE_IN_PROG_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbb028c5c:
        d["HwpReturnCode"]="RC_SHADOW_DIS_FDCR_UPDATE_IN_PROG_TIMEOUT"
        d["FFDC"]="CPMS_CUCR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe6d02956:
        d["HwpReturnCode"]="RC_SHADOW_DIS_FDCR_UPDATE_IN_PROG_TIMEOUT"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfbbb38ab:
        d["HwpReturnCode"]="RC_SHADOW_DIS_CORE_SHADOW_STATE_TIMEOUT"
        d["FFDC"]="SHADOW_DIS_CORE_SHADOW_STATE_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x515995be:
        d["HwpReturnCode"]="RC_SHADOW_DIS_CORE_SHADOW_STATE_TIMEOUT"
        d["FFDC"]="CPMS_CUCR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf1299f0a:
        d["HwpReturnCode"]="RC_SHADOW_DIS_CORE_SHADOW_STATE_TIMEOUT"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xec64c3ea:
        d["HwpReturnCode"]="RC_TIMEFAC_FROM_PC_XFER_RECEIVE_DONE_TIMEOUT"
        d["FFDC"]="TIMEFAC_FROM_PC_XFER_RECEIVE_DONE_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbb6959f2:
        d["HwpReturnCode"]="RC_TIMEFAC_FROM_PC_XFER_RECEIVE_DONE_TIMEOUT"
        d["FFDC"]="QME_TFCSR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x68e0558e:
        d["HwpReturnCode"]="RC_TIMEFAC_FROM_PC_XFER_RECEIVE_DONE_TIMEOUT"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x36787bc7:
        d["HwpReturnCode"]="RC_TIMEFAC_FROM_PC_TFCSR_ERROR_CHECK_FAILED"
        d["FFDC"]="QME_TFCSR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x28bd710d:
        d["HwpReturnCode"]="RC_TIMEFAC_FROM_PC_TFCSR_ERROR_CHECK_FAILED"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x164c7a5d:
        d["HwpReturnCode"]="RC_LPC_ACCESS_TIMEOUT"
        d["FFDC"]="COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc2192a51:
        d["HwpReturnCode"]="RC_LPC_ACCESS_TIMEOUT"
        d["FFDC"]="COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf68ed9a6:
        d["HwpReturnCode"]="RC_LPC_ACCESS_TIMEOUT"
        d["FFDC"]="DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcb7b266d:
        d["HwpReturnCode"]="RC_LPC_ACCESS_TIMEOUT"
        d["FFDC"]="STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2d063cd9:
        d["HwpReturnCode"]="RC_LPC_OPB_ERROR"
        d["FFDC"]="FFDC_TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x22c6370c:
        d["HwpReturnCode"]="RC_P10_RNG_INIT_CONDITIONER_STARTUP_TEST_FAILED_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7868fc31:
        d["HwpReturnCode"]="RC_P10_RNG_INIT_CONDITIONER_STARTUP_TEST_FAILED_ERR"
        d["FFDC"]="RNG_CFG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9f55af33:
        d["HwpReturnCode"]="RC_P10_RNG_INIT_SELF_TEST_FAILED_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0015e063:
        d["HwpReturnCode"]="RC_P10_RNG_INIT_SELF_TEST_FAILED_ERR"
        d["FFDC"]="SELF_TEST_HARD_FAIL_STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd8dd2573:
        d["Register FFDC"]="REG_FFDC_RNG_SELF_TEST_FAIL"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x01d20e40:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_START_NOMAINT"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x80d57a02:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_START_NOMAINT"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf5e9b2a2:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_START_NOMAINT"
        d["FFDC"]="C_RAS_STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x128aad5c:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_STOP_FAIL"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x04055d9e:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_STOP_FAIL"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfc774b2c:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_STOP_FAIL"
        d["FFDC"]="C_RAS_STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3de05ce4:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_STEP_NOTSTOPPING"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4c60dfc4:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_STEP_NOTSTOPPING"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x256eb43a:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_STEP_NOTSTOPPING"
        d["FFDC"]="C_RAS_STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x035bbe0b:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_STEP_FAIL"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6b87eed8:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_STEP_FAIL"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7ee6a251:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_STEP_FAIL"
        d["FFDC"]="C_RAS_STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5f96a739:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_STEP_FAIL"
        d["FFDC"]="PTC_STEP_COMP_POLL_LIMIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf38513c4:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_INVALID_COMMAND"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc92dd226:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_INVALID_COMMAND"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbb8892af:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_INVALID_COMMAND"
        d["FFDC"]="COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd392657d:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_ACTIVE_BACKING_OVERLAP_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe1d965a3:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_ACTIVE_BACKING_OVERLAP_ERR"
        d["FFDC"]="ACTIVE_CORES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x88ed5d9f:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_ACTIVE_BACKING_OVERLAP_ERR"
        d["FFDC"]="BACKING_CACHES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x82ce068a:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_ACTIVE_BACKING_OVERLAP_ERR"
        d["FFDC"]="FIRST_OVERLAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd75b88df:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_MULTIPLE_MASTER_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1f3bdcf7:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_MULTIPLE_MASTER_ERR"
        d["FFDC"]="MASTER_CORE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd48d9a09:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_MULTIPLE_MASTER_ERR"
        d["FFDC"]="MASTER_CORE_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x07060ebc:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_MULTIPLE_MASTER_ERR"
        d["FFDC"]="CORE_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x132b7d0e:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_NO_MASTER_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x857c62c0:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_NO_MASTER_ERR"
        d["FFDC"]="MASTER_CORE_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcad53a69:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_NO_MASTER_ERR"
        d["FFDC"]="ACTIVE_CORES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x70db4cb8:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_NO_MASTER_PAIR_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5efd4cc2:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_NO_MASTER_PAIR_ERR"
        d["FFDC"]="MASTER_CORE_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xaa2f8151:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_NO_MASTER_PAIR_ERR"
        d["FFDC"]="ACTIVE_CORES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc0165ec3:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_THREAD_STOP_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd7a02076:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_THREAD_STOP_ERR"
        d["FFDC"]="THREAD_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x718371aa:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_THREAD_STOP_ERR"
        d["FFDC"]="RAS_STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf83ff4b9:
        d["HwpReturnCode"]="RC_HW_IMG_PTR_ERROR"
        d["FFDC"]="HW_IMG_BUF_PTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x352964b1:
        d["HwpReturnCode"]="RC_HW_IMG_PTR_ERROR"
        d["FFDC"]="HOMER_IMG_BUF_PTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4df4af34:
        d["HwpReturnCode"]="RC_HOMER_IMG_PTR_ERROR"
        d["FFDC"]="HOMER_IMG_BUF_PTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x63d310a8:
        d["HwpReturnCode"]="RC_HW_IMAGE_INVALID_SIZE"
        d["FFDC"]="HW_IMG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1dc4e7ba:
        d["HwpReturnCode"]="RC_HW_IMAGE_INVALID_SIZE"
        d["FFDC"]="MAX_HW_IMG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc1edc1a6:
        d["HwpReturnCode"]="RC_HCODE_INVALID_PHASE"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4b8dc60a:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP1_BUF"
        d["FFDC"]="TEMP1_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x04b39957:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP1_BUF_SIZE"
        d["FFDC"]="TEMP1_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xeef6fd0a:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP2_BUF"
        d["FFDC"]="TEMP2_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc573b834:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP2_BUF_SIZE"
        d["FFDC"]="TEMP2_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x531b36da:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP3_BUF"
        d["FFDC"]="TEMP3_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x50972889:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP3_BUF_SIZE"
        d["FFDC"]="TEMP3_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfc618bdd:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP4_BUF"
        d["FFDC"]="TEMP4_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8c34fcce:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP4_BUF_SIZE"
        d["FFDC"]="TEMP4_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6a953b4a:
        d["HwpReturnCode"]="RC_XGPE_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="XIP_FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3ef9daa2:
        d["HwpReturnCode"]="RC_XGPE_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdc71a9dc:
        d["HwpReturnCode"]="RC_XGPE_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="CHIP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x34a78f92:
        d["HwpReturnCode"]="RC_XPMR_HDR_BUILD_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc70ed9c5:
        d["HwpReturnCode"]="RC_XPMR_HDR_BUILD_FAIL"
        d["FFDC"]="CHIP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x815492f5:
        d["HwpReturnCode"]="RC_XPMR_HDR_BUILD_FAIL"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5142c28b:
        d["HwpReturnCode"]="RC_XPMR_HDR_BUILD_FAIL"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xca930783:
        d["HwpReturnCode"]="RC_XGPE_BOOT_COPIER_BUILD_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf680add2:
        d["HwpReturnCode"]="RC_XGPE_BOOT_COPIER_BUILD_FAIL"
        d["FFDC"]="CHIP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc246b10b:
        d["HwpReturnCode"]="RC_XGPE_BOOT_COPIER_BUILD_FAIL"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x44dcd76f:
        d["HwpReturnCode"]="RC_XGPE_BOOT_COPIER_BUILD_FAIL"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x85e5f717:
        d["HwpReturnCode"]="RC_XGPE_BOOT_LOADER_BUILD_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8dd4a5da:
        d["HwpReturnCode"]="RC_XGPE_BOOT_LOADER_BUILD_FAIL"
        d["FFDC"]="CHIP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x89317274:
        d["HwpReturnCode"]="RC_XGPE_BOOT_LOADER_BUILD_FAIL"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x79c834e5:
        d["HwpReturnCode"]="RC_XGPE_BOOT_LOADER_BUILD_FAIL"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8be80d1e:
        d["HwpReturnCode"]="RC_XGPE_HCODE_BUILD_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xea307f09:
        d["HwpReturnCode"]="RC_XGPE_HCODE_BUILD_FAIL"
        d["FFDC"]="CHIP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7c6c2673:
        d["HwpReturnCode"]="RC_XGPE_HCODE_BUILD_FAIL"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb11d87f4:
        d["HwpReturnCode"]="RC_XGPE_HCODE_BUILD_FAIL"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6c4f8335:
        d["HwpReturnCode"]="RC_SELF_REST_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="XIP_FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3a2da826:
        d["HwpReturnCode"]="RC_SELF_REST_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xea0e5483:
        d["HwpReturnCode"]="RC_SELF_REST_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="CHIP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0b68c8c6:
        d["HwpReturnCode"]="RC_SELF_REST_IMG_BUILD_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x47274d89:
        d["HwpReturnCode"]="RC_SELF_REST_IMG_BUILD_FAIL"
        d["FFDC"]="CHIP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x13bd0421:
        d["HwpReturnCode"]="RC_SELF_REST_IMG_BUILD_FAIL"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4ac122c7:
        d["HwpReturnCode"]="RC_SELF_REST_IMG_BUILD_FAIL"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2e9b34ad:
        d["HwpReturnCode"]="RC_CPMR_HDR_BUILD_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x952d82f6:
        d["HwpReturnCode"]="RC_CPMR_HDR_BUILD_FAIL"
        d["FFDC"]="CHIP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4b6bc451:
        d["HwpReturnCode"]="RC_CPMR_HDR_BUILD_FAIL"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8f55487a:
        d["HwpReturnCode"]="RC_CPMR_HDR_BUILD_FAIL"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x672b5000:
        d["HwpReturnCode"]="RC_QME_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="XIP_FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbc55f073:
        d["HwpReturnCode"]="RC_QME_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="CHIP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x29f75e2c:
        d["HwpReturnCode"]="RC_QME_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7ce95335:
        d["HwpReturnCode"]="RC_QME_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7c056244:
        d["HwpReturnCode"]="RC_QME_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe4129003:
        d["HwpReturnCode"]="RC_QME_HCODE_BUILD_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0443ee14:
        d["HwpReturnCode"]="RC_QME_HCODE_BUILD_FAIL"
        d["FFDC"]="CHIP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf7f72a3d:
        d["HwpReturnCode"]="RC_QME_HCODE_BUILD_FAIL"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x404136c1:
        d["HwpReturnCode"]="RC_QME_HCODE_BUILD_FAIL"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6d81dc01:
        d["HwpReturnCode"]="RC_QME_META_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="XIP_FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x407f2f5e:
        d["HwpReturnCode"]="RC_QME_META_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="CHIP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x697801cb:
        d["HwpReturnCode"]="RC_QME_META_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1b70891a:
        d["HwpReturnCode"]="RC_QME_META_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x34f516ce:
        d["HwpReturnCode"]="RC_QME_META_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xce0f1c75:
        d["HwpReturnCode"]="RC_QME_META_QMEATMT_MAGIC_MISMATCH"
        d["FFDC"]="QMEATMT_MAGIC_WORD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb7c99d7b:
        d["HwpReturnCode"]="RC_QME_META_QMEATMT_MAGIC_MISMATCH"
        d["FFDC"]="QME_META_HEADER_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8ce0ba43:
        d["HwpReturnCode"]="RC_PGPE_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="XIP_FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x287788c9:
        d["HwpReturnCode"]="RC_PGPE_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x28618981:
        d["HwpReturnCode"]="RC_PGPE_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="CHIP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf499dd5b:
        d["HwpReturnCode"]="RC_P10_XIP_SECTION_PGPE_PPMR"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4bfdbfe9:
        d["HwpReturnCode"]="RC_P10_XIP_SECTION_PGPE_PPMR"
        d["FFDC"]="CHIP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb552b6bb:
        d["HwpReturnCode"]="RC_P10_XIP_SECTION_PGPE_PPMR"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3e18c0ae:
        d["HwpReturnCode"]="RC_P10_XIP_SECTION_PGPE_PPMR"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xca53116d:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_COPIER_BUILD_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd806c178:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_COPIER_BUILD_FAIL"
        d["FFDC"]="CHIP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9da6bd42:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_COPIER_BUILD_FAIL"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xeb31f797:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_COPIER_BUILD_FAIL"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xaf05ca4b:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_LOADER_BUILD_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc5eb7e3b:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_LOADER_BUILD_FAIL"
        d["FFDC"]="CHIP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xac241af8:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_LOADER_BUILD_FAIL"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1f56154d:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_LOADER_BUILD_FAIL"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8e32eb72:
        d["HwpReturnCode"]="RC_P10_PGPE_HCODE_BUILD_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc7867a10:
        d["HwpReturnCode"]="RC_P10_PGPE_HCODE_BUILD_FAIL"
        d["FFDC"]="CHIP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcd1f4131:
        d["HwpReturnCode"]="RC_P10_PGPE_HCODE_BUILD_FAIL"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x60020811:
        d["HwpReturnCode"]="RC_P10_PGPE_HCODE_BUILD_FAIL"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe5ca1e70:
        d["HwpReturnCode"]="RC_P10_PGPE_AUX_TASK_BUILD_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x004d44c0:
        d["HwpReturnCode"]="RC_P10_PGPE_AUX_TASK_BUILD_FAIL"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x88c137a2:
        d["HwpReturnCode"]="RC_P10_PGPE_AUX_TASK_BUILD_FAIL"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x677ed61c:
        d["HwpReturnCode"]="RC_QME_RING_SECTN_EXTRACTION_FAIL"
        d["FFDC"]="EXTRACTION_FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0584df16:
        d["HwpReturnCode"]="RC_QME_RING_SECTN_EXTRACTION_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x05be5c29:
        d["HwpReturnCode"]="RC_QME_IMG_EXCEED_SRAM_SIZE"
        d["FFDC"]="BAD_IMG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa651dc6b:
        d["HwpReturnCode"]="RC_QME_IMG_EXCEED_SRAM_SIZE"
        d["FFDC"]="MAX_QME_IMG_SIZE_ALLOWED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3cccd231:
        d["HwpReturnCode"]="RC_QME_IMG_EXCEED_SRAM_SIZE"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x78be0191:
        d["HwpReturnCode"]="RC_XGPE_IMG_EXCEED_SRAM_SIZE"
        d["FFDC"]="BAD_IMG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc19a37d5:
        d["HwpReturnCode"]="RC_XGPE_IMG_EXCEED_SRAM_SIZE"
        d["FFDC"]="MAX_XGPE_IMG_SIZE_ALLOWED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7c4c26a2:
        d["HwpReturnCode"]="RC_XGPE_IMG_EXCEED_SRAM_SIZE"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x53411284:
        d["HwpReturnCode"]="RC_PGPE_IMG_EXCEED_SRAM_SIZE"
        d["FFDC"]="BAD_IMG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc2077f6b:
        d["HwpReturnCode"]="RC_PGPE_IMG_EXCEED_SRAM_SIZE"
        d["FFDC"]="MAX_PGPE_IMG_SIZE_ALLOWED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1a2e8fe3:
        d["HwpReturnCode"]="RC_PGPE_IMG_EXCEED_SRAM_SIZE"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc69f876e:
        d["HwpReturnCode"]="RC_REFRESH_SCOM_UPDATE_FAIL"
        d["FFDC"]="STOP_API_SCOM_ERR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf70831d1:
        d["HwpReturnCode"]="RC_REFRESH_SCOM_UPDATE_FAIL"
        d["FFDC"]="REFRESH_REG_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x60a1f239:
        d["HwpReturnCode"]="RC_REFRESH_SCOM_UPDATE_FAIL"
        d["FFDC"]="REFRESH_REG_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc73ac3c4:
        d["HwpReturnCode"]="RC_PSTATE_SUP_STRUCT_SIZE_ERR"
        d["FFDC"]="SUPER_STRUCT_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x961323f2:
        d["HwpReturnCode"]="RC_PSTATE_SUP_STRUCT_SIZE_ERR"
        d["FFDC"]="MAX_SIZE_ALLOCATED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2d0dc336:
        d["HwpReturnCode"]="RC_PSTATE_SUP_STRUCT_SIZE_ERR"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7c4e5820:
        d["HwpReturnCode"]="RC_OCC_PARAM_BLOCK_SIZE_ERR"
        d["FFDC"]="OCC_PSTATE_STRUCT_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbec7f088:
        d["HwpReturnCode"]="RC_OCC_PARAM_BLOCK_SIZE_ERR"
        d["FFDC"]="MAX_SIZE_ALLOCATED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf02a66ba:
        d["HwpReturnCode"]="RC_OCC_PARAM_BLOCK_SIZE_ERR"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x70391a43:
        d["HwpReturnCode"]="RC_PARAM_WOF_TABLE_SIZE_ERR"
        d["FFDC"]="ACTUAL_WOF_TABLE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x60cd3535:
        d["HwpReturnCode"]="RC_PARAM_WOF_TABLE_SIZE_ERR"
        d["FFDC"]="MAX_SIZE_ALLOCATED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8742e256:
        d["HwpReturnCode"]="RC_CORE_CMN_RING_LAYOUT_ERR"
        d["FFDC"]="CORE_CMN_RING_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf2df11f4:
        d["HwpReturnCode"]="RC_CORE_CMN_RING_LAYOUT_ERR"
        d["FFDC"]="FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcb63ad1c:
        d["HwpReturnCode"]="RC_CORE_CMN_RING_LAYOUT_ERR"
        d["FFDC"]="MAX_SIZE_ALLOCATED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbbd64e77:
        d["HwpReturnCode"]="RC_CORE_CMN_RING_LAYOUT_ERR"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x412654f2:
        d["HwpReturnCode"]="RC_CORE_CMN_RING_LAYOUT_ERR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x594cbebc:
        d["HwpReturnCode"]="RC_CORE_CMN_RING_OVRD_LAYOUT_ERR"
        d["FFDC"]="OVRD_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc437ac75:
        d["HwpReturnCode"]="RC_CORE_CMN_RING_OVRD_LAYOUT_ERR"
        d["FFDC"]="FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd38bdcee:
        d["HwpReturnCode"]="RC_CORE_CMN_RING_OVRD_LAYOUT_ERR"
        d["FFDC"]="MAX_SIZE_ALLOCATED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x810dab62:
        d["HwpReturnCode"]="RC_CORE_CMN_RING_OVRD_LAYOUT_ERR"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcf51f00b:
        d["HwpReturnCode"]="RC_CORE_CMN_RING_OVRD_LAYOUT_ERR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x555b7843:
        d["HwpReturnCode"]="RC_CORE_SPEC_RING_LAYOUT_ERR"
        d["FFDC"]="CORE_SPEC_RING_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa620bc85:
        d["HwpReturnCode"]="RC_CORE_SPEC_RING_LAYOUT_ERR"
        d["FFDC"]="FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x97351c2b:
        d["HwpReturnCode"]="RC_CORE_SPEC_RING_LAYOUT_ERR"
        d["FFDC"]="MAX_SIZE_ALLOCATED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa742e0ab:
        d["HwpReturnCode"]="RC_CORE_SPEC_RING_LAYOUT_ERR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0026edc4:
        d["HwpReturnCode"]="RC_CORE_SPEC_RING_LAYOUT_ERR"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfdf86709:
        d["HwpReturnCode"]="RC_CORE_SPEC_RING_LAYOUT_ERR"
        d["FFDC"]="CORE_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x19c4e6df:
        d["HwpReturnCode"]="RC_FAILED_TO_CALCULATE_CORE_REPAIR_RING"
        d["FFDC"]="FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd5431a9f:
        d["HwpReturnCode"]="RC_FAILED_TO_CALCULATE_CORE_REPAIR_RING"
        d["FFDC"]="CORE_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x48f0eb31:
        d["HwpReturnCode"]="RC_QUAD_CMN_RING_LAYOUT_ERR"
        d["FFDC"]="QUAD_CMN_RING_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x67a40cab:
        d["HwpReturnCode"]="RC_QUAD_CMN_RING_LAYOUT_ERR"
        d["FFDC"]="FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x53846371:
        d["HwpReturnCode"]="RC_QUAD_CMN_RING_LAYOUT_ERR"
        d["FFDC"]="MAX_SIZE_ALLOCATED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xca9a72b4:
        d["HwpReturnCode"]="RC_QUAD_CMN_RING_LAYOUT_ERR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x99a5dea0:
        d["HwpReturnCode"]="RC_QUAD_CMN_RING_LAYOUT_ERR"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4889d25e:
        d["HwpReturnCode"]="RC_QUAD_CMN_RING_LAYOUT_ERR"
        d["FFDC"]="QUAD_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5d0f72a2:
        d["HwpReturnCode"]="RC_QUAD_CMN_RING_OVRD_LAYOUT_ERR"
        d["FFDC"]="OVRD_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfd3067f1:
        d["HwpReturnCode"]="RC_QUAD_CMN_RING_OVRD_LAYOUT_ERR"
        d["FFDC"]="FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbd8661d9:
        d["HwpReturnCode"]="RC_QUAD_CMN_RING_OVRD_LAYOUT_ERR"
        d["FFDC"]="MAX_SIZE_ALLOCATED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x78e56f9f:
        d["HwpReturnCode"]="RC_QUAD_CMN_RING_OVRD_LAYOUT_ERR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x51b1ebfb:
        d["HwpReturnCode"]="RC_QUAD_CMN_RING_OVRD_LAYOUT_ERR"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8ef318c2:
        d["HwpReturnCode"]="RC_QUAD_SPEC_RING_LAYOUT_ERR"
        d["FFDC"]="QUAD_SPEC_RING_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4568c6e8:
        d["HwpReturnCode"]="RC_QUAD_SPEC_RING_LAYOUT_ERR"
        d["FFDC"]="FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7d4317c1:
        d["HwpReturnCode"]="RC_QUAD_SPEC_RING_LAYOUT_ERR"
        d["FFDC"]="MAX_SIZE_ALLOCATED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc7d7c3c3:
        d["HwpReturnCode"]="RC_QUAD_SPEC_RING_LAYOUT_ERR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf3b6d543:
        d["HwpReturnCode"]="RC_QUAD_SPEC_RING_LAYOUT_ERR"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x397f669e:
        d["HwpReturnCode"]="RC_QUAD_SPEC_RING_LAYOUT_ERR"
        d["FFDC"]="QUAD_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xeebe2aa2:
        d["HwpReturnCode"]="RC_NCU_RNG_SCOM_SAVE_FAIL"
        d["FFDC"]="SCOM_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x68eba7d9:
        d["HwpReturnCode"]="RC_NCU_RNG_SCOM_SAVE_FAIL"
        d["FFDC"]="SCOM_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x18c6f931:
        d["HwpReturnCode"]="RC_NCU_RNG_SCOM_SAVE_FAIL"
        d["FFDC"]="SCOM_REGION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd4b812a7:
        d["HwpReturnCode"]="RC_NCU_RNG_SCOM_SAVE_FAIL"
        d["FFDC"]="SCOM_OP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9d5ac72a:
        d["HwpReturnCode"]="RC_NCU_RNG_SCOM_SAVE_FAIL"
        d["FFDC"]="FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xff5c5cae:
        d["HwpReturnCode"]="RC_L2_RD_EPS_SCOM_SAVE_FAIL"
        d["FFDC"]="SCOM_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbf2f5b7e:
        d["HwpReturnCode"]="RC_L2_RD_EPS_SCOM_SAVE_FAIL"
        d["FFDC"]="SCOM_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xeab5abf8:
        d["HwpReturnCode"]="RC_L2_RD_EPS_SCOM_SAVE_FAIL"
        d["FFDC"]="SCOM_REGION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe564d744:
        d["HwpReturnCode"]="RC_L2_RD_EPS_SCOM_SAVE_FAIL"
        d["FFDC"]="SCOM_OP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdeee86ff:
        d["HwpReturnCode"]="RC_L2_RD_EPS_SCOM_SAVE_FAIL"
        d["FFDC"]="FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6ce4ddfa:
        d["HwpReturnCode"]="RC_L2_WR_EPS_SCOM_SAVE_FAIL"
        d["FFDC"]="SCOM_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe9062b4d:
        d["HwpReturnCode"]="RC_L2_WR_EPS_SCOM_SAVE_FAIL"
        d["FFDC"]="SCOM_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd52b2b01:
        d["HwpReturnCode"]="RC_L2_WR_EPS_SCOM_SAVE_FAIL"
        d["FFDC"]="SCOM_REGION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb19a0c20:
        d["HwpReturnCode"]="RC_L2_WR_EPS_SCOM_SAVE_FAIL"
        d["FFDC"]="SCOM_OP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x33339edc:
        d["HwpReturnCode"]="RC_L2_WR_EPS_SCOM_SAVE_FAIL"
        d["FFDC"]="FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x84762ef3:
        d["HwpReturnCode"]="RC_L3_RD_EPS_SCOM_SAVE_FAIL"
        d["FFDC"]="SCOM_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8a1b5cab:
        d["HwpReturnCode"]="RC_L3_RD_EPS_SCOM_SAVE_FAIL"
        d["FFDC"]="SCOM_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf6d39f64:
        d["HwpReturnCode"]="RC_L3_RD_EPS_SCOM_SAVE_FAIL"
        d["FFDC"]="SCOM_REGION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xee45b486:
        d["HwpReturnCode"]="RC_L3_RD_EPS_SCOM_SAVE_FAIL"
        d["FFDC"]="SCOM_OP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2b4f90fd:
        d["HwpReturnCode"]="RC_L3_RD_EPS_SCOM_SAVE_FAIL"
        d["FFDC"]="FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa6a883be:
        d["HwpReturnCode"]="RC_L3_WR_EPS_SCOM_SAVE_FAIL"
        d["FFDC"]="SCOM_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xedfdb11e:
        d["HwpReturnCode"]="RC_L3_WR_EPS_SCOM_SAVE_FAIL"
        d["FFDC"]="SCOM_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd4325396:
        d["HwpReturnCode"]="RC_L3_WR_EPS_SCOM_SAVE_FAIL"
        d["FFDC"]="SCOM_REGION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3641130f:
        d["HwpReturnCode"]="RC_L3_WR_EPS_SCOM_SAVE_FAIL"
        d["FFDC"]="SCOM_OP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x82431a12:
        d["HwpReturnCode"]="RC_L3_WR_EPS_SCOM_SAVE_FAIL"
        d["FFDC"]="FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9525a97c:
        d["HwpReturnCode"]="RC_P10_PGPE_AUX_TASK_BIN_SIZE_ERROR"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x51dfcaf6:
        d["HwpReturnCode"]="RC_P10_PGPE_AUX_TASK_BIN_SIZE_ERROR"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa8f60430:
        d["HwpReturnCode"]="RC_P10_PGPE_AUX_TASK_BIN_SIZE_ERROR"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x88a17d54:
        d["HwpReturnCode"]="RC_SELF_RESTORE_INIT_FAILED"
        d["FFDC"]="HOMER_PTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5e94acae:
        d["HwpReturnCode"]="RC_SELF_RESTORE_INIT_FAILED"
        d["FFDC"]="CORE_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3f1cb5d9:
        d["HwpReturnCode"]="RC_SELF_RESTORE_INIT_FAILED"
        d["FFDC"]="FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9b7aa72e:
        d["HwpReturnCode"]="RC_SELF_RESTORE_INIT_FAILED"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x411bb9bb:
        d["HwpReturnCode"]="RC_SELF_SAVE_INIT_FAILED"
        d["FFDC"]="HOMER_PTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcd84e0c6:
        d["HwpReturnCode"]="RC_SELF_SAVE_INIT_FAILED"
        d["FFDC"]="CORE_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb42e8390:
        d["HwpReturnCode"]="RC_SELF_SAVE_INIT_FAILED"
        d["FFDC"]="FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2a60521a:
        d["HwpReturnCode"]="RC_SELF_SAVE_INIT_FAILED"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2fc6f14d:
        d["HwpReturnCode"]="RC_URMOR_RESTORE_ENTRY_FAILED"
        d["FFDC"]="PIR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfd25d07c:
        d["HwpReturnCode"]="RC_URMOR_RESTORE_ENTRY_FAILED"
        d["FFDC"]="STOP_API_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7d757297:
        d["HwpReturnCode"]="RC_SELF_SAVE_API_FAILED"
        d["FFDC"]="PIR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0a56da20:
        d["HwpReturnCode"]="RC_SELF_SAVE_API_FAILED"
        d["FFDC"]="STOP_API_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd075c7ee:
        d["HwpReturnCode"]="RC_SELF_SAVE_API_FAILED"
        d["FFDC"]="CORE_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6d07eb86:
        d["HwpReturnCode"]="RC_SELF_SAVE_API_FAILED"
        d["FFDC"]="THREAD_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x82313e4f:
        d["HwpReturnCode"]="RC_BAD_UNSECURE_HOMER_VALUE"
        d["FFDC"]="UNSECURE_HOMER_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x600da28f:
        d["HwpReturnCode"]="RC_BAD_OVERRIDE_SIZE"
        d["FFDC"]="BAD_OVERRIDE_BIN_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4636f17d:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_INVALID_PARAMETERS"
        d["FFDC"]="SECTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x507a4480:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_INVALID_PARAMETERS"
        d["FFDC"]="SECTION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8f8e575e:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_INVALID_PARAMETERS"
        d["FFDC"]="SECTION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf1e7859e:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_INVALID_PARAMETERS"
        d["FFDC"]="IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9add2163:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_INVALID_PARAMETERS"
        d["FFDC"]="IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4041b940:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_APPEND_RC"
        d["FFDC"]="APPEND_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x48e3f725:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_APPEND_RC"
        d["FFDC"]="SECTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc64920e9:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_APPEND_RC"
        d["FFDC"]="SECTION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf61ff427:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_APPEND_RC"
        d["FFDC"]="SECTION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0776651f:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_APPEND_RC"
        d["FFDC"]="IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc3aefd9b:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_APPEND_RC"
        d["FFDC"]="IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8d37a73d:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_SIZE_RC"
        d["FFDC"]="SIZE_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdaa7d205:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_SIZE_RC"
        d["FFDC"]="SECTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5f6d8a12:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_SIZE_RC"
        d["FFDC"]="SECTION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9e3fadd9:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_SIZE_RC"
        d["FFDC"]="SECTION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x00661d49:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_SIZE_RC"
        d["FFDC"]="IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x299b7557:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_SIZE_RC"
        d["FFDC"]="IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xefca78b8:
        d["HwpReturnCode"]="RC_PM_BLOCK_WAKEUP_INTR_OP"
        d["FFDC"]="OPERATION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8805feaf:
        d["HwpReturnCode"]="RC_PM_BLOCK_WAKEUP_INTR_OP"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbd0bc1d0:
        d["HwpReturnCode"]="RC_PM_BLOCK_WAKEUP_INTR_OP"
        d["FFDC"]="CORE_POSITION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd8fb498f:
        d["HwpReturnCode"]="RC_PM_BLOCK_WAKEUP_INTR_FAILED"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3fde0dc5:
        d["HwpReturnCode"]="RC_PM_BLOCK_WAKEUP_INTR_FAILED"
        d["FFDC"]="OCCFLG3_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf8e03d9a:
        d["HwpReturnCode"]="RC_PM_BLOCK_WAKEUP_INTR_FAILED"
        d["FFDC"]="OP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x611873b5:
        d["HwpReturnCode"]="RC_PM_BLOCK_WAKEUP_INTR_FAILED"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8d5d7517:
        d["HwpReturnCode"]="RC_PM_BLOCK_WAKEUP_INTR_FAILED"
        d["FFDC"]="CORE_POSITION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4af3560e:
        d["HwpReturnCode"]="RC_PM_BLOCK_WAKEUP_INTR_FAILED"
        d["FFDC"]="EQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe54b35e0:
        d["HwpReturnCode"]="RC_PM_BLOCK_WAKEUP_INTR_FAILED"
        d["FFDC"]="EQ_POSITION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x15ac074a:
        d["HwpReturnCode"]="RC_P10_SMP_WRAP_UNSUPPORTED_BROADCAST_MODE"
        d["FFDC"]="BROADCAST_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4482d371:
        d["HwpReturnCode"]="RC_QME_SRAM_ACCESS_ERROR"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xceff4b0f:
        d["HwpReturnCode"]="RC_QME_SRAM_ACCESS_DENIED"
        d["FFDC"]="EQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9fdd755e:
        d["HwpReturnCode"]="RC_QME_SRAM_ACCESS_DENIED"
        d["FFDC"]="QME_FLAG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x22c05212:
        d["HwpReturnCode"]="RC_QME_SRAM_ACCESS_DENIED"
        d["FFDC"]="QSCR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x604480dd:
        d["HwpReturnCode"]="RC_P10_OMI_TRAIN_ERR"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdfce59de:
        d["HwpReturnCode"]="RC_P10_OMI_TRAIN_ERR"
        d["FFDC"]="OMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x841228db:
        d["HwpReturnCode"]="RC_P10_OMI_TRAIN_ERR"
        d["FFDC"]="OMI_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x61c0ef26:
        d["HwpReturnCode"]="RC_P10_OMI_TRAIN_ERR"
        d["FFDC"]="EXPECTED_SM_STATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8c51c830:
        d["HwpReturnCode"]="RC_P10_OMI_TRAIN_ERR"
        d["FFDC"]="ACTUAL_SM_STATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf62c3e30:
        d["HwpReturnCode"]="RC_P10_OMI_TRAIN_ERR"
        d["FFDC"]="STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x95fdee73:
        d["HwpReturnCode"]="RC_P10_OMI_TRAIN_ERR"
        d["FFDC"]="TRAINING_STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x98ce595e:
        d["HwpReturnCode"]="RC_P10_OMI_TRAIN_ERR"
        d["FFDC"]="CONFIG1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3efcf84d:
        d["HwpReturnCode"]="RC_P10_OMI_TRAIN_ERR"
        d["FFDC"]="OMI_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xab05d1ff:
        d["Register FFDC"]="REG_FFDC_EXP_OMI_TRAIN_ERR_INFO"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_CMN_CONFIG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_PMU_CNTR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_CONFIG0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_CONFIG1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_ERROR_MASK",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_ERROR_HOLD",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_ERROR_CAPTURE",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_EDPL_MAX_COUNT",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_STATUS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_TRAINING_STATUS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_DLX_CONFIG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_DLX_INFO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_ERROR_ACTION",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_DEBUG_AID",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_CYA_BITS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x37863c62:
        d["Register FFDC"]="REG_FFDC_MC_OMI_TRAIN_ERR_INFO"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::CONFIG0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::CONFIG1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::ERROR_MASK",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::ERROR_HOLD",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::ERROR_CAPTURE",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::EDPL_MAX_COUNT",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::STATUS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::TRAINING_STATUS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::DLX_CONFIG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::DLX_INFO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::ERROR_ACTION",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::CYA_BITS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x837082c4:
        d["Register FFDC"]="REG_FFDC_MC_OMIC_TRAIN_ERR_INFO"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omic::CMN_CONFIG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omic::PMU_CNTR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0xacb05f16:
        d["HwpReturnCode"]="RC_POWERBUS_PURGE_DONE_TIMEOUT"
        d["FFDC"]="POWERBUS_PURGE_DONE_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1d2cec8d:
        d["HwpReturnCode"]="RC_POWERBUS_PURGE_DONE_TIMEOUT"
        d["FFDC"]="QME_SCSR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2b353c27:
        d["HwpReturnCode"]="RC_POWERBUS_PURGE_DONE_TIMEOUT"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1bf6dd74:
        d["HwpReturnCode"]="RC_PM_SET_HOMER_BAR_NOT_4MB_ALIGNED"
        d["FFDC"]="MEM_BAR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x91751cb4:
        d["HwpReturnCode"]="RC_PM_SET_HOMER_BAR_SIZE_INVALID"
        d["FFDC"]="MEM_BAR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x42419d7b:
        d["HwpReturnCode"]="RC_PM_SET_HOMER_BAR_SIZE_INVALID"
        d["FFDC"]="MEM_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf482ef47:
        d["HwpReturnCode"]="RC_P10_PAU_SCOMINIT_IOHS_OCAPI_CONFIG_ERR"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0ac344a0:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_OUT_OF_RANGE"
        d["FFDC"]="INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8d7f2c3f:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_OUT_OF_RANGE"
        d["FFDC"]="BAR_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2719438d:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_OUT_OF_RANGE"
        d["FFDC"]="BAR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa00f8b8c:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_OUT_OF_RANGE"
        d["FFDC"]="CMD_SCOPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x09547183:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_OUT_OF_RANGE"
        d["FFDC"]="EXP_BAR_ADDR_RANGECHECK_HIGH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xec88ac71:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_ALIGNMENT_ERROR"
        d["FFDC"]="INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xec2f85ae:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_ALIGNMENT_ERROR"
        d["FFDC"]="BAR_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfb1e72c8:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_ALIGNMENT_ERROR"
        d["FFDC"]="BAR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbf6cd3f5:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_ALIGNMENT_ERROR"
        d["FFDC"]="CMD_SCOPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9adbcd83:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_ALIGNMENT_ERROR"
        d["FFDC"]="EXP_BAR_ADDR_RANGECHECK_LOW"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd5271baa:
        d["HwpReturnCode"]="RC_PM_PBA_BAR_SIZE_INVALID"
        d["FFDC"]="INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb3c6d626:
        d["HwpReturnCode"]="RC_PM_PBA_BAR_SIZE_INVALID"
        d["FFDC"]="BAR_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7ac60791:
        d["HwpReturnCode"]="RC_PM_PBA_BAR_SIZE_INVALID"
        d["FFDC"]="BAR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1eee139e:
        d["HwpReturnCode"]="RC_PM_PBA_BAR_SIZE_INVALID"
        d["FFDC"]="CMD_SCOPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x268845b2:
        d["HwpReturnCode"]="RC_INVALID_SBE_FFDC_PACKET"
        d["FFDC"]="INVALID_ERRVAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0ade8f58:
        d["Register FFDC"]="CBS_STATUS_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_CBS_CS_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_CBS_TR_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_CBS_EL_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_CBS_ENVSTAT_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_CBS_TR_HIST_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_CBS_EL_HIST_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_SB_CS_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_SB_MSG_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_CBS_STAT_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x5f4d81db:
        d["Register FFDC"]="ROOT_CTRL_REGISTERS_CFAM"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL0_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL1_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL2_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL3_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL4_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL5_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL6_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL7_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL8_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0xdd737336:
        d["Register FFDC"]="PERV_CTRL_REGISTERS_CFAM"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_PERV_CTRL0_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_PERV_CTRL1_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x9ee48ff9:
        d["Register FFDC"]="FSI2PIB_STATUS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_FSI2PIB_STATUS_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0xa6d2ae94:
        d["Register FFDC"]="OSC_SWITCH_SENSE_REGISTER_CFAM"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_SNS1LTH_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x93c3f0ca:
        d["Register FFDC"]="OSC_SWITCH_SENSE_REGISTER"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_SNS1LTH_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0xbf55da7a:
        d["Register FFDC"]="PIBMEM_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::OTPC_M_STATUS_REGISTER",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x055413e6:
        d["Register FFDC"]="I2C_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::OTPC_M_STATUS_REGISTER",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x05fceb54:
        d["Register FFDC"]="OTPROM_STATUS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::OTPC_M_STATUS_REGISTER",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x512ac9a5:
        d["Register FFDC"]="SBE_EXTERNAL_SCOMMABLE_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_PIB_SBE_SBEPM_SBEPPE_PPE_XIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_PIB_SBE_SBEPM_SBEPPE_PPE_XIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_PIB_SBE_SBEPM_SBEPPE_PPE_XIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x0042e612:
        d["Register FFDC"]="MIB_EXTERNAL_SCOMMABLE_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_PIB_SBE_SBEPM_MIB_XISIB",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_PIB_SBE_SBEPM_SBEPPE_MIB_XIMEM",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_PIB_SBE_SBEPM_SBEPPE_MIB_XISGB",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_PIB_SBE_SBEPM_SBEPPE_MIB_XIICAC",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x8c77cdae:
        d["HwpReturnCode"]="RC_PM_PBA_FIRINIT_BAD_MODE"
        d["FFDC"]="BADMODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe42935e6:
        d["HwpReturnCode"]="RC_PM_QME_ADDR_OUT_OF_RANGE"
        d["FFDC"]="BAR_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1fc3d0de:
        d["HwpReturnCode"]="RC_PM_QME_ADDR_OUT_OF_RANGE"
        d["FFDC"]="BAR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe97a05f4:
        d["HwpReturnCode"]="RC_PM_QME_ADDR_OUT_OF_RANGE"
        d["FFDC"]="EXP_BAR_ADDR_RANGECHECK_HIGH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfd4e318f:
        d["HwpReturnCode"]="RC_PM_QME_ADDR_ALIGNMENT_ERROR"
        d["FFDC"]="BAR_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x42cb8b29:
        d["HwpReturnCode"]="RC_PM_QME_ADDR_ALIGNMENT_ERROR"
        d["FFDC"]="BAR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xccdb258e:
        d["HwpReturnCode"]="RC_PM_QME_ADDR_ALIGNMENT_ERROR"
        d["FFDC"]="EXP_BAR_ADDR_RANGECHECK_LOW"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbdf2f203:
        d["HwpReturnCode"]="RC_PM_QME_BAR_SIZE_INVALID"
        d["FFDC"]="BAR_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x157d20e4:
        d["HwpReturnCode"]="RC_PM_QME_BAR_SIZE_INVALID"
        d["FFDC"]="BAR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x99dd16c1:
        d["HwpReturnCode"]="RC_NCU_PURGE_DONE_TIMEOUT"
        d["FFDC"]="NCU_PURGE_DONE_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2f65a061:
        d["HwpReturnCode"]="RC_NCU_PURGE_DONE_TIMEOUT"
        d["FFDC"]="QME_SCSR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa867d05e:
        d["HwpReturnCode"]="RC_NCU_PURGE_DONE_TIMEOUT"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x95d4014b:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_MC_FREQ_LOOKUP_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7e6f1522:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_MC_FREQ_LOOKUP_ERR"
        d["FFDC"]="TARGET_MC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2158e590:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_MC_FREQ_LOOKUP_ERR"
        d["FFDC"]="FREQ_MC_MHZ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5dfa5bb6:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_IOHS_FREQ_LOOKUP_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x62567430:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_IOHS_FREQ_LOOKUP_ERR"
        d["FFDC"]="TARGET_IOHS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xeda4ced3:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_IOHS_FREQ_LOOKUP_ERR"
        d["FFDC"]="FREQ_IOHS_MHZ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfe133149:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_PCIE_FREQ_LOOKUP_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9414a98a:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_PCIE_FREQ_LOOKUP_ERR"
        d["FFDC"]="FREQ_PCIE_MHZ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x76515b67:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_PAUC_GARD_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcc42a2b7:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_PAUC_GARD_ERR"
        d["FFDC"]="CONTAINED_IPL_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb3ab8c64:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_PAUC_GARD_ERR"
        d["FFDC"]="PAUC_FUNCTIONAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8415e361:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_PAUC_GARD_ERR"
        d["FFDC"]="PAUC_PRESENT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2a203508:
        d["HwpReturnCode"]="RC_P10_SBE_ATTR_SETUP_NMMU1_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcf80ab23:
        d["HwpReturnCode"]="RC_P10_SBE_ATTR_SETUP_NMMU1_ERR"
        d["FFDC"]="N1_PG_MVPD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1361a2bd:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_INVALID_ACCESS_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7bc250c9:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_INVALID_ACCESS_ERR"
        d["FFDC"]="USE_SCOM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x55fa0657:
        d["HwpReturnCode"]="RC_CHTM_PURGE_DONE_TIMEOUT"
        d["FFDC"]="CHTM_PURGE_DONE_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x86c7df92:
        d["HwpReturnCode"]="RC_CHTM_PURGE_DONE_TIMEOUT"
        d["FFDC"]="QME_SCSR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x00844cba:
        d["HwpReturnCode"]="RC_CHTM_PURGE_DONE_TIMEOUT"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1808ed1c:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_SL_FAILED"
        d["FFDC"]="CLK_STAT_SL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xff4affba:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_SL_FAILED"
        d["FFDC"]="CLK_COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe976281d:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_SL_FAILED"
        d["FFDC"]="CLK_REGIONS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1ee69eb5:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_SL_FAILED"
        d["FFDC"]="QUAD_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd0a1f413:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_NSL_FAILED"
        d["FFDC"]="CLK_STAT_NSL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xddbfc20d:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_NSL_FAILED"
        d["FFDC"]="CLK_COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7e711952:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_NSL_FAILED"
        d["FFDC"]="CLK_REGIONS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7a3593f0:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_NSL_FAILED"
        d["FFDC"]="QUAD_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf697c7cc:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_ARY_FAILED"
        d["FFDC"]="CLK_STAT_ARY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x460174fc:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_ARY_FAILED"
        d["FFDC"]="CLK_COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xee718ca1:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_ARY_FAILED"
        d["FFDC"]="CLK_REGIONS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x633d73ae:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_ARY_FAILED"
        d["FFDC"]="QUAD_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xadd53015:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_TIMEOUT"
        d["FFDC"]="CLK_CTRL_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd8de9dec:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_TIMEOUT"
        d["FFDC"]="CPLT_STAT0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x61d00e3f:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_TIMEOUT"
        d["FFDC"]="CLK_COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x39a5f824:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_TIMEOUT"
        d["FFDC"]="CLK_REGIONS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xddad04ee:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_TIMEOUT"
        d["FFDC"]="QUAD_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7a226f39:
        d["HwpReturnCode"]="RC_P10_OMI_SETUP_BARS_INVALID_BAR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x736f9ea2:
        d["HwpReturnCode"]="RC_P10_OMI_SETUP_BARS_INVALID_BAR"
        d["FFDC"]="BAR_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x784e88d8:
        d["HwpReturnCode"]="RC_PPE_STATE_HALT_TIMEOUT_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd4bcaa2d:
        d["HwpReturnCode"]="RC_PPE_STATE_HALT_TIMEOUT_ERR"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8671ab48:
        d["HwpReturnCode"]="RC_QME_BAD_MODE"
        d["FFDC"]="BADMODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd2beee06:
        d["HwpReturnCode"]="RC_QME_VREF_CALIBRATION_FAILED"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7e163b40:
        d["HwpReturnCode"]="RC_QME_VREF_CALIBRATION_FAILED"
        d["FFDC"]="VREF_CALIBRATION_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x244a4543:
        d["HwpReturnCode"]="RC_QME_VREF_CALIBRATION_FAILED"
        d["FFDC"]="IS_VDM_ENABLED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xebe689ed:
        d["HwpReturnCode"]="RC_QME_VREF_CALIBRATION_FAILED"
        d["FFDC"]="IS_IVRM_ENABLED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8a2af8b8:
        d["HwpReturnCode"]="RC_QME_START_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x55de1d64:
        d["HwpReturnCode"]="RC_QME_START_TIMEOUT"
        d["FFDC"]="PPE_STATE_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfda675a2:
        d["HwpReturnCode"]="RC_QME_START_TIMEOUT"
        d["FFDC"]="OCC_FLAG_REG_VAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x79063432:
        d["HwpReturnCode"]="RC_QME_START_TIMEOUT"
        d["FFDC"]="XSR_REG_VAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x141e5326:
        d["HwpReturnCode"]="RC_QME_START_HALTED"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3ef27b37:
        d["HwpReturnCode"]="RC_QME_START_HALTED"
        d["FFDC"]="OCC_FLAG_REG_VAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x07c55568:
        d["HwpReturnCode"]="RC_QME_START_HALTED"
        d["FFDC"]="XSR_REG_VAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x11620f48:
        d["HwpReturnCode"]="RC_QME_HALT_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x05f55453:
        d["HwpReturnCode"]="RC_QME_HALT_TIMEOUT"
        d["FFDC"]="PPE_STATE_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x06621d42:
        d["HwpReturnCode"]="RC_QME_INVALID_CORE_EX_CONFIG"
        d["FFDC"]="CORE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4c959289:
        d["HwpReturnCode"]="RC_QME_INVALID_CORE_EX_CONFIG"
        d["FFDC"]="EX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe98e1108:
        d["HwpReturnCode"]="RC_QME_INVALID_CORE_EX_CONFIG"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7f413f6f:
        d["HwpReturnCode"]="RC_QME_INVALID_CORE_EQ_CONFIG"
        d["FFDC"]="CORE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9c642c6c:
        d["HwpReturnCode"]="RC_QME_INVALID_CORE_EQ_CONFIG"
        d["FFDC"]="EQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x14661e0a:
        d["HwpReturnCode"]="RC_QME_INVALID_CORE_EQ_CONFIG"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x48c42b4f:
        d["HwpReturnCode"]="RC_QME_INVALID_EX_CORE_CONFIG"
        d["FFDC"]="EX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9ffc9b90:
        d["HwpReturnCode"]="RC_QME_INVALID_EX_CORE_CONFIG"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x463e164a:
        d["HwpReturnCode"]="RC_QME_BCE_BUSY_ERR"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe16b9c10:
        d["HwpReturnCode"]="RC_QME_BCE_HW_ERR"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xaac0e157:
        d["HwpReturnCode"]="RC_QME_HCODE_TRANSFER_FAILED"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa69066b0:
        d["HwpReturnCode"]="RC_OPIT_INTERRUPT_NOT_CLEAR"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4b6a4cef:
        d["HwpReturnCode"]="RC_OPIT_INTERRUPT_NOT_CLEAR"
        d["FFDC"]="LOOP_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf19890c0:
        d["HwpReturnCode"]="RC_OPIT_INTERRUPT_NOT_CLEAR"
        d["FFDC"]="OPIT_AND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3b233d96:
        d["HwpReturnCode"]="RC_CORECACHE_REALIGN_TIMEOUT"
        d["FFDC"]="REALIGN_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe898d6bf:
        d["HwpReturnCode"]="RC_CORECACHE_REALIGN_TIMEOUT"
        d["FFDC"]="CPLT_STAT0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x35852ba0:
        d["HwpReturnCode"]="RC_CORECACHE_REALIGN_TIMEOUT"
        d["FFDC"]="CLK_REGIONS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd9870b55:
        d["HwpReturnCode"]="RC_CORECACHE_REALIGN_TIMEOUT"
        d["FFDC"]="QUAD_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0cfd14a8:
        d["HwpReturnCode"]="RC_P10_OCMB_ENABLE_SWIZZLE_BIT_OUT_OF_RANGE_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc08d3990:
        d["HwpReturnCode"]="RC_P10_OCMB_ENABLE_SWIZZLE_BIT_OUT_OF_RANGE_ERROR"
        d["FFDC"]="BIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x68af5e21:
        d["HwpReturnCode"]="RC_P10_OCMB_ENABLE_SWIZZLE_BIT_OUT_OF_RANGE_ERROR"
        d["FFDC"]="MIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa37e0c17:
        d["HwpReturnCode"]="RC_P10_OCMB_ENABLE_SWIZZLE_BIT_OUT_OF_RANGE_ERROR"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0aea71ba:
        d["HwpReturnCode"]="RC_SBE_SPI_INVALID_PORT_MULTIPLEX_SET"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfa87ddc7:
        d["HwpReturnCode"]="RC_SBE_SPI_INVALID_PORT_MULTIPLEX_SET"
        d["FFDC"]="BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x877a35b9:
        d["HwpReturnCode"]="RC_SBE_SPI_INVALID_PORT_MULTIPLEX_SET"
        d["FFDC"]="STATUS_REGISTER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4f14b38c:
        d["HwpReturnCode"]="RC_SBE_SPI_CMD_STATUS_REG_UNSUPPORTED_STATE"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe7ac9376:
        d["HwpReturnCode"]="RC_SBE_SPI_CMD_STATUS_REG_UNSUPPORTED_STATE"
        d["FFDC"]="BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xab7178bc:
        d["HwpReturnCode"]="RC_SBE_SPI_CMD_STATUS_REG_UNSUPPORTED_STATE"
        d["FFDC"]="STATUS_REGISTER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7fe08933:
        d["HwpReturnCode"]="RC_SBE_SPI_CMD_STATUS_REG_UNSUPPORTED_STATE"
        d["FFDC"]="CHECK_FLAGS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf65425a6:
        d["HwpReturnCode"]="RC_SBE_SPI_HANG_TIMEOUT"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4dc43036:
        d["HwpReturnCode"]="RC_SBE_SPI_HANG_TIMEOUT"
        d["FFDC"]="BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0a5bcdc5:
        d["HwpReturnCode"]="RC_SBE_SPI_HANG_TIMEOUT"
        d["FFDC"]="STATUS_REGISTER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x53be99da:
        d["HwpReturnCode"]="RC_SBE_SPI_HANG_TIMEOUT"
        d["FFDC"]="TIMEOUT_MSEC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x74ad7ebe:
        d["HwpReturnCode"]="RC_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xad05a382:
        d["HwpReturnCode"]="RC_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL"
        d["FFDC"]="CURRENT_EQ_CHIPLET_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x91a764e8:
        d["HwpReturnCode"]="RC_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL"
        d["FFDC"]="FIRST_EQ_CHIPLET_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x716aa6f3:
        d["HwpReturnCode"]="RC_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL"
        d["FFDC"]="BUCKET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x73363834:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xace95c5f:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="CHIPLET_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xed4ecc05:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="BUCKET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc17c5ffd:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="POINT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x08b52514:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="FREQUENCY_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2365f18d:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="VDD_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x672994e8:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x448bfbe7:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb2ee1127:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7018c7cd:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x758768b5:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="VCS_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x64cbb1d0:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x913f013f:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x78ef3ff4:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe8325b8a:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x729e08a0:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IRT_RDP_AC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3e731617:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IRT_RDP_DC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8f3e8ac8:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="VDD_VMIN_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa6a1b14f:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="FREQUENCY_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6b43a139:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="VDD_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x90f62d56:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_TDP_AC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3112b70d:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_TDP_DC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa8cb9c8a:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_RDP_AC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd1c1b3d9:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_RDP_DC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa6803c44:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="VCS_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x84490cbb:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_TDP_AC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf8c4c6c2:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_TDP_DC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1f4f8536:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_RDP_AC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8bf1a030:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_RDP_DC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4c1624be:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IRT_RDP_AC_10MA_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4fc33205:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IRT_RDP_DC_10MA_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x99f18c08:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="VDD_VMIN_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf97c6112:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x48d53008:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="CHIPLET_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbebd301f:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="BUCKET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc2c39c89:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="POINT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x00ebd332:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="FREQUENCY_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdaec1c54:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="VDD_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x99e82468:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb4729085:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb4010d2d:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xca82dbff:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbd651cac:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="VCS_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x94332eeb:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3bccc899:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3f720f95:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbb84563a:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xec153ae4:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IRT_RDP_AC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x37905c7f:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IRT_RDP_DC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6c9e43b1:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="VDD_VMIN_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc46b3b15:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="FREQUENCY_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xffc98351:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="VDD_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9f24ed33:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_TDP_AC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x80b45980:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_TDP_DC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xded6d0cd:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_RDP_AC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1d217888:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_RDP_DC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x44716941:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="VCS_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7301a41f:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_TDP_AC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6dd06b2d:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_TDP_DC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x246e15f0:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_RDP_AC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x37a97cbe:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_RDP_DC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd6b61110:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IRT_RDP_AC_10MA_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb0383d53:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IRT_RDP_DC_10MA_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x96a8b298:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="VDD_VMIN_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd931149a:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa0faed64:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="CHIPLET_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9b8aa040:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="BUCKET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4df039ca:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="POINT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe2ce1e35:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="FREQUENCY_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4dd09240:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="VDD_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd21b163b:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="IDD_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4dc6a078:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="IDD_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6f4cf0d5:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="IDD_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x17875a5d:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="IDD_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7fae26e8:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="VCS_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x74d309c9:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="ICS_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x753dfef0:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="ICS_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcfc6e01c:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="ICS_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x29b0baa2:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="ICS_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x06bc6837:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="IRT_RDP_AC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc6b511be:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="IRT_RDP_DC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xea886627:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="VDD_VMIN_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4338a147:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7aa8e8f6:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="CHIPLET_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0cca6c27:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="BUCKET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcdf9e14b:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="POINT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x83d22411:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="FREQUENCY_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6746f012:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="VDD_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x50a37712:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="IDD_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfa5c6646:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="IDD_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd4c8d135:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="IDD_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4b13bf20:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="IDD_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe9910c96:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="VCS_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc04d727a:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="ICS_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf50093b4:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="ICS_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x16f57189:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="ICS_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x883482e4:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="ICS_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x804c3569:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="IRT_RDP_AC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xda274f83:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="IRT_RDP_DC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1a402eed:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="VDD_VMIN_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xeaea3219:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdf979f29:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="CHIPLET_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7a61cfea:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="BUCKET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x68a84ada:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="FREQUENCY_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfa79f64a:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="VDD_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe84e494b:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="IDD_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb75dd987:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="IDD_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf5d9d92a:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="IDD_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x724e3011:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="IDD_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb99b73fc:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="VCS_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xde83086c:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="ICS_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc1b63301:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="ICS_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc23177c3:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="ICS_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x36a23bac:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="ICS_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbc21d5d2:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="IRT_RDP_AC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7408cdfc:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="IRT_RDP_DC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x95f556cc:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="VDD_VMIN_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9a8dc5f6:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x55ef48b0:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="CHIPLET_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbee73730:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="BUCKET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x86ce7ac9:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="FREQUENCY_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa34868ee:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="VDD_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa21b40b4:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="IDD_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0064f072:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="IDD_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6a3f7a74:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="IDD_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xba2e1671:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="IDD_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xde4548b2:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="VCS_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x70c759e4:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="ICS_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe38f2362:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="ICS_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5122eccd:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="ICS_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe66c7cb9:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="ICS_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3a177024:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="IRT_RDP_AC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x81b7e02d:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="IRT_RDP_DC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x203fe0f5:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_CF6_ERROR"
        d["FFDC"]="VDD_VMIN_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x75415035:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x613c90c4:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="MAGIC_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x16b76a7b:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd220d047:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="VRT_BLOCK_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7b02fc55:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="VRT_HEADER_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x092a523b:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="VRT_DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x85338e43:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="CORE_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb9abc398:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="VCS_START"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xefd07bc3:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="VCS_STEP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x324e8f74:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="VCS_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa73f4a15:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="VDD_START"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4c373338:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="VDD_STEP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x895c0adb:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="VDD_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7c335728:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="IO_START"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0472a334:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="IO_STEP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5fc70832:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="IO_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa233a7a0:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="AMB_COND_START"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd879dce8:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="AMB_COND_STEP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb564e8e3:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="AMB_COND_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0b09e0b9:
        d["HwpReturnCode"]="RC_PSTATE_PB_VRT_HEADER_DATA_INVALID"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9c1bea27:
        d["HwpReturnCode"]="RC_PSTATE_PB_VRT_HEADER_DATA_INVALID"
        d["FFDC"]="MAGIC_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3d2886fa:
        d["HwpReturnCode"]="RC_PSTATE_PB_VRT_HEADER_DATA_INVALID"
        d["FFDC"]="VRT_INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x63e3f0bc:
        d["HwpReturnCode"]="RC_PSTATE_PB_ZERO_DCCR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe58d076a:
        d["HwpReturnCode"]="RC_PSTATE_PB_IQ_VPD_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa92aaeb2:
        d["HwpReturnCode"]="RC_PSTATE_PB_IQ_VPD_ERROR"
        d["FFDC"]="VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6fb6dccb:
        d["HwpReturnCode"]="RC_PSTATE_PB_IQ_VPD_ERROR"
        d["FFDC"]="GOOD_QUADS_PER_SORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdb5e9311:
        d["HwpReturnCode"]="RC_PSTATE_PB_IQ_VPD_ERROR"
        d["FFDC"]="GOOD_NORMAL_CORES_PER_SORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x71c1bb8a:
        d["HwpReturnCode"]="RC_PSTATE_PB_IQ_VPD_ERROR"
        d["FFDC"]="GOOD_CACHES_PER_SORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x268d46f9:
        d["HwpReturnCode"]="RC_PSTATE_PB_IQ_ACCESS_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x902376b8:
        d["HwpReturnCode"]="RC_PSTATE_PB_IQ_ACCESS_ERROR"
        d["FFDC"]="FAPI_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xef91cb27:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IAC_INVALID"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x59ca4a3c:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IAC_INVALID"
        d["FFDC"]="EQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xef33aba5:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IAC_INVALID"
        d["FFDC"]="NOMINAL_TDP_IAC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x893ffc39:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IAC_INVALID"
        d["FFDC"]="POWERSAVE_TDP_IAC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4c2fb624:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IAC_INVALID"
        d["FFDC"]="TURBO_TDP_IAC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2eb17880:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IAC_INVALID"
        d["FFDC"]="ULTRA_TDP_IAC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x399e9864:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IDC_INVALID"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3979f695:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IDC_INVALID"
        d["FFDC"]="EQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1cd90622:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IDC_INVALID"
        d["FFDC"]="NOMINAL_TDP_IDC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe57011c7:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IDC_INVALID"
        d["FFDC"]="POWERSAVE_TDP_IDC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x77fd7c22:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IDC_INVALID"
        d["FFDC"]="TURBO_TDP_IDC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x49356a0a:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IDC_INVALID"
        d["FFDC"]="ULTRA_TDP_IDC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa8490d5e:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_VALUE"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x66b6709f:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_VALUE"
        d["FFDC"]="EQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb7b9e629:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_VALUE"
        d["FFDC"]="NOMINAL_VID_COMPARE_IVID_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2016fc45:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_VALUE"
        d["FFDC"]="POWERSAVE_VID_COMPARE_IVID_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd6068f8b:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_VALUE"
        d["FFDC"]="TURBO_VID_COMPARE_IVID_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcf5ef57b:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_VALUE"
        d["FFDC"]="ULTRA_VID_COMPARE_IVID_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9548ac62:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_ORDER"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf6a29a7b:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_ORDER"
        d["FFDC"]="EQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2f7c46d7:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_ORDER"
        d["FFDC"]="NOMINAL_VID_COMPARE_IVID_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xab5de610:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_ORDER"
        d["FFDC"]="POWERSAVE_VID_COMPARE_IVID_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xae7777ad:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_ORDER"
        d["FFDC"]="TURBO_VID_COMPARE_IVID_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4db95061:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_ORDER"
        d["FFDC"]="ULTRA_VID_COMPARE_IVID_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc2a57645:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_THRESHOLD_VALUE"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x83427244:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_THRESHOLD_VALUE"
        d["FFDC"]="EQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf67f98e5:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_THRESHOLD_VALUE"
        d["FFDC"]="OP_POINT_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdd35ac1f:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_THRESHOLD_VALUE"
        d["FFDC"]="VDM_OVERVOLT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x11bdc728:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_THRESHOLD_VALUE"
        d["FFDC"]="VDM_SMALL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x55c211d4:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_THRESHOLD_VALUE"
        d["FFDC"]="VDM_EXTREME"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x34ec8198:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_THRESHOLD_VALUE"
        d["FFDC"]="VDM_LARGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x23e7ac16:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_FREQ_DROP_VALUE"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x32550e0f:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_FREQ_DROP_VALUE"
        d["FFDC"]="EQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x56ae9533:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_FREQ_DROP_VALUE"
        d["FFDC"]="OP_POINT_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf47e9167:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_FREQ_DROP_VALUE"
        d["FFDC"]="VDM_NORMAL_SMALL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x132c9e60:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_FREQ_DROP_VALUE"
        d["FFDC"]="VDM_NORMAL_LARGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x08a29c42:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_FREQ_DROP_VALUE"
        d["FFDC"]="VDM_LARGE_SMALL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x26eb74d0:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_FREQ_DROP_VALUE"
        d["FFDC"]="VDM_SMALL_NORMAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa650c1b3:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_VERY_INVALID_VDM_DATA"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa5568d9c:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_VERY_INVALID_VDM_DATA"
        d["FFDC"]="TURBO_LARGE_THRESHOLD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x30823714:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_ACCESS_FAIL"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb0316d5d:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_ACCESS_FAIL"
        d["FFDC"]="FAPI_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfc6b4902:
        d["HwpReturnCode"]="RC_PSTATE_PB_RESCLK_INDEX_ERROR"
        d["FFDC"]="FREQ_REGIONS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5c1b2adc:
        d["HwpReturnCode"]="RC_PSTATE_PB_RESCLK_INDEX_ERROR"
        d["FFDC"]="INDEX_VEC_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0c0e432b:
        d["HwpReturnCode"]="RC_PSTATE_PB_RESCLK_TABLE_ERROR"
        d["FFDC"]="STEPS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x84a14523:
        d["HwpReturnCode"]="RC_PSTATE_PB_RESCLK_TABLE_ERROR"
        d["FFDC"]="TABLE_VEC_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2c945e5f:
        d["HwpReturnCode"]="RC_PSTATE_PB_RESCLK_L3_TABLE_ERROR"
        d["FFDC"]="L3_STEPS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x635218b6:
        d["HwpReturnCode"]="RC_PSTATE_PB_RESCLK_L3_TABLE_ERROR"
        d["FFDC"]="L3_VEC_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xeaf55761:
        d["HwpReturnCode"]="RC_PSTATE_PB_CORE_FLOOR_FREQ_GT_CF6_FREQ"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4a61a636:
        d["HwpReturnCode"]="RC_PSTATE_PB_CORE_FLOOR_FREQ_GT_CF6_FREQ"
        d["FFDC"]="CORE_FLOOR_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5f4405b8:
        d["HwpReturnCode"]="RC_PSTATE_PB_CORE_FLOOR_FREQ_GT_CF6_FREQ"
        d["FFDC"]="UT_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa2b24a70:
        d["HwpReturnCode"]="RC_PSTATE_PB_FREQ2PS_LT_PSTATE_MIN_ERROR"
        d["FFDC"]="FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x95623060:
        d["HwpReturnCode"]="RC_PSTATE_PB_FREQ2PS_LT_PSTATE_MIN_ERROR"
        d["FFDC"]="PSTATE32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3e8f7c61:
        d["HwpReturnCode"]="RC_PSTATE_PB_FREQ2PS_LT_PSTATE_MIN_ERROR"
        d["FFDC"]="PSTATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x456149fe:
        d["HwpReturnCode"]="RC_PSTATE_PB_SAFE_FREQ_GT_CF6_FREQ"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5699b633:
        d["HwpReturnCode"]="RC_PSTATE_PB_SAFE_FREQ_GT_CF6_FREQ"
        d["FFDC"]="SAFE_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x982449f7:
        d["HwpReturnCode"]="RC_PSTATE_PB_SAFE_FREQ_GT_CF6_FREQ"
        d["FFDC"]="UT_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x451e4bb7:
        d["HwpReturnCode"]="RC_PSTATE_PB_ATTRIBUTE_ACCESS_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb33f70f0:
        d["HwpReturnCode"]="RC_PSTATE_PAU_FREQ_EQ_ZERO"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x88288cfc:
        d["HwpReturnCode"]="RC_PSTATE_PB_UT_PSTATE0_FREQ_MISMATCH"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x48bd7305:
        d["HwpReturnCode"]="RC_PSTATE_PB_UT_PSTATE0_FREQ_MISMATCH"
        d["FFDC"]="UT_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x928e0b87:
        d["HwpReturnCode"]="RC_PSTATE_PB_UT_PSTATE0_FREQ_MISMATCH"
        d["FFDC"]="PSTATE0_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xad0068a2:
        d["HwpReturnCode"]="RC_PSTATE_PB_FMAX_ZERO_WHEN_ENABLED"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe2e47712:
        d["HwpReturnCode"]="RC_PSTATE_PB_UT_NOT_REGION6"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8b1fce97:
        d["HwpReturnCode"]="RC_PSTATE_PB_UT_NOT_REGION6"
        d["FFDC"]="PSTATE0_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x828f7625:
        d["HwpReturnCode"]="RC_PSTATE_PB_UT_NOT_REGION6"
        d["FFDC"]="UT_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x663934f2:
        d["HwpReturnCode"]="RC_PSTATE_PB_FMAX_ZERO_UT_INTERPOLATION"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x289c0cfd:
        d["HwpReturnCode"]="RC_PSTATE_PB_FMAX_ZERO_UT_INTERPOLATION"
        d["FFDC"]="UT_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xebb22ff0:
        d["HwpReturnCode"]="RC_PSTATE_PB_FMAX_ZERO_UT_INTERPOLATION"
        d["FFDC"]="CF6_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x92b49b6a:
        d["HwpReturnCode"]="RC_PSTATE_PB_STRETCH_REGION_LACKS_STEPS"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb6447d15:
        d["HwpReturnCode"]="RC_PSTATE_PB_STRETCH_REGION_LACKS_STEPS"
        d["FFDC"]="UT_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x031501e3:
        d["HwpReturnCode"]="RC_PSTATE_PB_STRETCH_REGION_LACKS_STEPS"
        d["FFDC"]="STRETCH_REGION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x371a4d0d:
        d["HwpReturnCode"]="RC_PSTATE_PB_STRETCH_REGION_LACKS_STEPS"
        d["FFDC"]="STRETCH_REGION_P1_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa6d702b5:
        d["HwpReturnCode"]="RC_PSTATE_PB_STRETCH_REGION_LACKS_STEPS"
        d["FFDC"]="STRETCH_REGION_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x577207c3:
        d["HwpReturnCode"]="RC_PM_OCC_GPE_BAD_MODE"
        d["FFDC"]="BADMODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8ce22905:
        d["HwpReturnCode"]="RC_PM_OCC_GPE0_HALT_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdb5dc49d:
        d["HwpReturnCode"]="RC_PM_OCC_GPE0_HALT_TIMEOUT"
        d["FFDC"]="GPE0_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd939f646:
        d["HwpReturnCode"]="RC_PM_OCC_GPE0_HALT_TIMEOUT"
        d["FFDC"]="GPE0_BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd2adcd39:
        d["HwpReturnCode"]="RC_PM_OCC_GPE1_HALT_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6d025e64:
        d["HwpReturnCode"]="RC_PM_OCC_GPE1_HALT_TIMEOUT"
        d["FFDC"]="GPE1_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcab7f2ad:
        d["HwpReturnCode"]="RC_PM_OCC_GPE1_HALT_TIMEOUT"
        d["FFDC"]="GPE1_BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3acbe409:
        d["HwpReturnCode"]="RC_PM_OCB_PUT_NO_DATA_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe65883b4:
        d["HwpReturnCode"]="RC_PM_OCB_PUT_NO_DATA_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdbbf3b26:
        d["HwpReturnCode"]="RC_PM_OCB0_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xed2ff07f:
        d["HwpReturnCode"]="RC_PM_OCB0_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8db4e77c:
        d["HwpReturnCode"]="RC_PM_OCB0_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8842b183:
        d["HwpReturnCode"]="RC_PM_OCB1_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4b68f7a4:
        d["HwpReturnCode"]="RC_PM_OCB1_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2d49aa23:
        d["HwpReturnCode"]="RC_PM_OCB1_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x24ccfa3c:
        d["HwpReturnCode"]="RC_PM_OCB2_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa208418b:
        d["HwpReturnCode"]="RC_PM_OCB2_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0926b797:
        d["HwpReturnCode"]="RC_PM_OCB2_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe27224ae:
        d["HwpReturnCode"]="RC_PM_OCB3_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd527cefa:
        d["HwpReturnCode"]="RC_PM_OCB3_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x28369ed1:
        d["HwpReturnCode"]="RC_PM_OCB3_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa19ad222:
        d["HwpReturnCode"]="RC_PM_OCB0_GET_DATA_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe404265f:
        d["HwpReturnCode"]="RC_PM_OCB0_GET_DATA_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf00e5fcb:
        d["HwpReturnCode"]="RC_PM_OCB0_GET_DATA_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x656af1dd:
        d["HwpReturnCode"]="RC_PM_OCB1_GET_DATA_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf447d75e:
        d["HwpReturnCode"]="RC_PM_OCB1_GET_DATA_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6fd578c5:
        d["HwpReturnCode"]="RC_PM_OCB1_GET_DATA_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x91eec05b:
        d["HwpReturnCode"]="RC_PM_OCB2_GET_DATA_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3409cc0a:
        d["HwpReturnCode"]="RC_PM_OCB2_GET_DATA_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x956cafab:
        d["HwpReturnCode"]="RC_PM_OCB2_GET_DATA_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x84da9181:
        d["HwpReturnCode"]="RC_PM_OCB3_GET_DATA_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb8f0f2cc:
        d["HwpReturnCode"]="RC_PM_OCB3_GET_DATA_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcf8e46cf:
        d["HwpReturnCode"]="RC_PM_OCB3_GET_DATA_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1f5f2ac5:
        d["HwpReturnCode"]="RC_PM_OCC_FIRINIT_BAD_MODE"
        d["FFDC"]="BADMODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcbb85194:
        d["HwpReturnCode"]="RC_P10_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="MSS_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x28bd4ee2:
        d["HwpReturnCode"]="RC_P10_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="SUPPORTED_FREQ_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x97bbdca5:
        d["HwpReturnCode"]="RC_P10_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="SUPPORTED_FREQ_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd27f4bbd:
        d["HwpReturnCode"]="RC_P10_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="SUPPORTED_FREQ_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2267e3c9:
        d["HwpReturnCode"]="RC_P10_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x71dc19c6:
        d["HwpReturnCode"]="RC_P10_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="PROC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd887c1b0:
        d["HwpReturnCode"]="RC_P10_MSS_FAILED_SYNC_MODE"
        d["FFDC"]="OMI_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8dcbb9e1:
        d["HwpReturnCode"]="RC_P10_MSS_FAILED_SYNC_MODE"
        d["FFDC"]="MEM_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x72c5fc79:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_VPD_FREQ_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x65ea8da8:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_VPD_FREQ_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x71980d10:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_VPD_FREQ_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x988d7e25:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_MAX_FREQ_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb6c005ed:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_MAX_FREQ_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd6eae5e5:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_MAX_FREQ_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x58fce227:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_MAX_FREQ_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x36096953:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_MAX_FREQ_4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x676b8488:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="OMI_FREQ_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfaf65fc4:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="OMI_FREQ_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8c998613:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="OMI_FREQ_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9a7b8b93:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="MEM_PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xda98667f:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="MRW_MAX_FREQ_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x04799029:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="MRW_MAX_FREQ_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8bb34c4f:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="MRW_MAX_FREQ_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7c2ca02f:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="MRW_MAX_FREQ_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6261e8ad:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="MRW_MAX_FREQ_4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x84d03f60:
        d["HwpReturnCode"]="RC_P10_MSS_UNSUPPORTED_OMI_FREQ"
        d["FFDC"]="OMI_FREQ_ENUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbc90ba53:
        d["HwpReturnCode"]="RC_P10_MSS_ZERO_HOST_TO_DDR_FREQ_RATIO"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3837cba9:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MASTER_DESIGNATION_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1ed47845:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MASTER_DESIGNATION_ERR"
        d["FFDC"]="OP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2a340f39:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MASTER_DESIGNATION_ERR"
        d["FFDC"]="GROUP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe6b5cd2b:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MASTER_DESIGNATION_ERR"
        d["FFDC"]="CHIP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbe292f6e:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MASTER_DESIGNATION_ERR"
        d["FFDC"]="MASTER_CHIP_SYS_CURR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb97507f1:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MASTER_DESIGNATION_ERR"
        d["FFDC"]="MASTER_CHIP_GROUP_CURR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3cdc5dfc:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MASTER_DESIGNATION_ERR"
        d["FFDC"]="MASTER_CHIP_SYS_NEXT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x69e85869:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MASTER_DESIGNATION_ERR"
        d["FFDC"]="MASTER_CHIP_GROUP_NEXT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x375dfa71:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_GROUP_ADD_INTERNAL_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2d655941:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_GROUP_ADD_INTERNAL_ERR"
        d["FFDC"]="GROUP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3721ba4a:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR"
        d["FFDC"]="TARGET1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x72c9cdf8:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR"
        d["FFDC"]="TARGET2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xed9de0c1:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR"
        d["FFDC"]="GROUP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf408c086:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR"
        d["FFDC"]="CHIP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf28068ee:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MULTIPLE_MASTER_DESIGNATION_ERR"
        d["FFDC"]="MASTER_CHIP_SYS_NEXT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbb7deb13:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MULTIPLE_MASTER_DESIGNATION_ERR"
        d["FFDC"]="OP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xadc5c630:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_NO_MASTER_DESIGNATION_ERR"
        d["FFDC"]="MASTER_CHIP_SYS_NEXT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x550027b4:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_NO_MASTER_DESIGNATION_ERR"
        d["FFDC"]="OP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5370c732:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MAX_SIZE_ERR"
        d["FFDC"]="SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7daea5bf:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MAX_SIZE_ERR"
        d["FFDC"]="MAX_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe08a649e:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MAX_SIZE_ERR"
        d["FFDC"]="OP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd9023548:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_LINK_STATE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1ff5b76d:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_LINK_STATE"
        d["FFDC"]="LINK_EN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdeaaa5d3:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_LINK_STATE"
        d["FFDC"]="DL_FIR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9fb7b89a:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_LINK_STATE"
        d["FFDC"]="TL_FIR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x179084e7:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_LINK_STATE"
        d["FFDC"]="CPLT_CONF1_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x20c0a1be:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa0436f73:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="OP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x21b676f8:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="GROUP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8557d60a:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="CHIP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbe6ca26c:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="INTERGROUP_CONNECTIONS_OK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfd8221ad:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="CONNECTED_GROUP_IDS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x07e7d4e7:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="GROUP_IDS_IN_SYSTEM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc8178318:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="INTRAGROUP_CONNECTIONS_OK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3465c188:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="CONNECTED_CHIP_IDS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3d1c20b3:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="CHIP_IDS_IN_GROUPS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6f3903f2:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="FBC_BROADCAST_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8d001ce0:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_HOTPLUG_CONSISTENCY_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xba08028a:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_HOTPLUG_CONSISTENCY_ERR"
        d["FFDC"]="ADDRESS0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xde2efa4e:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_HOTPLUG_CONSISTENCY_ERR"
        d["FFDC"]="ADDRESS1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xafaa55ea:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_HOTPLUG_CONSISTENCY_ERR"
        d["FFDC"]="DATA0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x045bfe39:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_HOTPLUG_CONSISTENCY_ERR"
        d["FFDC"]="DATA1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7a9b986a:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_BAD_ADU_ACTION_ERR"
        d["FFDC"]="OP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x820a56a5:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_BAD_ADU_ACTION_ERR"
        d["FFDC"]="ACTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf72c3230:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_ADU_STATUS_MISMATCH_ERR"
        d["FFDC"]="CHIP_DATA_VALID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x26ffb0ae:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_ADU_STATUS_MISMATCH_ERR"
        d["FFDC"]="GROUP_IDS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbe2978e3:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_ADU_STATUS_MISMATCH_ERR"
        d["FFDC"]="CHIP_IDS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4065d199:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_ADU_STATUS_MISMATCH_ERR"
        d["FFDC"]="FFDC_ADDRS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf4c3b5e1:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_ADU_STATUS_MISMATCH_ERR"
        d["FFDC"]="FFDC_REG_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8fd0967f:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_DLR_REM_ENDP_TARGET_ERR"
        d["FFDC"]="LOC_ENDP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x420ba9d5:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_DLR_INVALID_MODE"
        d["FFDC"]="DLR_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x491f30df:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_NODE_DELAY"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6e82a748:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_NODE_DELAY"
        d["FFDC"]="PATH_DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x67be062f:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_NODE_DELAY"
        d["FFDC"]="LONGEST_DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x695e417e:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_LATENCY"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd9791f92:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_LATENCY"
        d["FFDC"]="IOHS_LATENCY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8cf947b2:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_LATENCY"
        d["FFDC"]="ROUND_TRIP_TIME"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4c674b1e:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_LATENCY"
        d["FFDC"]="LATENCY_MEASURE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x777ad96f:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_TOPOLOGY"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0558eb69:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_TOPOLOGY"
        d["FFDC"]="OSCSEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x33e1d6ad:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_TOPOLOGY"
        d["FFDC"]="TODSEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdb2dc590:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_TOPOLOGY_RX"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4c7e0ada:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_TOPOLOGY_RX"
        d["FFDC"]="RX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1986f7a4:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_TOPOLOGY_TX"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1ad45eaf:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_TOPOLOGY_TX"
        d["FFDC"]="TX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xda4da619:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_CLOCK_ATTRIBUTES"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2d6b8499:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_CLOCK_ATTRIBUTES"
        d["FFDC"]="IOHS_CLOCK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x775fddbf:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_CLOCK_ATTRIBUTES"
        d["FFDC"]="PAU_CLOCK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2b389678:
        d["HwpReturnCode"]="RC_P10_TOD_INIT_NOT_RUNNING"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x17641c08:
        d["HwpReturnCode"]="RC_P10_TOD_INIT_NOT_RUNNING"
        d["FFDC"]="COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0cec9122:
        d["HwpReturnCode"]="RC_P10_TOD_INIT_NOT_RUNNING"
        d["FFDC"]="TOD_FSM_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfc4cfa28:
        d["HwpReturnCode"]="RC_P10_TOD_INIT_M_PATH_0_STEP_CHECK_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1daa6c49:
        d["HwpReturnCode"]="RC_P10_TOD_INIT_M_PATH_0_STEP_CHECK_ERROR"
        d["FFDC"]="TOD_ERROR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x98360f18:
        d["HwpReturnCode"]="RC_P10_TOD_INIT_M_PATH_1_STEP_CHECK_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x98d811ab:
        d["HwpReturnCode"]="RC_P10_TOD_INIT_M_PATH_1_STEP_CHECK_ERROR"
        d["FFDC"]="TOD_ERROR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe8e81dfc:
        d["HwpReturnCode"]="RC_P10_TOD_INIT_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcf486e05:
        d["HwpReturnCode"]="RC_P10_TOD_INIT_ERROR"
        d["FFDC"]="TOD_ERROR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2a2aeee0:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_INIT_TIMEOUT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa85ae1fe:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_INIT_TIMEOUT"
        d["FFDC"]="COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x51d538fd:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_INIT_TIMEOUT"
        d["FFDC"]="TFMR_STATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf47a3f9b:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_INIT_TIMEOUT"
        d["FFDC"]="TFMR_EXPECTED_STATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x150aeaa2:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_INIT_TIMEOUT"
        d["FFDC"]="TFMR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x541d3eba:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_INIT_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb2761a8f:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_INIT_ERROR"
        d["FFDC"]="TFMR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x44e1362a:
        d["HwpReturnCode"]="RC_P10_TOD_MF_CLK_FAILURE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdcdef5fd:
        d["HwpReturnCode"]="RC_P10_TOD_TIMER_START_SIGNAL_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfb452bbf:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_SCOM_XLATE_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6e255069:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_SCOM_XLATE_ERR"
        d["FFDC"]="CU_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7c15d24f:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_SCOM_XLATE_ERR"
        d["FFDC"]="EC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4f277d18:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_SCOM_XLATE_ERR"
        d["FFDC"]="CU_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf059d9ef:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_SCOM_XLATE_ERR"
        d["FFDC"]="ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x662cc39a:
        d["HwpReturnCode"]="RC_P10_TOD_STATUS_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x73a80cd1:
        d["HwpReturnCode"]="RC_P10_TOD_TIMER_STEP_COUNT_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xac18cc3f:
        d["HwpReturnCode"]="RC_P10_TOD_TIMER_STEP_COUNT_ERROR"
        d["FFDC"]="STEPS_PER_SYNC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa7d5d800:
        d["HwpReturnCode"]="RC_P10_TOD_TIMER_STEP_COUNT_ERROR"
        d["FFDC"]="TOD_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x70fe9ba9:
        d["HwpReturnCode"]="RC_P10_TOD_TIMER_STEP_COUNT_ERROR"
        d["FFDC"]="TOD_VALUE_INITIAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x746b4d2c:
        d["HwpReturnCode"]="RC_P10_TOD_POLLING_DELAY_CALC_OVERFLOW"
        d["FFDC"]="TOD_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xeafa5151:
        d["HwpReturnCode"]="RC_P10_TOD_POLLING_DELAY_CALC_OVERFLOW"
        d["FFDC"]="TOD_DIVISOR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x46aca787:
        d["HwpReturnCode"]="RC_P10_TOD_POLLING_DELAY_CALC_OVERFLOW"
        d["FFDC"]="NUMERIC_LIMIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb53d45bc:
        d["HwpReturnCode"]="RC_P10_TOD_INVALID_SPS"
        d["FFDC"]="TOD_SPS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5b24db16:
        d["Register FFDC"]="REG_FFDC_TOD_STATUS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_M_PATH_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_PRI_PORT_0_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_PRI_PORT_1_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_SEC_PORT_0_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_SEC_PORT_1_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_S_PATH_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_I_PATH_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_PSS_MSS_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_PSS_MSS_STATUS_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_M_PATH_STATUS_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_S_PATH_STATUS_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_M_PATH_0_STEP_STEER_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_M_PATH_1_STEP_STEER_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_CHIP_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_TRACE_DATA_1_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_TRACE_DATA_2_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_TRACE_DATA_3_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_FSM_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_TX_TTYPE_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_RX_TTYPE_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_ERROR_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_ERROR_MASK_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_ERROR_ROUTING_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x2a8cf9fb:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_INVALID_FLAG"
        d["FFDC"]="FLAGS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x80bd0b0d:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_INVALID_ARGS"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfdd05491:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_INVALID_ARGS"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7c0f6982:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_INVALID_ARGS"
        d["FFDC"]="MAXADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf1aac8d9:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_INVALID_ARGS"
        d["FFDC"]="TSIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x125bfe4e:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_INVALID_ARGS"
        d["FFDC"]="FLAGS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe7a7fb55:
        d["HwpReturnCode"]="RC_P10_ADU_FBC_NOT_INITIALIZED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb028d446:
        d["HwpReturnCode"]="RC_P10_ADU_STATUS_REG_UNEXPECTED_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe07309e1:
        d["HwpReturnCode"]="RC_P10_ADU_STATUS_REG_UNEXPECTED_ERR"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4fe53eda:
        d["HwpReturnCode"]="RC_P10_ADU_STATUS_REG_UNEXPECTED_ERR"
        d["FFDC"]="STATUSREG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x56ab77cd:
        d["HwpReturnCode"]="RC_P10_ADU_STATUS_REG_UNEXPECTED_ERR"
        d["FFDC"]="EXP_BUSY_STATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x297eed00:
        d["HwpReturnCode"]="RC_P10_ADU_STATUS_REG_UNEXPECTED_ERR"
        d["FFDC"]="ADDR_ONLY_OPER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x99478dc4:
        d["HwpReturnCode"]="RC_P10_ADU_STATUS_REG_ADDRESS_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x91324620:
        d["HwpReturnCode"]="RC_P10_ADU_STATUS_REG_ADDRESS_ERR"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf6e8409b:
        d["HwpReturnCode"]="RC_P10_ADU_STATUS_REG_ADDRESS_ERR"
        d["FFDC"]="STATUSREG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xecf1cbcc:
        d["HwpReturnCode"]="RC_P10_ADU_STATUS_REG_BAD_BUSY_STATE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8010561b:
        d["HwpReturnCode"]="RC_P10_ADU_STATUS_REG_BAD_BUSY_STATE"
        d["FFDC"]="EXPBUSYBIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x341501b5:
        d["HwpReturnCode"]="RC_P10_ADU_STATUS_REG_BAD_BUSY_STATE"
        d["FFDC"]="ACTBUSYBIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe7ef34bb:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_LOCK_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x46f15dd8:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_LOCK_ERR"
        d["FFDC"]="LOCK_PICK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd4e7202c:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_LOCK_ERR"
        d["FFDC"]="LOCK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd1ed87dd:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_LOCK_ERR"
        d["FFDC"]="NUM_ATTEMPTS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x35a7642c:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_EXTRA_INPUT_DATA"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xccde1c10:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_EXTRA_INPUT_DATA"
        d["FFDC"]="RNW"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4c45657f:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_EXTRA_INPUT_DATA"
        d["FFDC"]="FLAGS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0b2e062c:
        d["Register FFDC"]="REG_FFDC_ADU_STATUS_REGISTER"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_AD_ALTD_STATUS_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_AD_ALTD_CMD_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_AD_ALTD_DATA_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_AD_ALTD_OPTION_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_AD_ALTD_ADDR_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_AD_FORCE_ECC_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0xdd5d02e0:
        d["Register FFDC"]="REG_FFDC_ADU_FBC_NOT_INITIALIZED"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_AD_SND_MODE_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::PB_COM_SCOM_ES3_STATION_MODE",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::ATTN_INTERRUPT_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x224c1f66:
        d["HwpReturnCode"]="RC_L3_CLK_SYNC_DROP_TIMEOUT"
        d["FFDC"]="L3_CLK_SYNC_DROP_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4103f931:
        d["HwpReturnCode"]="RC_L3_CLK_SYNC_DROP_TIMEOUT"
        d["FFDC"]="CPMS_CGCSR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb62808b5:
        d["HwpReturnCode"]="RC_L3_CLK_SYNC_DROP_TIMEOUT"
        d["FFDC"]="CLK_REGIONS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd0128f99:
        d["HwpReturnCode"]="RC_L3_CLK_SYNC_DROP_TIMEOUT"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd6f8a0bf:
        d["HwpReturnCode"]="RC_QMEC_FUNC_CALL_ARGUMENT_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8d317a3a:
        d["HwpReturnCode"]="RC_QMEC_FUNC_CALL_ARGUMENT_ERROR"
        d["FFDC"]="CUST_RING_OP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x118c2838:
        d["HwpReturnCode"]="RC_QMEC_FUNC_CALL_ARGUMENT_ERROR"
        d["FFDC"]="INPUT_QME_RINGS_PTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbaa61a19:
        d["HwpReturnCode"]="RC_QMEC_FUNC_CALL_ARGUMENT_ERROR"
        d["FFDC"]="CUST_QME_RINGS_BUF_PTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x64ff66db:
        d["HwpReturnCode"]="RC_QMEC_TOR_HEADER_MISMATCH"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5ea8af06:
        d["HwpReturnCode"]="RC_QMEC_TOR_HEADER_MISMATCH"
        d["FFDC"]="TOR_MAGIC_QME_IN_HEADER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa5cb33f5:
        d["HwpReturnCode"]="RC_QMEC_TOR_HEADER_MISMATCH"
        d["FFDC"]="TOR_MAGIC_QME_DEFINED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb18c87ac:
        d["HwpReturnCode"]="RC_QMEC_TOR_HEADER_MISMATCH"
        d["FFDC"]="TOR_VERSION_IN_HEADER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x42926fc6:
        d["HwpReturnCode"]="RC_QMEC_TOR_HEADER_MISMATCH"
        d["FFDC"]="TOR_VERSION_DEFINED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x476014c5:
        d["HwpReturnCode"]="RC_QMEC_RINGS_OUTPUT_BUFFER_TOO_SMALL"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc779586d:
        d["HwpReturnCode"]="RC_QMEC_RINGS_OUTPUT_BUFFER_TOO_SMALL"
        d["FFDC"]="CUST_QME_RINGS_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x39f7d844:
        d["HwpReturnCode"]="RC_QMEC_RINGS_OUTPUT_BUFFER_TOO_SMALL"
        d["FFDC"]="INPUT_QME_RINGS_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x87f6965f:
        d["HwpReturnCode"]="RC_QMEC_RINGS_OUTPUT_BUFFER_TOO_SMALL"
        d["FFDC"]="CUST_QME_RINGS_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x23ad4a58:
        d["HwpReturnCode"]="RC_QMEC_TOR_SKELETON_GEN_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9d8f2192:
        d["HwpReturnCode"]="RC_QMEC_TOR_SKELETON_GEN_ERROR"
        d["FFDC"]="API_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x982435e1:
        d["HwpReturnCode"]="RC_QMEC_TOR_SKELETON_GEN_ERROR"
        d["FFDC"]="TOR_MAGIC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x408ccff3:
        d["HwpReturnCode"]="RC_QMEC_TOR_SKELETON_GEN_ERROR"
        d["FFDC"]="TOR_VER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb6635795:
        d["HwpReturnCode"]="RC_QMEC_TOR_SKELETON_GEN_ERROR"
        d["FFDC"]="DD_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9bb4877b:
        d["HwpReturnCode"]="RC_QMEC_TOR_SKELETON_GEN_ERROR"
        d["FFDC"]="CHIP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfd3ac7d5:
        d["HwpReturnCode"]="RC_QMEC_RINGID_API_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb74889d9:
        d["HwpReturnCode"]="RC_QMEC_RINGID_API_ERROR"
        d["FFDC"]="API_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe811a45b:
        d["HwpReturnCode"]="RC_QMEC_RINGID_API_ERROR"
        d["FFDC"]="TOR_MAGIC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbd659709:
        d["HwpReturnCode"]="RC_QMEC_RINGID_API_ERROR"
        d["FFDC"]="TOR_VER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x485bcc08:
        d["HwpReturnCode"]="RC_QMEC_RINGID_API_ERROR"
        d["FFDC"]="RP_INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x07eab9e0:
        d["HwpReturnCode"]="RC_QMEC_RINGID_API_ERROR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x412e4c50:
        d["HwpReturnCode"]="RC_QMEC_RINGID_API_ERROR"
        d["FFDC"]="CHIP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa7f7e585:
        d["HwpReturnCode"]="RC_QMEC_RINGID_API_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x314a93c4:
        d["HwpReturnCode"]="RC_QMEC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x460b33f5:
        d["HwpReturnCode"]="RC_QMEC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="API_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2074b830:
        d["HwpReturnCode"]="RC_QMEC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="DD_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8318d263:
        d["HwpReturnCode"]="RC_QMEC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe6978f78:
        d["HwpReturnCode"]="RC_QMEC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb51015e0:
        d["HwpReturnCode"]="RC_QMEC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="REM_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x64e3c256:
        d["HwpReturnCode"]="RC_QMEC_TOR_APPEND_RING_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb2c2856e:
        d["HwpReturnCode"]="RC_QMEC_TOR_APPEND_RING_ERROR"
        d["FFDC"]="API_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd2adc513:
        d["HwpReturnCode"]="RC_QMEC_TOR_APPEND_RING_ERROR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8c27e43f:
        d["HwpReturnCode"]="RC_QMEC_TOR_APPEND_RING_ERROR"
        d["FFDC"]="CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x277282ad:
        d["HwpReturnCode"]="RC_QMEC_TOR_APPEND_RING_ERROR"
        d["FFDC"]="CUST_QME_RINGS_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x82cd7c50:
        d["HwpReturnCode"]="RC_QMEC_CODE_BUG"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x20cdf902:
        d["HwpReturnCode"]="RC_QMEC_CODE_BUG"
        d["FFDC"]="API_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8c3a7a32:
        d["HwpReturnCode"]="RC_QMEC_CODE_BUG"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2ca4ab94:
        d["HwpReturnCode"]="RC_P10_DYNINIT_BITVEC_SAVE_ERROR"
        d["FFDC"]="TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4bef5036:
        d["HwpReturnCode"]="RC_P10_DYNINIT_BITVEC_SAVE_ERROR"
        d["FFDC"]="SOURCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcffd80c2:
        d["HwpReturnCode"]="RC_P10_DYNINIT_BITVEC_RANGE_ERROR"
        d["FFDC"]="BIT_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x975fc491:
        d["HwpReturnCode"]="RC_P10_DYNINIT_BITVEC_RANGE_ERROR"
        d["FFDC"]="SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x92bab146:
        d["HwpReturnCode"]="RC_P10_DYNINIT_BITVEC_RANGE_ERROR"
        d["FFDC"]="TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6295b7ba:
        d["HwpReturnCode"]="RC_P10_DYNINIT_BITVEC_RANGE_ERROR"
        d["FFDC"]="SOURCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1df3add4:
        d["HwpReturnCode"]="RC_P10_DYNINIT_BITVEC_RANGE_ERROR"
        d["FFDC"]="BIT_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x39ddc578:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_MERGE_ERROR"
        d["FFDC"]="HW_IMAGE_BIT_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf6be5d20:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_MERGE_ERROR"
        d["FFDC"]="HW_IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5bdad3fe:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_MERGE_ERROR"
        d["FFDC"]="HW_IMAGE_SOURCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xec45bead:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_MERGE_ERROR"
        d["FFDC"]="HW_IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe1a5a7cd:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_MERGE_ERROR"
        d["FFDC"]="PLAT_BIT_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x78c24a40:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_MERGE_ERROR"
        d["FFDC"]="PLAT_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3a00edda:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_MERGE_ERROR"
        d["FFDC"]="PLAT_SOURCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x772dccde:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_MERGE_ERROR"
        d["FFDC"]="PLAT_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0c592cf4:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_PLAT_ERROR"
        d["FFDC"]="HW_IMAGE_BIT_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8e584046:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_PLAT_ERROR"
        d["FFDC"]="HW_IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa6822517:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_PLAT_ERROR"
        d["FFDC"]="HW_IMAGE_SOURCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd2c18721:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_PLAT_ERROR"
        d["FFDC"]="HW_IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5b09978f:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_PLAT_ERROR"
        d["FFDC"]="PLAT_BIT_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xee94839e:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_PLAT_ERROR"
        d["FFDC"]="PLAT_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc8a6dfe4:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_PLAT_ERROR"
        d["FFDC"]="PLAT_SOURCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xac9080ec:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_PLAT_ERROR"
        d["FFDC"]="PLAT_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x18a41b93:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_PLAT_ERROR"
        d["FFDC"]="BIT_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdd83ea29:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_FEATURE_LOOKUP_ERROR"
        d["FFDC"]="MODE_BIT_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x73aa135b:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_FEATURE_LOOKUP_ERROR"
        d["FFDC"]="MODE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x99be6f5f:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_FEATURE_LOOKUP_ERROR"
        d["FFDC"]="MODE_SOURCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0a0941d3:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_FEATURE_LOOKUP_ERROR"
        d["FFDC"]="MODE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3e29a670:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_FEATURE_LOOKUP_ERROR"
        d["FFDC"]="FEATURE_BIT_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0412a213:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_FEATURE_LOOKUP_ERROR"
        d["FFDC"]="FEATURE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6d20adcd:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_FEATURE_LOOKUP_ERROR"
        d["FFDC"]="FEATURE_SOURCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x77915e1c:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_FEATURE_LOOKUP_ERROR"
        d["FFDC"]="FEATURE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x48fbe094:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_UNEQUAL_MC_FREQS"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcf24f7c4:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_UNEQUAL_MC_FREQS"
        d["FFDC"]="MC_UNIT1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9de645db:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_UNEQUAL_MC_FREQS"
        d["FFDC"]="MC_FREQ1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2e480d65:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_UNEQUAL_MC_FREQS"
        d["FFDC"]="MC_UNIT2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x19ee96a9:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_UNEQUAL_MC_FREQS"
        d["FFDC"]="MC_FREQ2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x206a0536:
        d["HwpReturnCode"]="RC_P10_CHIPLET_FABRIC_SCOMINIT_INVALID_IOHS_LINK"
        d["FFDC"]="IOHS_LINK_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb993425e:
        d["HwpReturnCode"]="RC_P10_CHIPLET_FABRIC_SCOMINIT_INVALID_HW543384_WAR_MODE"
        d["FFDC"]="WAR_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7fdfbe3a:
        d["HwpReturnCode"]="RC_P10_CHIPLET_FABRIC_SCOMINIT_INVALID_HW543384_WAR_MODE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcf4331f7:
        d["HwpReturnCode"]="RC_QME_META_COREQ_PROTECT_FAIL"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8f57f1e8:
        d["HwpReturnCode"]="RC_QME_META_COREQ_PROTECT_FAIL"
        d["FFDC"]="HW_IMAGE_ATTR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0e50a8ac:
        d["HwpReturnCode"]="RC_QME_META_COREQ_PROTECT_FAIL"
        d["FFDC"]="HCD_BUILD_ATTR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x26f311ef:
        d["HwpReturnCode"]="RC_P10_SMP_LINK_FIRS_IOHS_NOT_SMP"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x09274f08:
        d["HwpReturnCode"]="RC_P10_SMP_LINK_FIRS_IOHS_NOT_SMP"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7cec07c8:
        d["HwpReturnCode"]="RC_P10_SMP_LINK_FIRS_UNSUPPORTED_ACTION"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x97408908:
        d["HwpReturnCode"]="RC_P10_SMP_LINK_FIRS_UNSUPPORTED_ACTION"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8b75f224:
        d["HwpReturnCode"]="RC_P10_SMP_LINK_FIRS_UNSUPPORTED_ACTION"
        d["FFDC"]="ACTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbfe69032:
        d["Register FFDC"]="REG_FFDC_SMP_LINK_FIRS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    elif ffdcId == 0x73a4714a:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_VPD_BUFFER_INADEQUATE_TO_GET_DDR_TYPE"
        d["FFDC"]="VPD_BUFFER_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x570aa68a:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_VPD_BUFFER_INADEQUATE_TO_GET_DDR_TYPE"
        d["FFDC"]="REQUIRED_MIN_BUFFER_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa04d32cb:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_VPD_BUFFER_INADEQUATE_TO_GET_DDR_TYPE"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7da8edc8:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_VPD_BUFFER_INADEQUATE_TO_GET_DDR_TYPE"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcfd0360b:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_VPD_BUFFER_INADEQUATE_FOR_DDR"
        d["FFDC"]="VPD_BUFFER_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc6f56ed3:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_VPD_BUFFER_INADEQUATE_FOR_DDR"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6d190f5b:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_VPD_BUFFER_INADEQUATE_FOR_DDR"
        d["FFDC"]="REQUIRED_MIN_BUFFER_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x76fb89a5:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_VPD_BUFFER_INADEQUATE_FOR_DDR"
        d["FFDC"]="REQUIRED_DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x63e1d09d:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_VPD_BUFFER_INADEQUATE_FOR_DDR"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x01dc6ec6:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_VPD_BUFFER_INADEQUATE_FOR_DDR"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4af6ef92:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_OFFSET_ERROR"
        d["FFDC"]="EFD_MEMORY_SPACE_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc5f0af14:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_OFFSET_ERROR"
        d["FFDC"]="DDR4_MEMORY_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x036ef023:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_OFFSET_ERROR"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf8d4f4d1:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_OFFSET_ERROR"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6a17e86b:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_OFFSET_ERROR"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc2aa9500:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SIZE_MAPPING_ERROR"
        d["FFDC"]="EFD_MEMORY_SPACE_MAPPING_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x208f213a:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SIZE_MAPPING_ERROR"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x905e9d9c:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SIZE_MAPPING_ERROR"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcb6255c5:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SIZE_MAPPING_ERROR"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa3c125df:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_SIZE_ERROR"
        d["FFDC"]="EFD_MEMORY_SPACE_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfb36863d:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_SIZE_ERROR"
        d["FFDC"]="EFD_MEMORY_SPACE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2bf534cf:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_SIZE_ERROR"
        d["FFDC"]="VPD_BUFFER_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x674d5b4f:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_SIZE_ERROR"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x55f64f3f:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_SIZE_ERROR"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcc4fbbb9:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_SIZE_ERROR"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x899d9f4a:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_NUMBER_OF_EFD_IS_ZERO"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe0cc6653:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_NUMBER_OF_EFD_IS_ZERO"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8efbb57a:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_NUMBER_OF_EFD_IS_ZERO"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x65e51fe6:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_INADEQUATE_EFD_BUFFER_SIZE"
        d["FFDC"]="EFD_BUFFER_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4268a6c2:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_INADEQUATE_EFD_BUFFER_SIZE"
        d["FFDC"]="EFD_BLOCK_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5e670a6c:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_INADEQUATE_EFD_BUFFER_SIZE"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9acf20d0:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_INADEQUATE_EFD_BUFFER_SIZE"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0e7a8afc:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_INADEQUATE_EFD_BUFFER_SIZE"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd2e6e313:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_DMB_MFG_ID"
        d["FFDC"]="DMB_MFG_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5608bb64:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_DMB_MFG_ID"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf7ac0403:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_DMB_MFG_ID"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2cfa468d:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_DMB_MFG_ID"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x4d4d3cc5:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_DMB_REVISION"
        d["FFDC"]="DMB_REVISION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x25c8808b:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_DMB_REVISION"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x98ac5070:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_DMB_REVISION"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x388c7bbb:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_DMB_REVISION"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x09eea2c2:
        d["HwpReturnCode"]="RC_DDIMM_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="UNSUPPORTED_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x98106036:
        d["HwpReturnCode"]="RC_DDIMM_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="SUPPORTED_FREQS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x34d06a7f:
        d["HwpReturnCode"]="RC_DDIMM_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x34b73914:
        d["HwpReturnCode"]="RC_DDIMM_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9b9a7ce5:
        d["HwpReturnCode"]="RC_DDIMM_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9592a3d9:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="UNSUPPORTED_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xff5be823:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="FREQ0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x021a3724:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="FREQ1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x113a5a26:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="FREQ2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbedce48c:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="FREQ3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe495bf5b:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="FREQ4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x967cd36c:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="FREQ5"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x72c2677d:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="FREQ6"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x474ca748:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x22cca8a6:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3444fcb8:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x89d4e5bc:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_RANK"
        d["FFDC"]="UNSUPPORTED_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x975293fb:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_RANK"
        d["FFDC"]="RANK0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5470231e:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_RANK"
        d["FFDC"]="RANK1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7a541406:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_RANK"
        d["FFDC"]="RANK2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe5a184ad:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_RANK"
        d["FFDC"]="RANK3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x67c78010:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_RANK"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9fc55c48:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_RANK"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd619b509:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_RANK"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe8e7cf9e:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_BLOCK_SIZE_IS_OUT_OF_BOUNDS"
        d["FFDC"]="EFD_MEMORY_SPACE_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x40e2c3ba:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_BLOCK_SIZE_IS_OUT_OF_BOUNDS"
        d["FFDC"]="EFD_MEMORY_SPACE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6b86414d:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_BLOCK_SIZE_IS_OUT_OF_BOUNDS"
        d["FFDC"]="EFD_BLOCK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2e8d5860:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_BLOCK_SIZE_IS_OUT_OF_BOUNDS"
        d["FFDC"]="EFD_BLOCK_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x08847a1e:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_BLOCK_SIZE_IS_OUT_OF_BOUNDS"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x41b026b9:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_BLOCK_SIZE_IS_OUT_OF_BOUNDS"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3998c7fb:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_BLOCK_SIZE_IS_OUT_OF_BOUNDS"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xfc858bc9:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="FREQUENCY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x02dd1398:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="FREQUENCY_MAPPED_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb869e0da:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="MASTER_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xbb2bbd4f:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="MASTER_RANK_MAPPED_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5b345dcc:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc613c3e6:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x294466fe:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8c324e6e:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x41c48c8e:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd958bef8:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x324e8cea:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xebf29caf:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3a7fd71f:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA5"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x45ef695b:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA6"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc262d772:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA7"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3faa2434:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7e6d788c:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA9"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x48bf457f:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA10"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x777f055c:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA11"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb266d725:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA12"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x2066a2ab:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA13"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xce42a1c5:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA14"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x7a59a85a:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA15"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf2b0a9a7:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1c4f0a56:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA17"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x597d67ff:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA18"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0a15e68f:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA19"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x8a6f777b:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA20"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe46637c8:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA21"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x728962ab:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA22"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x99b4d2bb:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA23"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xb4f15a23:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA24"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x98130ecf:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA25"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x05b62a0e:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA26"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x3c2ec739:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA27"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1a06338e:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA28"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x0be41c2d:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA29"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xcf2d4cc3:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA30"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa82b1491:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA31"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xe5375922:
        d["HwpReturnCode"]="RC_XGPE_BAD_MODE"
        d["FFDC"]="BADMODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xab7508f6:
        d["HwpReturnCode"]="RC_XGPE_INIT_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc2f7bf7a:
        d["HwpReturnCode"]="RC_XGPE_INIT_TIMEOUT"
        d["FFDC"]="XGPE_BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x1fcf07a9:
        d["HwpReturnCode"]="RC_XGPE_INIT_TIMEOUT"
        d["FFDC"]="XGPE_STATE_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xa2b6f67b:
        d["HwpReturnCode"]="RC_XGPE_INIT_DEBUG_HALT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xaeb820d8:
        d["HwpReturnCode"]="RC_XGPE_INIT_DEBUG_HALT"
        d["FFDC"]="XGPE_BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xde2b967c:
        d["HwpReturnCode"]="RC_XGPE_INIT_DEBUG_HALT"
        d["FFDC"]="XGPE_STATE_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x84d5d9d4:
        d["HwpReturnCode"]="RC_XGPE_RESET_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xd64270ee:
        d["HwpReturnCode"]="RC_XGPE_RESET_TIMEOUT"
        d["FFDC"]="XGPE_BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x97427438:
        d["HwpReturnCode"]="RC_XGPE_RESET_TIMEOUT"
        d["FFDC"]="XGPE_STATE_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x05bfb64f:
        d["HwpReturnCode"]="RC_XGPE_PBA_INIT_FAILED"
        d["FFDC"]="MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xad667030:
        d["HwpReturnCode"]="RC_XGPE_PBA_INIT_FAILED"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x88759695:
        d["HwpReturnCode"]="RC_CORECACHE_PFET_SEQ_STATE_ERROR"
        d["FFDC"]="PFET_SEQ_STATES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xae4e51f4:
        d["HwpReturnCode"]="RC_CORECACHE_PFET_SEQ_STATE_ERROR"
        d["FFDC"]="POW_DOMAINS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x5846be48:
        d["HwpReturnCode"]="RC_CORECACHE_PFET_SEQ_STATE_ERROR"
        d["FFDC"]="POW_HEADERS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x75bd7f22:
        d["HwpReturnCode"]="RC_CORECACHE_PFET_SEQ_STATE_ERROR"
        d["FFDC"]="POW_COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x9db5d0cd:
        d["HwpReturnCode"]="RC_CORECACHE_PFET_SEQ_STATE_ERROR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x670ecc77:
        d["HwpReturnCode"]="RC_CORECACHE_POW_CTRL_TIMEOUT"
        d["FFDC"]="POW_CTRL_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xf88278fd:
        d["HwpReturnCode"]="RC_CORECACHE_POW_CTRL_TIMEOUT"
        d["FFDC"]="PFET_SENSES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xdd0ec8e8:
        d["HwpReturnCode"]="RC_CORECACHE_POW_CTRL_TIMEOUT"
        d["FFDC"]="POW_DOMAINS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0xc9acf5cb:
        d["HwpReturnCode"]="RC_CORECACHE_POW_CTRL_TIMEOUT"
        d["FFDC"]="POW_HEADERS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x6a456326:
        d["HwpReturnCode"]="RC_CORECACHE_POW_CTRL_TIMEOUT"
        d["FFDC"]="POW_COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    elif ffdcId == 0x801723c1:
        d["HwpReturnCode"]="RC_CORECACHE_POW_CTRL_TIMEOUT"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    else:
        d["Unrecognized FFDC"] = f'0x{ffdcId:X}'
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))

    jsonStr = json.dumps(d)
    return jsonStr
