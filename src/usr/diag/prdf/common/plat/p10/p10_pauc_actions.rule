# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/diag/prdf/common/plat/p10/p10_pauc_actions.rule $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2021
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

actionclass parent_and_peer_proc_iohs_0_th_1
{
    callout(connected(TYPE_PROC), MRU_MEDA);
    funccall("calloutConnectedPeerProcFromIohs_0");
    threshold1;
};

actionclass parent_and_peer_proc_iohs_1_th_1
{
    callout(connected(TYPE_PROC), MRU_MEDA);
    funccall("calloutConnectedPeerProcFromIohs_1");
    threshold1;
};

actionclass parent_and_peer_proc_smp_0_th_1
{
    callout(connected(TYPE_PROC), MRU_MEDA);
    funccall("calloutPeerProcFromSmpgroup_0");
    threshold1;
};

actionclass parent_and_peer_proc_smp_1_th_1
{
    callout(connected(TYPE_PROC), MRU_MEDA);
    funccall("calloutPeerProcFromSmpgroup_1");
    threshold1;
};

actionclass parent_and_peer_proc_smp_2_th_1
{
    callout(connected(TYPE_PROC), MRU_MEDA);
    funccall("calloutPeerProcFromSmpgroup_2");
    threshold1;
};

actionclass parent_and_peer_proc_smp_3_th_1
{
    callout(connected(TYPE_PROC), MRU_MEDA);
    funccall("calloutPeerProcFromSmpgroup_3");
    threshold1;
};

actionclass check_fmr_err_peer_0
{
    funccall("checkPeerFmrErrs_0");
    threshold1;
};

actionclass check_fmr_err_peer_1
{
    funccall("checkPeerFmrErrs_1");
    threshold1;
};

actionclass check_fmr_err_peer_2
{
    funccall("checkPeerFmrErrs_2");
    threshold1;
};

actionclass check_fmr_err_peer_3
{
    funccall("checkPeerFmrErrs_3");
    threshold1;
};

actionclass smp_callout_0_th1
{
    funccall("smp_callout_0");
    threshold1;
};

actionclass smp_callout_1_th1
{
    funccall("smp_callout_1");
    threshold1;
};

actionclass smp_callout_2_th1
{
    funccall("smp_callout_2");
    threshold1;
};

actionclass smp_callout_3_th1
{
    funccall("smp_callout_3");
    threshold1;
};

###############################################################################
# CRC root cause actions
###############################################################################

actionclass threshold_and_mask_parent_proc_th1_CrcRoot2
{
    threshold_and_mask_parent_proc_th1;
    funccall("CrcRootCause_2"); # must be called after threshold
};

actionclass threshold_and_mask_parent_proc_th1_CrcRoot3
{
    threshold_and_mask_parent_proc_th1;
    funccall("CrcRootCause_3"); # must be called after threshold
};

actionclass threshold_and_mask_parent_proc_th1_CrcRoot6
{
    threshold_and_mask_parent_proc_th1;
    funccall("CrcRootCause_6"); # must be called after threshold
};

actionclass threshold_and_mask_parent_proc_th1_CrcRoot7
{
    threshold_and_mask_parent_proc_th1;
    funccall("CrcRootCause_7"); # must be called after threshold
};

actionclass parent_proc_th_1_CrcRoot9
{
    parent_proc_th_1;
    funccall("CrcRootCause_9"); # must be called after threshold
};

actionclass parent_proc_th_1_CrcRoot10
{
    parent_proc_th_1;
    funccall("CrcRootCause_10"); # must be called after threshold
};

actionclass parent_proc_M_level2_L_th_1_CrcRoot11
{
    parent_proc_M_level2_L_th_1;
    funccall("CrcRootCause_11"); # must be called after threshold
};

actionclass level2_th_1_CrcRoot12
{
    level2_th_1;
    funccall("CrcRootCause_12"); # must be called after threshold
};

actionclass parent_proc_M_level2_L_th_1_CrcRoot13
{
    parent_proc_M_level2_L_th_1;
    funccall("CrcRootCause_13"); # must be called after threshold
};

actionclass parent_proc_M_level2_L_th_1_CrcRoot14
{
    parent_proc_M_level2_L_th_1;
    funccall("CrcRootCause_14"); # must be called after threshold
};

actionclass parent_proc_th_1_CrcRoot19
{
    parent_proc_th_1;
    funccall("CrcRootCause_19"); # must be called after threshold
};

actionclass level2_th_32perDay_CrcRoot22
{
    level2_th_32perDay;
    funccall("CrcRootCause_22"); # must be called after threshold
    funccall("clearPpeCodeRecalNotRun"); # must be called after threshold
};

actionclass level2_th_1_CrcRoot23
{
    level2_th_1;
    funccall("CrcRootCause_23"); # must be called after threshold
};
