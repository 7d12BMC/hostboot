# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/diag/prdf/common/plat/p10/p10_mc.rule $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2020
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

chip p10_mc
{
    name        "P10 MC target";
    targettype  TYPE_MC;
    sigoff      0x0000;
    dump        DUMP_CONTENT_HW;
    scomlen     64;

 #############################################################################
 #                                                                           #
 #  ######                                                                   #
 #  #     #  ######   ####     ###    ####    #####  ######  #####    ####   #
 #  #     #  #       #    #     #    #          #    #       #    #  #       #
 #  ######   #####   #          #     ####      #    #####   #    #   ####   #
 #  #   #    #       #  ###     #         #     #    #       #####        #  #
 #  #    #   #       #    #     #    #    #     #    #       #   #   #    #  #
 #  #     #  ######   ####     ###    ####      #    ######  #    #   ####   #
 #                                                                           #
 #############################################################################

    ############################################################################
    # MC Chiplet Checkstop FIR
    ############################################################################

    register MC_CHIPLET_CS_FIR
    {
        name        "MC Chiplet Checkstop FIR";
        scomaddr    0x0c040000;
        capture     group default;
    };

    register MC_CHIPLET_CS_FIR_MASK
    {
        name        "MC Chiplet Checkstop FIR MASK";
        scomaddr    0x0c040040;
        capture     group default;
    };

    ############################################################################
    # MC Chiplet Recoverable FIR
    ############################################################################

    register MC_CHIPLET_RE_FIR
    {
        name        "MC Chiplet Recoverable FIR";
        scomaddr    0x0c040001;
        capture     group default;
    };

    register MC_CHIPLET_RE_FIR_MASK
    {
        name        "MC Chiplet Recoverable FIR MASK";
        scomaddr    0x0c040041;
        capture     group default;
    };

    ############################################################################
    # MC Chiplet Unit Checkstop FIR
    ############################################################################

    register MC_CHIPLET_UCS_FIR
    {
        name        "MC Chiplet Unit Checkstop FIR";
        scomaddr    0x0c040003;
        capture     group default;
    };

    register MC_CHIPLET_UCS_FIR_MASK
    {
        name        "MC Chiplet Unit Checkstop FIR MASK";
        scomaddr    0x0c040043;
        capture     group default;
    };

    ############################################################################
    # MC Chiplet Host Attention FIR
    ############################################################################

    register MC_CHIPLET_HA_FIR
    {
        name        "MC Chiplet Host Attention FIR";
        scomaddr    0x0c040004;
        capture     group default;
    };

    register MC_CHIPLET_HA_FIR_MASK
    {
        name        "MC Chiplet Host Attention FIR MASK";
        scomaddr    0x0c040044;
        capture     group default;
    };

    ############################################################################
    # P10 chip MC_LOCAL_FIR
    ############################################################################

    register MC_LOCAL_FIR
    {
        name        "P10 chip MC_LOCAL_FIR";
        scomaddr    0x0c040100;
        reset       (&, 0x0c040101);
        mask        (|, 0x0c040105);
        capture     group default;
    };

    register MC_LOCAL_FIR_MASK
    {
        name        "P10 chip MC_LOCAL_FIR MASK";
        scomaddr    0x0c040103;
        capture     group default;
    };

    register MC_LOCAL_FIR_ACT0
    {
        name        "P10 chip MC_LOCAL_FIR ACT0";
        scomaddr    0x0c040106;
        capture     group default;
        capture     req nonzero("MC_LOCAL_FIR");
    };

    register MC_LOCAL_FIR_ACT1
    {
        name        "P10 chip MC_LOCAL_FIR ACT1";
        scomaddr    0x0c040107;
        capture     group default;
        capture     req nonzero("MC_LOCAL_FIR");
    };

    register MC_LOCAL_FIR_ACT2
    {
        name        "P10 chip MC_LOCAL_FIR ACT2";
        scomaddr    0x0c040109;
        capture     group default;
        capture     req nonzero("MC_LOCAL_FIR");
    };

    ############################################################################
    # P10 chip MC_FIR
    ############################################################################

    register MC_FIR
    {
        name        "P10 chip MC_FIR";
        scomaddr    0x0c010c00;
        reset       (&, 0x0c010c01);
        mask        (|, 0x0c010c05);
        capture     group default;
    };

    register MC_FIR_MASK
    {
        name        "P10 chip MC_FIR MASK";
        scomaddr    0x0c010c03;
        capture     group default;
    };

    register MC_FIR_ACT0
    {
        name        "P10 chip MC_FIR ACT0";
        scomaddr    0x0c010c06;
        capture     group default;
        capture     req nonzero("MC_FIR");
    };

    register MC_FIR_ACT1
    {
        name        "P10 chip MC_FIR ACT1";
        scomaddr    0x0c010c07;
        capture     group default;
        capture     req nonzero("MC_FIR");
    };

    register MC_FIR_ACT2
    {
        name        "P10 chip MC_FIR ACT2";
        scomaddr    0x0c010c09;
        capture     group default;
        capture     req nonzero("MC_FIR");
    };

    ############################################################################
    # P10 chip MC_MISC_FIR
    ############################################################################

    register MC_MISC_FIR
    {
        name        "P10 chip MC_MISC_FIR";
        scomaddr    0x0c010f00;
        reset       (&, 0x0c010f01);
        mask        (|, 0x0c010f05);
        capture     group default;
    };

    register MC_MISC_FIR_MASK
    {
        name        "P10 chip MC_MISC_FIR MASK";
        scomaddr    0x0c010f03;
        capture     group default;
    };

    register MC_MISC_FIR_ACT0
    {
        name        "P10 chip MC_MISC_FIR ACT0";
        scomaddr    0x0c010f06;
        capture     group default;
        capture     req nonzero("MC_MISC_FIR");
    };

    register MC_MISC_FIR_ACT1
    {
        name        "P10 chip MC_MISC_FIR ACT1";
        scomaddr    0x0c010f07;
        capture     group default;
        capture     req nonzero("MC_MISC_FIR");
    };

    register MC_MISC_FIR_ACT2
    {
        name        "P10 chip MC_MISC_FIR ACT2";
        scomaddr    0x0c010f09;
        capture     group default;
        capture     req nonzero("MC_MISC_FIR");
    };

# Include registers not defined by the xml
.include "p10_mc_regs.rule";

};

 ##############################################################################
 #                                                                            #
 # ####                                 #                                     #
 # #   # #   # #    #####  ###      #  # #    ##  ##### ###  ###  #   #  ###  #
 # #   # #   # #    #     #        #  #   #  #  #   #    #  #   # ##  # #     #
 # ####  #   # #    ####   ###    #  ####### #      #    #  #   # # # #  ###  #
 # #  #  #   # #    #         #  #   #     # #  #   #    #  #   # #  ##     # #
 # #   #  ###  #### #####  ###  #    #     #  ##    #   ###  ###  #   #  ###  #
 #                                                                            #
 ##############################################################################

################################################################################
# MC Chiplet Checkstop FIR
################################################################################

rule rMC_CHIPLET_CS_FIR
{
  CHECK_STOP:
    MC_CHIPLET_CS_FIR & ~MC_CHIPLET_CS_FIR_MASK & `0fffffffffffffff`;
};

group gMC_CHIPLET_CS_FIR attntype CHECK_STOP
    filter singlebit
{
    /** MC_CHIPLET_CS_FIR[4]
     *  Attention from MC_LOCAL_FIR
     */
    (rMC_CHIPLET_CS_FIR, bit(4)) ? analyze(gMC_LOCAL_FIR);

    /** MC_CHIPLET_CS_FIR[5]
     *  Attention from MC_DSTL_FIR 0
     */
    (rMC_CHIPLET_CS_FIR, bit(5)) ? analyzeConnectedMCC0;

    /** MC_CHIPLET_CS_FIR[6]
     *  Attention from MC_USTL_FIR 0
     */
    (rMC_CHIPLET_CS_FIR, bit(6)) ? analyzeConnectedMCC0;

    /** MC_CHIPLET_CS_FIR[7]
     *  Attention from MC_DSTL_FIR 1
     */
    (rMC_CHIPLET_CS_FIR, bit(7)) ? analyzeConnectedMCC1;

    /** MC_CHIPLET_CS_FIR[8]
     *  Attention from MC_USTL_FIR 1
     */
    (rMC_CHIPLET_CS_FIR, bit(8)) ? analyzeConnectedMCC1;

    /** MC_CHIPLET_CS_FIR[9]
     *  Attention from MC_FIR
     */
    (rMC_CHIPLET_CS_FIR, bit(9)) ? analyzeMC_FIR;

    /** MC_CHIPLET_CS_FIR[10]
     *  Attention from MC_MISC_FIR
     */
    (rMC_CHIPLET_CS_FIR, bit(10)) ? analyze(gMC_MISC_FIR);

    /** MC_CHIPLET_CS_FIR[13]
     *  Attention from MC_OMI_DL_FIR 0
     */
    (rMC_CHIPLET_CS_FIR, bit(13)) ? analyzeConnectedOMIC0;

    /** MC_CHIPLET_CS_FIR[14]
     *  Attention from MC_OMI_DL_FIR 1
     */
    (rMC_CHIPLET_CS_FIR, bit(14)) ? analyzeConnectedOMIC1;

};

################################################################################
# MC Chiplet Recoverable FIR
################################################################################

rule rMC_CHIPLET_RE_FIR
{
  RECOVERABLE:
    MC_CHIPLET_RE_FIR & ~MC_CHIPLET_RE_FIR_MASK & `2fffffffffffffff`;
};

group gMC_CHIPLET_RE_FIR attntype RECOVERABLE
    filter singlebit
{
    /** MC_CHIPLET_RE_FIR[2]
     *  Active UNIT_CS attention on this MC
     */
    (rMC_CHIPLET_RE_FIR, bit(2)) ? analyzeMcUcs;

    /** MC_CHIPLET_RE_FIR[4]
     *  Attention from MC_LOCAL_FIR
     */
    (rMC_CHIPLET_RE_FIR, bit(4)) ? analyze(gMC_LOCAL_FIR);

    /** MC_CHIPLET_RE_FIR[5]
     *  Attention from MC_DSTL_FIR 0
     */
    (rMC_CHIPLET_RE_FIR, bit(5)) ? analyzeConnectedMCC0;

    /** MC_CHIPLET_RE_FIR[6]
     *  Attention from MC_USTL_FIR 0
     */
    (rMC_CHIPLET_RE_FIR, bit(6)) ? analyzeConnectedMCC0;

    /** MC_CHIPLET_RE_FIR[7]
     *  Attention from MC_DSTL_FIR 1
     */
    (rMC_CHIPLET_RE_FIR, bit(7)) ? analyzeConnectedMCC1;

    /** MC_CHIPLET_RE_FIR[8]
     *  Attention from MC_USTL_FIR 1
     */
    (rMC_CHIPLET_RE_FIR, bit(8)) ? analyzeConnectedMCC1;

    /** MC_CHIPLET_RE_FIR[9]
     *  Attention from MC_FIR
     */
    (rMC_CHIPLET_RE_FIR, bit(9)) ? analyzeMC_FIR;

    /** MC_CHIPLET_RE_FIR[10]
     *  Attention from MC_MISC_FIR
     */
    (rMC_CHIPLET_RE_FIR, bit(10)) ? analyze(gMC_MISC_FIR);

    /** MC_CHIPLET_RE_FIR[13]
     *  Attention from MC_OMI_DL_FIR 0
     */
    (rMC_CHIPLET_RE_FIR, bit(13)) ? analyzeConnectedOMIC0;

    /** MC_CHIPLET_RE_FIR[14]
     *  Attention from MC_OMI_DL_FIR 1
     */
    (rMC_CHIPLET_RE_FIR, bit(14)) ? analyzeConnectedOMIC1;

};

################################################################################
# MC Chiplet Unit Checkstop FIR
################################################################################

rule rMC_CHIPLET_UCS_FIR
{
  UNIT_CS:
    MC_CHIPLET_UCS_FIR & ~MC_CHIPLET_UCS_FIR_MASK & `0fffffffffffffff`;
};

group gMC_CHIPLET_UCS_FIR attntype UNIT_CS
    filter singlebit
{
    /** MC_CHIPLET_UCS_FIR[4]
     *  Attention from MC_LOCAL_FIR
     */
    (rMC_CHIPLET_UCS_FIR, bit(4)) ? analyze(gMC_LOCAL_FIR);

    /** MC_CHIPLET_UCS_FIR[5]
     *  Attention from MC_DSTL_FIR 0
     */
    (rMC_CHIPLET_UCS_FIR, bit(5)) ? analyzeConnectedMCC0;

    /** MC_CHIPLET_UCS_FIR[6]
     *  Attention from MC_USTL_FIR 0
     */
    (rMC_CHIPLET_UCS_FIR, bit(6)) ? analyzeConnectedMCC0;

    /** MC_CHIPLET_UCS_FIR[7]
     *  Attention from MC_DSTL_FIR 1
     */
    (rMC_CHIPLET_UCS_FIR, bit(7)) ? analyzeConnectedMCC1;

    /** MC_CHIPLET_UCS_FIR[8]
     *  Attention from MC_USTL_FIR 1
     */
    (rMC_CHIPLET_UCS_FIR, bit(8)) ? analyzeConnectedMCC1;

    /** MC_CHIPLET_UCS_FIR[9]
     *  Attention from MC_FIR
     */
    (rMC_CHIPLET_UCS_FIR, bit(9)) ? analyzeMC_FIR;

    /** MC_CHIPLET_UCS_FIR[10]
     *  Attention from MC_MISC_FIR
     */
    (rMC_CHIPLET_UCS_FIR, bit(10)) ? analyze(gMC_MISC_FIR);

};

################################################################################
# MC Chiplet Host Attention FIR
################################################################################

rule rMC_CHIPLET_HA_FIR
{
  HOST_ATTN:
    MC_CHIPLET_HA_FIR & ~MC_CHIPLET_HA_FIR_MASK & `0fffffffffffffff`;
};

group gMC_CHIPLET_HA_FIR attntype HOST_ATTN
    filter singlebit
{
    /** MC_CHIPLET_HA_FIR[4]
     *  Attention from MC_LOCAL_FIR
     */
    (rMC_CHIPLET_HA_FIR, bit(4)) ? analyze(gMC_LOCAL_FIR);

    /** MC_CHIPLET_HA_FIR[5]
     *  Attention from MC_DSTL_FIR 0
     */
    (rMC_CHIPLET_HA_FIR, bit(5)) ? analyzeConnectedMCC0;

    /** MC_CHIPLET_HA_FIR[6]
     *  Attention from MC_USTL_FIR 0
     */
    (rMC_CHIPLET_HA_FIR, bit(6)) ? analyzeConnectedMCC0;

    /** MC_CHIPLET_HA_FIR[7]
     *  Attention from MC_DSTL_FIR 1
     */
    (rMC_CHIPLET_HA_FIR, bit(7)) ? analyzeConnectedMCC1;

    /** MC_CHIPLET_HA_FIR[8]
     *  Attention from MC_USTL_FIR 1
     */
    (rMC_CHIPLET_HA_FIR, bit(8)) ? analyzeConnectedMCC1;

    /** MC_CHIPLET_HA_FIR[9]
     *  Attention from MC_FIR
     */
    (rMC_CHIPLET_HA_FIR, bit(9)) ? analyzeMC_FIR;

    /** MC_CHIPLET_HA_FIR[10]
     *  Attention from MC_MISC_FIR
     */
    (rMC_CHIPLET_HA_FIR, bit(10)) ? analyze(gMC_MISC_FIR);

};

################################################################################
# P10 chip MC_LOCAL_FIR
################################################################################

rule rMC_LOCAL_FIR
{
  CHECK_STOP:
    MC_LOCAL_FIR & ~MC_LOCAL_FIR_MASK & ~MC_LOCAL_FIR_ACT0 & ~MC_LOCAL_FIR_ACT1 & ~MC_LOCAL_FIR_ACT2;
  HOST_ATTN:
    MC_LOCAL_FIR & ~MC_LOCAL_FIR_MASK & ~MC_LOCAL_FIR_ACT0 & ~MC_LOCAL_FIR_ACT1 &  MC_LOCAL_FIR_ACT2;
  RECOVERABLE:
    MC_LOCAL_FIR & ~MC_LOCAL_FIR_MASK & ~MC_LOCAL_FIR_ACT0 &  MC_LOCAL_FIR_ACT1 & ~MC_LOCAL_FIR_ACT2;
  UNIT_CS:
    MC_LOCAL_FIR & ~MC_LOCAL_FIR_MASK &  MC_LOCAL_FIR_ACT0 &  MC_LOCAL_FIR_ACT1 & ~MC_LOCAL_FIR_ACT2;
};

group gMC_LOCAL_FIR
    filter singlebit,
           cs_root_cause
{
    /** MC_LOCAL_FIR[0]
     *  CFIR - Parity or PCB access error
     */
    (rMC_LOCAL_FIR, bit(0)) ? self_th_32perDay;

    /** MC_LOCAL_FIR[1]
     *  CPLT_CTRL - PCB access error
     */
    (rMC_LOCAL_FIR, bit(1)) ? self_th_32perDay;

    /** MC_LOCAL_FIR[2]
     *  CC - PCB access error
     */
    (rMC_LOCAL_FIR, bit(2)) ? self_th_32perDay;

    /** MC_LOCAL_FIR[3]
     *  CC - Clock Control Error
     */
    (rMC_LOCAL_FIR, bit(3)) ? self_th_32perDay;

    /** MC_LOCAL_FIR[4]
     *  PSC - PSCOM access error
     */
    (rMC_LOCAL_FIR, bit(4)) ? self_th_32perDay;

    /** MC_LOCAL_FIR[5]
     *  PSC - internal or ring interface error
     */
    (rMC_LOCAL_FIR, bit(5)) ? self_th_32perDay;

    /** MC_LOCAL_FIR[6]
     *  THERM - Internal errors
     */
    (rMC_LOCAL_FIR, bit(6)) ? threshold_and_mask_self;

    /** MC_LOCAL_FIR[7]
     *  THERM - pcb error
     */
    (rMC_LOCAL_FIR, bit(7)) ? threshold_and_mask_self;

    /** MC_LOCAL_FIR[8]
     *  THERMTRIP - Critical temperature indicator
     */
    (rMC_LOCAL_FIR, bit(8)) ? threshold_and_mask_self;

    /** MC_LOCAL_FIR[9]
     *  THERMTRIP - Fatal temperature indicator
     */
    (rMC_LOCAL_FIR, bit(9)) ? threshold_and_mask_self;

    /** MC_LOCAL_FIR[10]
     *  VOLTTRIP - Voltage sense error
     */
    (rMC_LOCAL_FIR, bit(10)) ? threshold_and_mask_self;

    /** MC_LOCAL_FIR[11]
     *  DBG - scom parity fail
     */
    (rMC_LOCAL_FIR, bit(11)) ? threshold_and_mask_self;

    /** MC_LOCAL_FIR[12]
     *  reserved
     */
    (rMC_LOCAL_FIR, bit(12)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[13]
     *  reserved
     */
    (rMC_LOCAL_FIR, bit(13)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[14]
     *  reserved
     */
    (rMC_LOCAL_FIR, bit(14)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[15]
     *  reserved
     */
    (rMC_LOCAL_FIR, bit(15)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[16]
     *  reserved
     */
    (rMC_LOCAL_FIR, bit(16)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[17]
     *  reserved
     */
    (rMC_LOCAL_FIR, bit(17)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[18]
     *  reserved
     */
    (rMC_LOCAL_FIR, bit(18)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[19]
     *  reserved
     */
    (rMC_LOCAL_FIR, bit(19)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[20]
     *  Trace00 - scom parity err
     */
    (rMC_LOCAL_FIR, bit(20)) ? self_th_32perDay;

    /** MC_LOCAL_FIR[21]
     *  Trace01 - scom parity err - Unused in Axon,PCI
     */
    (rMC_LOCAL_FIR, bit(21)) ? self_th_32perDay;

    /** MC_LOCAL_FIR[22]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(22)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[23]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(23)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[24]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(24)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[25]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(25)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[26]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(26)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[27]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(27)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[28]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(28)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[29]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(29)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[30]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(30)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[31]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(31)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[32]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(32)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[33]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(33)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[34]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(34)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[35]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(35)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[36]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(36)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[37]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(37)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[38]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(38)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[39]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(39)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[40]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(40)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[41]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(41)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[42]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(42)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[43]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(43)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[44]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(44)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[45]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(45)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[46]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(46)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[47]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(47)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[48]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(48)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[49]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(49)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[50]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(50)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[51]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(51)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[52]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(52)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[53]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(53)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[54]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(54)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[55]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(55)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[56]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(56)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[57]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(57)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[58]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(58)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[59]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(59)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[60]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(60)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[61]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(61)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[62]
     *  unused
     */
    (rMC_LOCAL_FIR, bit(62)) ? defaultMaskedError;

    /** MC_LOCAL_FIR[63]
     *  ext_local_xstop
     */
    (rMC_LOCAL_FIR, bit(63)) ? defaultMaskedError;

};

################################################################################
# P10 chip MC_FIR
################################################################################

rule rMC_FIR
{
  CHECK_STOP:
    MC_FIR & ~MC_FIR_MASK & ~MC_FIR_ACT0 & ~MC_FIR_ACT1 & ~MC_FIR_ACT2;
  HOST_ATTN:
    MC_FIR & ~MC_FIR_MASK & ~MC_FIR_ACT0 & ~MC_FIR_ACT1 &  MC_FIR_ACT2;
  RECOVERABLE:
    MC_FIR & ~MC_FIR_MASK & ~MC_FIR_ACT0 &  MC_FIR_ACT1 & ~MC_FIR_ACT2;
  UNIT_CS:
    MC_FIR & ~MC_FIR_MASK &  MC_FIR_ACT0 &  MC_FIR_ACT1 & ~MC_FIR_ACT2;
};

group gMC_FIR
    filter singlebit,
           cs_root_cause
{
    /** MC_FIR[0]
     *  MC internal recoverable error
     */
    (rMC_FIR, bit(0)) ? self_th_1;

    /** MC_FIR[1]
     *  Mc internal non-recoverable error
     */
    (rMC_FIR, bit(1)) ? self_th_1;

    /** MC_FIR[2]
     *  MC powerbus protocol error
     */
    (rMC_FIR, bit(2)) ? level2_th_1;

    /** MC_FIR[3]
     *  MC inband bar with incorrect ttype
     */
    (rMC_FIR, bit(3)) ? TBDDefaultCallout;

    /** MC_FIR[4]
     *  MC multiple BAR hit
     */
    (rMC_FIR, bit(4)) ? TBDDefaultCallout;

    /** MC_FIR[5]
     *  Commandlist early hang trigger activated
     */
    (rMC_FIR, bit(5)) ? defaultMaskedError;

    /** MC_FIR[6]
     *  reserved
     */
    (rMC_FIR, bit(6)) ? defaultMaskedError;

    /** MC_FIR[7]
     *  reserved
     */
    (rMC_FIR, bit(7)) ? defaultMaskedError;

    /** MC_FIR[8]
     *  Command list state machine timeout
     */
    (rMC_FIR, bit(8)) ? threshold_and_mask_self;

    /** MC_FIR[9]
     *  reserved
     */
    (rMC_FIR, bit(9)) ? defaultMaskedError;

    /** MC_FIR[10]
     *  reserved
     */
    (rMC_FIR, bit(10)) ? defaultMaskedError;

    /** MC_FIR[11]
     *  WAT0 event occurred
     */
    (rMC_FIR, bit(11)) ? defaultMaskedError;

    /** MC_FIR[12]
     *  WAT1 event occurred
     */
    (rMC_FIR, bit(12)) ? defaultMaskedError;

    /** MC_FIR[13]
     *  WAT2 event occurred
     */
    (rMC_FIR, bit(13)) ? defaultMaskedError;

    /** MC_FIR[14]
     *  WAT3 event occurred
     */
    (rMC_FIR, bit(14)) ? defaultMaskedError;

    /** MC_FIR[15]
     *  Plus One Prefetch generated command did not hit an
     */
    (rMC_FIR, bit(15)) ? self_th_1;

    /** MC_FIR[16]
     *  Plus One Prefetch generated command hit config or 
     */
    (rMC_FIR, bit(16)) ? self_th_1;

    /** MC_FIR[17]
     *  Parity Error in WAT/Debug config register.
     */
    (rMC_FIR, bit(17)) ? self_th_1;

    /** MC_FIR[18]
     *  reserved
     */
    (rMC_FIR, bit(18)) ? defaultMaskedError;

    /** MC_FIR[19]
     *  reserved
     */
    (rMC_FIR, bit(19)) ? defaultMaskedError;

    /** MC_FIR[20]
     *  Incoming Powerbus Command hit multiple valid confi
     */
    (rMC_FIR, bit(20)) ? self_th_1;

    /** MC_FIR[21]
     *  reserved
     */
    (rMC_FIR, bit(21)) ? defaultMaskedError;

    /** MC_FIR[22]
     *  Secure mem facility access privilege error by orig
     */
    (rMC_FIR, bit(22)) ? defaultMaskedError;

    /** MC_FIR[23]
     *  Multiple sync cmds received by an MC, or while one
     */
    (rMC_FIR, bit(23)) ? self_th_1;

};

################################################################################
# P10 chip MC_MISC_FIR
################################################################################

rule rMC_MISC_FIR
{
  CHECK_STOP:
    MC_MISC_FIR & ~MC_MISC_FIR_MASK & ~MC_MISC_FIR_ACT0 & ~MC_MISC_FIR_ACT1 & ~MC_MISC_FIR_ACT2;
  HOST_ATTN:
    MC_MISC_FIR & ~MC_MISC_FIR_MASK & ~MC_MISC_FIR_ACT0 & ~MC_MISC_FIR_ACT1 &  MC_MISC_FIR_ACT2;
  RECOVERABLE:
    MC_MISC_FIR & ~MC_MISC_FIR_MASK & ~MC_MISC_FIR_ACT0 &  MC_MISC_FIR_ACT1 & ~MC_MISC_FIR_ACT2;
  UNIT_CS:
    MC_MISC_FIR & ~MC_MISC_FIR_MASK &  MC_MISC_FIR_ACT0 &  MC_MISC_FIR_ACT1 & ~MC_MISC_FIR_ACT2;
};

group gMC_MISC_FIR
    filter singlebit,
           cs_root_cause
{
    /** MC_MISC_FIR[0]
     *  WAT Debug Bus Attention.
     */
    (rMC_MISC_FIR, bit(0)) ? defaultMaskedError;

    /** MC_MISC_FIR[1]
     *  SCOM DBGSRC Register parity Error.
     */
    (rMC_MISC_FIR, bit(1)) ? defaultMaskedError;

    /** MC_MISC_FIR[2]
     *  SCOM Recoverable Register Parity Error.
     */
    (rMC_MISC_FIR, bit(2)) ? self_th_1;

    /** MC_MISC_FIR[3]
     *  spare
     */
    (rMC_MISC_FIR, bit(3)) ? defaultMaskedError;

    /** MC_MISC_FIR[4]
     *  Application interrupt received from OCMB on channe
     */
    (rMC_MISC_FIR, bit(4)) ? defaultMaskedError;

    /** MC_MISC_FIR[5]
     *  Application interrupt received from OCMB on channe
     */
    (rMC_MISC_FIR, bit(5)) ? defaultMaskedError;

    /** MC_MISC_FIR[6]
     *  Application interrupt received from OCMB on channe
     */
    (rMC_MISC_FIR, bit(6)) ? defaultMaskedError;

    /** MC_MISC_FIR[7]
     *  Application interrupt received from OCMB on channe
     */
    (rMC_MISC_FIR, bit(7)) ? defaultMaskedError;

    /** MC_MISC_FIR[8]
     *  Parity Error taken on MCEBUSEN[0,1,2,3] regs.
     */
    (rMC_MISC_FIR, bit(8)) ? defaultMaskedError;

    /** MC_MISC_FIR[9]
     *  Parity Error taken on WAT* Regs.
     */
    (rMC_MISC_FIR, bit(9)) ? defaultMaskedError;

    /** MC_MISC_FIR[10]
     *  Reserved
     */
    (rMC_MISC_FIR, bit(10)) ? defaultMaskedError;

    /** MC_MISC_FIR[11]
     *  Reserved
     */
    (rMC_MISC_FIR, bit(11)) ? defaultMaskedError;

};

 ##############################################################################
 #                                                                            #
 #    #                                  ###                                  #
 #   # #    ##  ##### ###  ###  #   #   #   # #     #    ###   ###  ###  ###  #
 #  #   #  #  #   #    #  #   # ##  #   #     #    # #  #     #     #   #     #
 # ####### #      #    #  #   # # # #   #     #   #####  ###   ###  ##   ###  #
 # #     # #  #   #    #  #   # #  ##   #   # #   #   #     #     # #       # #
 # #     #  ##    #   ###  ###  #   #    ###  ### #   #  ###   ###  ###  ###  #
 #                                                                            #
 ##############################################################################

# Include the actions defined for this target
.include "p10_common_actions.rule";
.include "p10_mc_actions.rule";

