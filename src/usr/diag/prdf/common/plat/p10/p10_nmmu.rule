# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/diag/prdf/common/plat/p10/p10_nmmu.rule $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2020
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

chip p10_nmmu
{
    name        "P10 NMMU target";
    targettype  TYPE_NMMU;
    sigoff      0x0000;
    dump        DUMP_CONTENT_HW;
    scomlen     64;

 #############################################################################
 #                                                                           #
 #  ######                                                                   #
 #  #     #  ######   ####     ###    ####    #####  ######  #####    ####   #
 #  #     #  #       #    #     #    #          #    #       #    #  #       #
 #  ######   #####   #          #     ####      #    #####   #    #   ####   #
 #  #   #    #       #  ###     #         #     #    #       #####        #  #
 #  #    #   #       #    #     #    #    #     #    #       #   #   #    #  #
 #  #     #  ######   ####     ###    ####      #    ######  #    #   ####   #
 #                                                                           #
 #############################################################################

    ############################################################################
    # P10 chip NMMU_CQ_FIR
    ############################################################################

    register NMMU_CQ_FIR
    {
        name        "P10 chip NMMU_CQ_FIR";
        scomaddr    0x02010c00;
        reset       (&, 0x02010c01);
        mask        (|, 0x02010c05);
        capture     group default;
    };

    register NMMU_CQ_FIR_MASK
    {
        name        "P10 chip NMMU_CQ_FIR MASK";
        scomaddr    0x02010c03;
        capture     group default;
    };

    register NMMU_CQ_FIR_ACT0
    {
        name        "P10 chip NMMU_CQ_FIR ACT0";
        scomaddr    0x02010c06;
        capture     group default;
        capture     req nonzero("NMMU_CQ_FIR");
    };

    register NMMU_CQ_FIR_ACT1
    {
        name        "P10 chip NMMU_CQ_FIR ACT1";
        scomaddr    0x02010c07;
        capture     group default;
        capture     req nonzero("NMMU_CQ_FIR");
    };

    ############################################################################
    # P10 chip NMMU_FIR
    ############################################################################

    register NMMU_FIR
    {
        name        "P10 chip NMMU_FIR";
        scomaddr    0x02010c40;
        reset       (&, 0x02010c41);
        mask        (|, 0x02010c45);
        capture     group default;
    };

    register NMMU_FIR_MASK
    {
        name        "P10 chip NMMU_FIR MASK";
        scomaddr    0x02010c43;
        capture     group default;
    };

    register NMMU_FIR_ACT0
    {
        name        "P10 chip NMMU_FIR ACT0";
        scomaddr    0x02010c46;
        capture     group default;
        capture     req nonzero("NMMU_FIR");
    };

    register NMMU_FIR_ACT1
    {
        name        "P10 chip NMMU_FIR ACT1";
        scomaddr    0x02010c47;
        capture     group default;
        capture     req nonzero("NMMU_FIR");
    };

# Include registers not defined by the xml
.include "p10_nmmu_regs.rule";

};

 ##############################################################################
 #                                                                            #
 # ####                                 #                                     #
 # #   # #   # #    #####  ###      #  # #    ##  ##### ###  ###  #   #  ###  #
 # #   # #   # #    #     #        #  #   #  #  #   #    #  #   # ##  # #     #
 # ####  #   # #    ####   ###    #  ####### #      #    #  #   # # # #  ###  #
 # #  #  #   # #    #         #  #   #     # #  #   #    #  #   # #  ##     # #
 # #   #  ###  #### #####  ###  #    #     #  ##    #   ###  ###  #   #  ###  #
 #                                                                            #
 ##############################################################################

################################################################################
# Summary for NMMU
################################################################################

rule rNMMU
{
  CHECK_STOP:
    summary( 0, rNMMU_CQ_FIR ) |
    summary( 1, rNMMU_FIR );

  RECOVERABLE:
    summary( 0, rNMMU_CQ_FIR ) |
    summary( 1, rNMMU_FIR );

  UNIT_CS:
    summary( 0, rNMMU_CQ_FIR ) |
    summary( 1, rNMMU_FIR );

};

group gNMMU attntype CHECK_STOP, RECOVERABLE, UNIT_CS
    filter singlebit
{
    (rNMMU, bit(0)) ? analyzeNMMU_CQ_FIR;
    (rNMMU, bit(1)) ? analyze(gNMMU_FIR);
};

################################################################################
# P10 chip NMMU_CQ_FIR
################################################################################

rule rNMMU_CQ_FIR
{
  CHECK_STOP:
    NMMU_CQ_FIR & ~NMMU_CQ_FIR_MASK & ~NMMU_CQ_FIR_ACT0 & ~NMMU_CQ_FIR_ACT1;
  RECOVERABLE:
    NMMU_CQ_FIR & ~NMMU_CQ_FIR_MASK & ~NMMU_CQ_FIR_ACT0 &  NMMU_CQ_FIR_ACT1;
  UNIT_CS:
    NMMU_CQ_FIR & ~NMMU_CQ_FIR_MASK &  NMMU_CQ_FIR_ACT0 &  NMMU_CQ_FIR_ACT1;
};

group gNMMU_CQ_FIR
    filter singlebit,
           cs_root_cause
{
    /** NMMU_CQ_FIR[0]
     *  PBI internal parity error
     */
    (rNMMU_CQ_FIR, bit(0)) ? parent_proc_th_1;

    /** NMMU_CQ_FIR[1]
     *  PowerBus command hang error
     */
    (rNMMU_CQ_FIR, bit(1)) ? defaultMaskedError;

    /** NMMU_CQ_FIR[2]
     *  PowerBus read address error
     */
    (rNMMU_CQ_FIR, bit(2)) ? parent_proc_M_level2_L_th_1;

    /** NMMU_CQ_FIR[3]
     *  PowerBus write address error
     */
    (rNMMU_CQ_FIR, bit(3)) ? parent_proc_M_level2_L_th_1;

    /** NMMU_CQ_FIR[4]
     *  PowerBus miscellaneous error
     */
    (rNMMU_CQ_FIR, bit(4)) ? parent_proc_th_1;

    /** NMMU_CQ_FIR[5]
     *  Reserved
     */
    (rNMMU_CQ_FIR, bit(5)) ? defaultMaskedError;

    /** NMMU_CQ_FIR[6]
     *  PowerBus Xlate UE error
     */
    (rNMMU_CQ_FIR, bit(6)) ? parent_proc_th_1;

    /** NMMU_CQ_FIR[7]
     *  PowerBus Xlate SUE error
     */
    (rNMMU_CQ_FIR, bit(7)) ? parent_proc_th_1_SUE;

    /** NMMU_CQ_FIR[8]
     *  PowerBus CE error
     */
    (rNMMU_CQ_FIR, bit(8)) ? parent_proc_th_32perDay;

    /** NMMU_CQ_FIR[9]
     *  PowerBus UE error
     */
    (rNMMU_CQ_FIR, bit(9)) ? parent_proc_th_1;

    /** NMMU_CQ_FIR[10]
     *  PowerBus SUE error
     */
    (rNMMU_CQ_FIR, bit(10)) ? defaultMaskedError;

    /** NMMU_CQ_FIR[11]
     *  Inbound LCO_ARRAY CE error
     */
    (rNMMU_CQ_FIR, bit(11)) ? parent_proc_th_32perDay;

    /** NMMU_CQ_FIR[12]
     *  Inbound LCO_ARRAY UE error
     */
    (rNMMU_CQ_FIR, bit(12)) ? parent_proc_th_1;

    /** NMMU_CQ_FIR[13]
     *  Inbound LCO_ARRAY SUE error
     */
    (rNMMU_CQ_FIR, bit(13)) ? defaultMaskedError;

    /** NMMU_CQ_FIR[14]
     *  Inbound array CE error
     */
    (rNMMU_CQ_FIR, bit(14)) ? parent_proc_th_32perDay;

    /** NMMU_CQ_FIR[15]
     *  Inbound array UE error
     */
    (rNMMU_CQ_FIR, bit(15)) ? parent_proc_th_1;

    /** NMMU_CQ_FIR[16]
     *  internal state error
     */
    (rNMMU_CQ_FIR, bit(16)) ? parent_proc_th_1;

    /** NMMU_CQ_FIR[17]
     *  ACK_DEAD cresp received by read command
     */
    (rNMMU_CQ_FIR, bit(17)) ? defaultMaskedError;

    /** NMMU_CQ_FIR[18]
     *  ACK_DEAD cresp received by write command
     */
    (rNMMU_CQ_FIR, bit(18)) ? defaultMaskedError;

    /** NMMU_CQ_FIR[19]
     *  Link check aborted while waiting on data
     */
    (rNMMU_CQ_FIR, bit(19)) ? defaultMaskedError;

};

################################################################################
# P10 chip NMMU_FIR
################################################################################

rule rNMMU_FIR
{
  CHECK_STOP:
    NMMU_FIR & ~NMMU_FIR_MASK & ~NMMU_FIR_ACT0 & ~NMMU_FIR_ACT1;
  RECOVERABLE:
    NMMU_FIR & ~NMMU_FIR_MASK & ~NMMU_FIR_ACT0 &  NMMU_FIR_ACT1;
  UNIT_CS:
    NMMU_FIR & ~NMMU_FIR_MASK &  NMMU_FIR_ACT0 &  NMMU_FIR_ACT1;
};

group gNMMU_FIR
    filter singlebit,
           cs_root_cause
{
    /** NMMU_FIR[0]
     *  Fabric DIn xlat array CE error detected.
     */
    (rNMMU_FIR, bit(0)) ? parent_proc_th_32perDay;

    /** NMMU_FIR[1]
     *  Fabric DIn xlat array UE error detected.
     */
    (rNMMU_FIR, bit(1)) ? parent_proc_th_1;

    /** NMMU_FIR[2]
     *  Fabric DIn xlat array SUE error detected.
     */
    (rNMMU_FIR, bit(2)) ? parent_proc_th_1_SUE;

    /** NMMU_FIR[3]
     *  Fabric mst rd array CE error detected.
     */
    (rNMMU_FIR, bit(3)) ? parent_proc_th_32perDay;

    /** NMMU_FIR[4]
     *  Fabric mst rd array UE error detected.
     */
    (rNMMU_FIR, bit(4)) ? parent_proc_th_1;

    /** NMMU_FIR[5]
     *  Fabric mst rd array SUE error detected.
     */
    (rNMMU_FIR, bit(5)) ? defaultMaskedError;

    /** NMMU_FIR[6]
     *  Fabric xlat protocol error detected.
     */
    (rNMMU_FIR, bit(6)) ? parent_proc_th_1;

    /** NMMU_FIR[7]
     *  Fabric xlat op timeout detected.
     */
    (rNMMU_FIR, bit(7)) ? defaultMaskedError;

    /** NMMU_FIR[8]
     *  SLB directory parity error detected.
     */
    (rNMMU_FIR, bit(8)) ? parent_proc_th_32perDay;
    # P10_10: CS parent_proc_th_1

    /** NMMU_FIR[9]
     *  SLB cache parity error detected.
     */
    (rNMMU_FIR, bit(9)) ? parent_proc_th_32perDay;
    # P10_10: CS parent_proc_th_1

    /** NMMU_FIR[10]
     *  SLB lru parity error detected.
     */
    (rNMMU_FIR, bit(10)) ? parent_proc_th_32perDay;
    # P10_10: CS parent_proc_th_1

    /** NMMU_FIR[11]
     *  SLB multi-hit error detected.
     */
    (rNMMU_FIR, bit(11)) ? threshold_and_mask_parent_proc;

    /** NMMU_FIR[12]
     *  TLB directory parity error detected.
     */
    (rNMMU_FIR, bit(12)) ? parent_proc_th_32perDay;
    # P10_10: CS parent_proc_th_1

    /** NMMU_FIR[13]
     *  TLB cache parity error detected.
     */
    (rNMMU_FIR, bit(13)) ? parent_proc_th_32perDay;
    # P10_10: CS parent_proc_th_1

    /** NMMU_FIR[14]
     *  TLB lru parity error detected.
     */
    (rNMMU_FIR, bit(14)) ? parent_proc_th_32perDay;
    # P10_10: CS parent_proc_th_1

    /** NMMU_FIR[15]
     *  TLB multi-hit error detected.
     */
    (rNMMU_FIR, bit(15)) ? threshold_and_mask_parent_proc;

    /** NMMU_FIR[16]
     *  Segment fault detected
     */
    (rNMMU_FIR, bit(16)) ? defaultMaskedError;

    /** NMMU_FIR[17]
     *  Page fault detected due to no matching pte.
     */
    (rNMMU_FIR, bit(17)) ? defaultMaskedError;

    /** NMMU_FIR[18]
     *  Page fault detected due to basic prot chk fail.
     */
    (rNMMU_FIR, bit(18)) ? defaultMaskedError;

    /** NMMU_FIR[19]
     *  Page fault detected due to virt prot chk fail.
     */
    (rNMMU_FIR, bit(19)) ? defaultMaskedError;

    /** NMMU_FIR[20]
     *  Page fault detected due to seid mismatch
     */
    (rNMMU_FIR, bit(20)) ? defaultMaskedError;

    /** NMMU_FIR[21]
     *  Address error cresp detected by twsm for read
     */
    (rNMMU_FIR, bit(21)) ? parent_proc_M_level2_L_th_1;

    /** NMMU_FIR[22]
     *  PTE update fail due to armwf mismatch.
     */
    (rNMMU_FIR, bit(22)) ? defaultMaskedError;

    /** NMMU_FIR[23]
     *  Address error cresp detected by twsm for write.
     */
    (rNMMU_FIR, bit(23)) ? parent_proc_M_level2_L_th_1;

    /** NMMU_FIR[24]
     *  Unsupported radix cfg for guest-side
     */
    (rNMMU_FIR, bit(24)) ? defaultMaskedError;

    /** NMMU_FIR[25]
     *  Unsupported radix cfg for host-side
     */
    (rNMMU_FIR, bit(25)) ? defaultMaskedError;

    /** NMMU_FIR[26]
     *  Invalid wimg setting detected
     */
    (rNMMU_FIR, bit(26)) ? defaultMaskedError;

    /** NMMU_FIR[27]
     *  Invalid radix quad access detected
     */
    (rNMMU_FIR, bit(27)) ? defaultMaskedError;

    /** NMMU_FIR[28]
     *  Unexpected access to foreign address space
     */
    (rNMMU_FIR, bit(28)) ? defaultMaskedError;

    /** NMMU_FIR[29]
     *  Prefetch abort/fail detected
     */
    (rNMMU_FIR, bit(29)) ? defaultMaskedError;

    /** NMMU_FIR[30]
     *  Context cache array parity error detected
     */
    (rNMMU_FIR, bit(30)) ? parent_proc_th_32perDay;
    # P10_10: CS parent_proc_th_1

    /** NMMU_FIR[31]
     *  Radix pwc array parity error detected
     */
    (rNMMU_FIR, bit(31)) ? parent_proc_th_32perDay;
    # P10_10: CS parent_proc_th_1

    /** NMMU_FIR[32]
     *  Tablewalk sm control error detected
     */
    (rNMMU_FIR, bit(32)) ? parent_proc_th_1;

    /** NMMU_FIR[33]
     *  Castout sm control error detected
     */
    (rNMMU_FIR, bit(33)) ? parent_proc_th_1;

    /** NMMU_FIR[34]
     *  Check-in sm control error detected
     */
    (rNMMU_FIR, bit(34)) ? parent_proc_th_1;

    /** NMMU_FIR[35]
     *  Invalidate sm control error detected
     */
    (rNMMU_FIR, bit(35)) ? parent_proc_th_1;

    /** NMMU_FIR[36]
     *  Tablewalk sm timeout error detected
     */
    (rNMMU_FIR, bit(36)) ? defaultMaskedError;

    /** NMMU_FIR[37]
     *  Castout sm timeout error detected
     */
    (rNMMU_FIR, bit(37)) ? defaultMaskedError;

    /** NMMU_FIR[38]
     *  Check-in sm timeout error detected
     */
    (rNMMU_FIR, bit(38)) ? defaultMaskedError;

    /** NMMU_FIR[39]
     *  Invalidate sm timeout error detected
     */
    (rNMMU_FIR, bit(39)) ? defaultMaskedError;

    /** NMMU_FIR[40]
     *  NX local checkstop error detected
     */
    (rNMMU_FIR, bit(40)) ? defaultMaskedError;

    /** NMMU_FIR[41]
     *  fbc snoop invalidate filter parity error
     */
    (rNMMU_FIR, bit(41)) ? parent_proc_th_32perDay;
    # P10_10: CS parent_proc_th_1

    /** NMMU_FIR[42]
     *  fabric purge threshold exceeded
     */
    (rNMMU_FIR, bit(42)) ? parent_proc_th_1;

    /** NMMU_FIR[43]
     *  NPU local checkstop error detected
     */
    (rNMMU_FIR, bit(43)) ? defaultMaskedError;

    /** NMMU_FIR[44]
     *  FBC local checkstop error detected
     */
    (rNMMU_FIR, bit(44)) ? defaultMaskedError;

    /** NMMU_FIR[45]
     *  FBC local checkstop error detected
     */
    (rNMMU_FIR, bit(45)) ? defaultMaskedError;

};

 ##############################################################################
 #                                                                            #
 #    #                                  ###                                  #
 #   # #    ##  ##### ###  ###  #   #   #   # #     #    ###   ###  ###  ###  #
 #  #   #  #  #   #    #  #   # ##  #   #     #    # #  #     #     #   #     #
 # ####### #      #    #  #   # # # #   #     #   #####  ###   ###  ##   ###  #
 # #     # #  #   #    #  #   # #  ##   #   # #   #   #     #     # #       # #
 # #     #  ##    #   ###  ###  #   #    ###  ### #   #  ###   ###  ###  ###  #
 #                                                                            #
 ##############################################################################

# Include the actions defined for this target
.include "p10_common_actions.rule";
.include "p10_nmmu_actions.rule";

