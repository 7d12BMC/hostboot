# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/diag/prdf/common/plat/p10/p10_iohs_actions.rule $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2020,2022
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

actionclass analyze_IOHS_DLP_FIR_SMP
{
    # The hardware team wanted these register captured for more than just
    # attentions that call out an SMP bus. So we'll capture them for any
    # attentions coming from the IOHS_DLP_FIR (in SMP mode).
    capture(smp_ffdc);
    capture(smp_ffdc_l0);
    capture(smp_ffdc_l1);
    analyze(gIOHS_DLP_FIR_SMP);
};

actionclass smp_callout_l0
{
    funccall("smp_callout_l0");
};

actionclass smp_callout_l1
{
    funccall("smp_callout_l1");
};

actionclass smp_callout_l0_th_1
{
    smp_callout_l0;
    threshold1;
};

actionclass smp_callout_l1_th_1
{
    smp_callout_l1;
    threshold1;
};

actionclass smp_callout_l0_th_32perDay
{
    smp_callout_l0;
    threshold32pday;
};

actionclass smp_callout_l1_th_32perDay
{
    smp_callout_l1;
    threshold32pday;
};

actionclass smp_failure_l0_th_1
{
    smp_callout_l0;
    funccall("smp_failure_l0");
    threshold1;
};

actionclass smp_failure_l1_th_1
{
    smp_callout_l1;
    funccall("smp_failure_l1");
    threshold1;
};

actionclass opencapi_l0_th_32perDay
{
    # NOTE: TARGETING::TYPE_SMPGROUP == fapi2::TARGET_TYPE_IOLINK
    callout(connected(TYPE_SMPGROUP,0), MRU_MED, NO_GARD);
    threshold32pday;
};

actionclass opencapi_l1_th_32perDay
{
    # NOTE: TARGETING::TYPE_SMPGROUP == fapi2::TARGET_TYPE_IOLINK
    callout(connected(TYPE_SMPGROUP,1), MRU_MED, NO_GARD);
    threshold32pday;
};

actionclass opencapi_l0_th_1
{
    # NOTE: TARGETING::TYPE_SMPGROUP == fapi2::TARGET_TYPE_IOLINK
    callout(connected(TYPE_SMPGROUP,0), MRU_MED, NO_GARD);
    threshold1;
};

actionclass opencapi_l1_th_1
{
    # NOTE: TARGETING::TYPE_SMPGROUP == fapi2::TARGET_TYPE_IOLINK
    callout(connected(TYPE_SMPGROUP,1), MRU_MED, NO_GARD);
    threshold1;
};

actionclass threshold_and_mask_smp_l0
{
    smp_callout_l0;
    threshold_and_mask_th32;
};

actionclass threshold_and_mask_smp_l1
{
    smp_callout_l1;
    threshold_and_mask_th32;
};

actionclass spare_lane_deploy_l0
{
    funccall("mnfg_force_half_bandwidth_mode_l0"); # must do before smp_callout
    smp_callout_l0_th_32perDay;
    funccall("power_down_lanes_l0");
};

actionclass spare_lane_deploy_l1
{
    funccall("mnfg_force_half_bandwidth_mode_l1"); # must do before smp_callout
    smp_callout_l1_th_32perDay;
    funccall("power_down_lanes_l1");
};

