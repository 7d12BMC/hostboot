# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/diag/prdf/common/plat/p10/p10_proc_actions.rule $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2020,2022
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

actionclass level2_M_self_L_th_32perDay
{
    callout2ndLvlMed;
    calloutSelfLowNoGard;
    threshold32pday;
};

/** Callout connected NX, threshold 32/day */
actionclass nx_th_32perDay
{
    callout(connected(TYPE_NX,0), MRU_MED);
    threshold32pday;
};

/** Callout connected NX, threshold 1 */
actionclass nx_th_1
{
    callout(connected(TYPE_NX,0), MRU_MED);
    threshold1;
};

/** Callout connected NX, threshold 1, SUE originated from somewhere else */
actionclass nx_th_1_SUE { nx_th_1; SueSeen; };

/** PLL Threshold of 2 per 5 mins */
actionclass thresholdPll
{
    threshold( field(2 / 5 min) );
};

/** This action is needed when TP_LOCAL_FIR[28] is set and the attention was not
 *  attributed to a PLL unlock error. */
actionclass pcb_slave_internal_parity
{
    calloutSelfHigh;
    thresholdPll;
    funccall("capturePllFfdc");
    funccall("clearPcbSlaveParityError");
    funccall("maskPcbSlaveParityError"); # must be called last for return code
};

/**
 * Threshold 32/day (field) and 1 (mnfg). Do not predictively callout on
 * threshold, instead just mask.
 */
actionclass hang_recovery_gte
{
    calloutSelfMed;
    threshold32pday;
    funccall("ClearServiceCallFlag_mnfgInfo");
};

actionclass hang_recovery_gte_eq0 {capture(PbStationModeEQ0); hang_recovery_gte;};
actionclass hang_recovery_gte_eq1 {capture(PbStationModeEQ1); hang_recovery_gte;};
actionclass hang_recovery_gte_eq2 {capture(PbStationModeEQ2); hang_recovery_gte;};
actionclass hang_recovery_gte_eq3 {capture(PbStationModeEQ3); hang_recovery_gte;};
actionclass hang_recovery_gte_eq4 {capture(PbStationModeEQ4); hang_recovery_gte;};
actionclass hang_recovery_gte_eq5 {capture(PbStationModeEQ5); hang_recovery_gte;};
actionclass hang_recovery_gte_eq6 {capture(PbStationModeEQ6); hang_recovery_gte;};
actionclass hang_recovery_gte_eq7 {capture(PbStationModeEQ7); hang_recovery_gte;};
actionclass hang_recovery_gte_en1 {capture(PbStationModeEN1); hang_recovery_gte;};
actionclass hang_recovery_gte_en2 {capture(PbStationModeEN2); hang_recovery_gte;};
actionclass hang_recovery_gte_en3 {capture(PbStationModeEN3); hang_recovery_gte;};
actionclass hang_recovery_gte_en4 {capture(PbStationModeEN4); hang_recovery_gte;};
actionclass hang_recovery_gte_es1 {capture(PbStationModeES1); hang_recovery_gte;};
actionclass hang_recovery_gte_es2 {capture(PbStationModeES2); hang_recovery_gte;};
actionclass hang_recovery_gte_es3 {capture(PbStationModeES3); hang_recovery_gte;};
actionclass hang_recovery_gte_es4 {capture(PbStationModeES4); hang_recovery_gte;};

actionclass sbe_vital_attn
{
    # Thresholding is only necessary to prevent flooding. PRD should not need to
    # do any service action (unless in MNFG mode). Instead, call SBE interface
    # initiate SBE recovery.
    threshold_and_mask_self;
    funccall("handleSbeVital");
};

actionclass deadmanTimer
{
    funccall("handleDeadmanTimer");
};

# The bits characterized by this action are all handled in the PLL error
# analysis code. This action is just in case the PLL error handler failed and we
# got an errant attention.
actionclass rcs_error_handling { level2_th_1; };

# The bit characterized by this action should be routed to the OCC and should
# never be seen by PRD.
actionclass occInterrupt { level2_th_1; };

actionclass hostLpcTimeout { funccall("hostLpcTimeout"); };

###############################################################################
# TOD actions
###############################################################################

rule TodErrors
{
    TOD_ERRORREGISTER & (~TOD_ERRORMASK) & (~TOD_ERRORACTION);
};


group gTodErrors filter singlebit
{
    /** TOD_ERRORREGISTER[0]
     *  M_PATH_CONTROL_REG_DATA_PARITY_ERROR
     */
    (TodErrors,bit(0)) ? defaultMaskedError;

    /** TOD_ERRORREGISTER[1]
     *  M_PATH_0_PARITY_ERROR
     */
    (TodErrors,bit(1)) ? self_H_th_32perDay_TopReConfig;

    /** TOD_ERRORREGISTER[2]
     *  M_PATH_1_PARITY_ERROR
     */
    (TodErrors,bit(2)) ? self_H_th_32perDay_TopReConfig;

    /** TOD_ERRORREGISTER[3]
     *  PCRP0_DATA_PARITY_ERROR
     */
    (TodErrors,bit(3)) ? defaultMaskedError;

    /** TOD_ERRORREGISTER[4]
     *  PCRP1_DATA_PARITY_ERROR
     */
    (TodErrors,bit(4)) ? defaultMaskedError;

    /** TOD_ERRORREGISTER[5]
     *  SCRP0_DATA_PARITY_ERROR
     */
    (TodErrors,bit(5)) ? defaultMaskedError;

    /** TOD_ERRORREGISTER[6]
     *  SCRP1_DATA_PARITY_ERROR
     */
    (TodErrors,bit(6)) ? defaultMaskedError;

    /** TOD_ERRORREGISTER[7]
     *  SPCR_DATA_PARITY_ERROR
     */
    (TodErrors,bit(7)) ? defaultMaskedError;

    /** TOD_ERRORREGISTER[8]
     *  IPCR_DATA_PARITY_ERROR
     */
    (TodErrors,bit(8)) ? defaultMaskedError;

    /** TOD_ERRORREGISTER[9]
     *  PSMSCR_DATA_PARITY_ERROR
     */
    (TodErrors,bit(9)) ? defaultMaskedError;

    /** TOD_ERRORREGISTER[10]
     *  S_PATH_0_PARITY_ERROr
     */
    (TodErrors,bit(10)) ? self_H_th_32perDay_TopReConfig;

    /** TOD_ERRORREGISTER[11]
     *  REG_0X08_DATA_PARITY_ERROR
     */
    (TodErrors,bit(11)) ? self_H_th_32perDay;


    /** TOD_ERRORREGISTER[12]
     *  M_PATH_STATUS_REG_DATA_PARITY_ERROR
     */
    (TodErrors,bit(12)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[13]
     *  S_PATH_STATUS_REG_DATA_PARITY_ERROR
     */
    (TodErrors,bit(13)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[14]
     *  M_PATH_0_STEP_CHECK_ERROR
     */
    (TodErrors,bit(14)) ? analyzeStepCheckErr;

    /** TOD_ERRORREGISTER[15]
     *  M_PATH_1_STEP_CHECK_ERROR
     */
    (TodErrors,bit(15)) ? analyzeStepCheckErr;

    /** TOD_ERRORREGISTER[16]
     *  S_PATH_0_STEP_CHECK_ERROR
     */
    (TodErrors,bit(16)) ? analyzeStepCheckErr;

    /** TOD_ERRORREGISTER[17]
     *  I_PATH_STEP_CHECK_ERROR
     */
    (TodErrors,bit(17)) ? analyzeStepCheckErr;

    /** TOD_ERRORREGISTER[18]
     *  PSS HAMMING DISTANCE
     */
    (TodErrors,bit(18)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[19]
     *  MISC_RESET_REG_DATA_PARITY_ERROR
     */
    (TodErrors,bit(19)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[20]
     *  S_PATH_0_PARITY_ERROR
     */
    (TodErrors,bit(20)) ? self_H_th_32perDay_TopReConfig;

    /** TOD_ERRORREGISTER[21]
     *  S_PATH_1_STEP_CHECK_ERROR
     */
    (TodErrors,bit(21)) ? analyzeStepCheckErr;

    /** TOD_ERRORREGISTER[22]
     *  I_PATH_DELAY_STEP_CHECK_PARITY_ERROR
     */
    (TodErrors,bit(22)) ? self_H_th_32perDay_TopReConfig;

    /** TOD_ERRORREGISTER[23]
     *  REG_0X0C DATA_PARITY ERROR
     */
    (TodErrors,bit(23)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[24]
     *  REG_0X11_0X12_0X13_0X14_0X15_0X16_DATA_PARITY_ERROR
     */
    (TodErrors,bit(24)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[25]
     * REG_0X17_0X18_0X21_0X22_DATA_PARITY_ERROR
     */
    (TodErrors,bit(25)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[26]
     *  REG_0X1D_0X1E_0X1F_DATA_PARITY_ERROR
     */
    (TodErrors,bit(26)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[27]
     *  TIMER_VALUE_REG_DATA_PARITY_ERROR
     */
    (TodErrors,bit(27)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[28]
     *  LOW_ORDER_STEP_REG_DATA_PARITY_ERROR
     */
    (TodErrors,bit(28)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[29]
     *  FSM_REG_DATA_PARITY_ERROR
     */
    (TodErrors,bit(29)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[30]
     *  RX_TTYPE_CONTROL_REG_DATA_PARITY_ERROR
     */
    (TodErrors,bit(30)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[31]
     *  REG_0X30_0X31_0X32_0X33_DATA_PARITY_ERROR
     */
    (TodErrors,bit(31)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[32]
     *  CHIP_CONTROL_REG_DATA_PARITY_ERROR
     */
    (TodErrors,bit(32)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[33]
     *  I_PATH_SYNC_CHECK_ERROR
     */
    (TodErrors,bit(33)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[34]
     *  I_PATH_FSM_STATE_PARITY_ERROR
     */
    (TodErrors,bit(34)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[35]
     *  I_PATH_TIME_REG_PARITY_ERROR
     */
    (TodErrors,bit(35)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[36]
     *  I_PATH_TIME_REG_OVERFLOW
     */
    (TodErrors,bit(36)) ? maskTodError;

    /** TOD_ERRORREGISTER[37]
     *  WOF_LOW_ORDER_STEP_COUNTER_PARITY_ERROR
     */
    (TodErrors,bit(37)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[38|39|40|41|42|43]
     *  RX_TTYPE_1
     */
    (TodErrors,bit(38|39|40|41|42|43)) ? defaultMaskedError;

    #Note: For firmware all the TOD-PIB errors are informational by nature.So,
    # not doing any special analysis.
    /** TOD_ERRORREGISTER[44]
     *  PIB_SLAVE_ADDR_INVALID_ERROR
     */
    (TodErrors,bit(44)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[45]
     *  PIB_SLAVE_WRITE_INVALID_ERROR
     */
    (TodErrors,bit(45)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[46]
     *  PIB_SLAVE_READ_INVALID_ERROR
     */
    (TodErrors,bit(46)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[47]
     *  PIB_SLAVE_ADDR_PARITY_ERROR
     */
    (TodErrors,bit(47)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[48]
     *  PIB_SLAVE_DATA_PARITY_ERROR
     */
    (TodErrors,bit(48)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[49]
     *  TTYPE_CONTROL_REG_DATA_PARITY_ERROR
     */
    #Note: Based on discussion with with Hardware Team and PHYP, this error
    #shall be routed to PHYP instead of FSP
    (TodErrors,bit(49)) ? defaultMaskedError;

    /** TOD_ERRORREGISTER[50|51|52]
     *  PIB_MASTER_RSP_INFO_ERROR
     */
    #ignoring TOD-PIB errors for any special analysis.Since errors are
    #informational by nature.
    (TodErrors,bit( 50|51|52 )) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[53]
     *  RX_TTYPE_INVALID_ERROR
     */
    (TodErrors,bit(53 )) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[54]
     *  RX_TTYPE_4_DATA_PARITY_ERROR
     */
    (TodErrors,bit(54)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[55]
     *  PIB_MASTER_REQUEST_ERROR
     */
    (TodErrors,bit(55)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[56]
     *  PIB_RESET_DURING_PIB_ACCESS_ERROR
     */
    (TodErrors,bit(56)) ? self_H_th_32perDay;

    /** TOD_ERRORREGISTER[57]
     *  EXTERNAL_XSTOP_ERROR
     */
    #bit tells us that TOD has received an external check stop
    #purpose is to merely provide an information. Hence not doing any
    #analysis.
    (TodErrors,bit(57)) ? defaultMaskedError;

    #bit[58:63] not implemented
    /** TOD_ERRORREGISTER[58|59|60|61|62|63]
     *  SPARE_ERROR
     */
    (TodErrors,bit(58|59|60|61|62|63)) ? defaultMaskedError;

};

/**
 *  Mask indication from PHYP due to all cores evacuated.
 *    - Mask TOD errors from this chip.
 *    - Not visible unless xstp.
 *    - Request new topology if chip is MDMT.
 */
actionclass maskTodError
{
    calloutSelfHigh;
    threshold_and_mask_th1;
    funccall("todNewTopologyIfBackupMDMT");
};

/** callout Proc reporting error. If threshold reaches 32 per day, request
 *  reconfiguration of topology.
 */
actionclass self_H_th_32perDay_TopReConfig
{
    self_H_th_32perDay;
    funccall("requestTopologySwitch");
};

/**
 * TOD Step Check Fault - Isolate topology.
 */
actionclass analyzeStepCheckErr
{
    threshold32pday;
    try( funccall("todStepCheckFault"), self_H_th_1 );
};

/**
 * Analyze TOD Register.
 */
actionclass TodReportByRegister
{
    capture(TODReg);
    try( analyze(gTodErrors), self_H_th_1 );
};

/** analyzes backup topology if TOD error analysis is enabled */
actionclass analyzeTodBackupTopology
{
    try( funccall("isTodDisabled"), TodReportByRegister );
};

/** callout and gard self if TOD error analysis is enabled */
actionclass analyzePibError
{
    capture(TODReg);
    try( funccall("isTodDisabled"), self_H_th_1 );
};

/**
 * PHYP Network fault.
 */
actionclass TodReportByPHYP
{
    capture(TODReg);
    threshold1;
    try( funccall("todStepCheckFault"), self_H_th_1 );
};

/** analyzes active topology if TOD error analysis is enabled */
actionclass analyzePhypTodError
{
    try( funccall("isTodDisabled"), TodReportByPHYP );
};

###############################################################################
# Analyze connected
###############################################################################

actionclass analyzeConnectedEQ0   { analyze(connected(TYPE_EQ,   0)); };
actionclass analyzeConnectedEQ1   { analyze(connected(TYPE_EQ,   1)); };
actionclass analyzeConnectedEQ2   { analyze(connected(TYPE_EQ,   2)); };
actionclass analyzeConnectedEQ3   { analyze(connected(TYPE_EQ,   3)); };
actionclass analyzeConnectedEQ4   { analyze(connected(TYPE_EQ,   4)); };
actionclass analyzeConnectedEQ5   { analyze(connected(TYPE_EQ,   5)); };
actionclass analyzeConnectedEQ6   { analyze(connected(TYPE_EQ,   6)); };
actionclass analyzeConnectedEQ7   { analyze(connected(TYPE_EQ,   7)); };
actionclass analyzeConnectedIOHS0 { analyze(connected(TYPE_IOHS, 0)); };
actionclass analyzeConnectedIOHS1 { analyze(connected(TYPE_IOHS, 1)); };
actionclass analyzeConnectedIOHS2 { analyze(connected(TYPE_IOHS, 2)); };
actionclass analyzeConnectedIOHS3 { analyze(connected(TYPE_IOHS, 3)); };
actionclass analyzeConnectedIOHS4 { analyze(connected(TYPE_IOHS, 4)); };
actionclass analyzeConnectedIOHS5 { analyze(connected(TYPE_IOHS, 5)); };
actionclass analyzeConnectedIOHS6 { analyze(connected(TYPE_IOHS, 6)); };
actionclass analyzeConnectedIOHS7 { analyze(connected(TYPE_IOHS, 7)); };
actionclass analyzeConnectedMC0   { analyze(connected(TYPE_MC,   0)); };
actionclass analyzeConnectedMC1   { analyze(connected(TYPE_MC,   1)); };
actionclass analyzeConnectedMC2   { analyze(connected(TYPE_MC,   2)); };
actionclass analyzeConnectedMC3   { analyze(connected(TYPE_MC,   3)); };
actionclass analyzeConnectedNMMU0 { analyze(connected(TYPE_NMMU, 0)); };
actionclass analyzeConnectedNMMU1 { analyze(connected(TYPE_NMMU, 1)); };
actionclass analyzeConnectedPAU0  { analyze(connected(TYPE_PAU,  0)); };
#actionclass analyzeConnectedPAU1  { analyze(connected(TYPE_PAU,  1)); };
#actionclass analyzeConnectedPAU2  { analyze(connected(TYPE_PAU,  2)); };
actionclass analyzeConnectedPAU3  { analyze(connected(TYPE_PAU,  3)); };
actionclass analyzeConnectedPAU4  { analyze(connected(TYPE_PAU,  4)); };
actionclass analyzeConnectedPAU5  { analyze(connected(TYPE_PAU,  5)); };
actionclass analyzeConnectedPAU6  { analyze(connected(TYPE_PAU,  6)); };
actionclass analyzeConnectedPAU7  { analyze(connected(TYPE_PAU,  7)); };
actionclass analyzeConnectedPAUC0 { analyze(connected(TYPE_PAUC, 0)); };
actionclass analyzeConnectedPAUC1 { analyze(connected(TYPE_PAUC, 1)); };
actionclass analyzeConnectedPAUC2 { analyze(connected(TYPE_PAUC, 2)); };
actionclass analyzeConnectedPAUC3 { analyze(connected(TYPE_PAUC, 3)); };
actionclass analyzeConnectedPEC0  { analyze(connected(TYPE_PEC,  0)); };
actionclass analyzeConnectedPEC1  { analyze(connected(TYPE_PEC,  1)); };
actionclass analyzeConnectedPHB0  { analyze(connected(TYPE_PHB,  0)); };
actionclass analyzeConnectedPHB1  { analyze(connected(TYPE_PHB,  1)); };
actionclass analyzeConnectedPHB2  { analyze(connected(TYPE_PHB,  2)); };
actionclass analyzeConnectedPHB3  { analyze(connected(TYPE_PHB,  3)); };
actionclass analyzeConnectedPHB4  { analyze(connected(TYPE_PHB,  4)); };
actionclass analyzeConnectedPHB5  { analyze(connected(TYPE_PHB,  5)); };


actionclass analyzeHCA_FIR
{
    capture(hca_fir_ffdc);
    analyze(gHCA_FIR);
};

actionclass analyzeINT_CQ_FIR
{
    capture(int_cq_fir_ffdc);
    analyze(gINT_CQ_FIR);
};

actionclass analyzeNX_CQ_FIR
{
    capture(nx_cq_fir_ffdc);
    analyze(gNX_CQ_FIR);
};

actionclass analyzeNX_DMA_ENG_FIR
{
    capture(nx_dma_eng_fir_ffdc);
    analyze(gNX_DMA_ENG_FIR);
};

actionclass analyzeOCC_FIR
{
    capture(occ_fir_ffdc);
    analyze(gOCC_FIR);
};

actionclass analyzePBAF_FIR
{
    capture(pbaf_fir_ffdc);
    analyze(gPBAF_FIR);
};

actionclass analyzePBAO_FIR
{
    capture(pbao_fir_ffdc);
    analyze(gPBAO_FIR);
};
